// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: topodata.proto

package io.vitess.proto;

public final class Topodata {
  private Topodata() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * KeyspaceType describes the type of the keyspace
   * </pre>
   *
   * Protobuf enum {@code topodata.KeyspaceType}
   */
  public enum KeyspaceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * NORMAL is the default value
     * </pre>
     *
     * <code>NORMAL = 0;</code>
     */
    NORMAL(0),
    /**
     * <pre>
     * SNAPSHOT is when we are creating a snapshot keyspace
     * </pre>
     *
     * <code>SNAPSHOT = 1;</code>
     */
    SNAPSHOT(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * NORMAL is the default value
     * </pre>
     *
     * <code>NORMAL = 0;</code>
     */
    public static final int NORMAL_VALUE = 0;
    /**
     * <pre>
     * SNAPSHOT is when we are creating a snapshot keyspace
     * </pre>
     *
     * <code>SNAPSHOT = 1;</code>
     */
    public static final int SNAPSHOT_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KeyspaceType valueOf(int value) {
      return forNumber(value);
    }

    public static KeyspaceType forNumber(int value) {
      switch (value) {
        case 0: return NORMAL;
        case 1: return SNAPSHOT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<KeyspaceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        KeyspaceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<KeyspaceType>() {
            public KeyspaceType findValueByNumber(int number) {
              return KeyspaceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.getDescriptor().getEnumTypes().get(0);
    }

    private static final KeyspaceType[] VALUES = values();

    public static KeyspaceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private KeyspaceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:topodata.KeyspaceType)
  }

  /**
   * <pre>
   * KeyspaceIdType describes the type of the sharding key for a
   * range-based sharded keyspace.
   * </pre>
   *
   * Protobuf enum {@code topodata.KeyspaceIdType}
   */
  public enum KeyspaceIdType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * UNSET is the default value, when range-based sharding is not used.
     * </pre>
     *
     * <code>UNSET = 0;</code>
     */
    UNSET(0),
    /**
     * <pre>
     * UINT64 is when uint64 value is used.
     * This is represented as 'unsigned bigint' in mysql
     * </pre>
     *
     * <code>UINT64 = 1;</code>
     */
    UINT64(1),
    /**
     * <pre>
     * BYTES is when an array of bytes is used.
     * This is represented as 'varbinary' in mysql
     * </pre>
     *
     * <code>BYTES = 2;</code>
     */
    BYTES(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * UNSET is the default value, when range-based sharding is not used.
     * </pre>
     *
     * <code>UNSET = 0;</code>
     */
    public static final int UNSET_VALUE = 0;
    /**
     * <pre>
     * UINT64 is when uint64 value is used.
     * This is represented as 'unsigned bigint' in mysql
     * </pre>
     *
     * <code>UINT64 = 1;</code>
     */
    public static final int UINT64_VALUE = 1;
    /**
     * <pre>
     * BYTES is when an array of bytes is used.
     * This is represented as 'varbinary' in mysql
     * </pre>
     *
     * <code>BYTES = 2;</code>
     */
    public static final int BYTES_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KeyspaceIdType valueOf(int value) {
      return forNumber(value);
    }

    public static KeyspaceIdType forNumber(int value) {
      switch (value) {
        case 0: return UNSET;
        case 1: return UINT64;
        case 2: return BYTES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<KeyspaceIdType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        KeyspaceIdType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<KeyspaceIdType>() {
            public KeyspaceIdType findValueByNumber(int number) {
              return KeyspaceIdType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.getDescriptor().getEnumTypes().get(1);
    }

    private static final KeyspaceIdType[] VALUES = values();

    public static KeyspaceIdType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private KeyspaceIdType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:topodata.KeyspaceIdType)
  }

  /**
   * <pre>
   * TabletType represents the type of a given tablet.
   * </pre>
   *
   * Protobuf enum {@code topodata.TabletType}
   */
  public enum TabletType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * UNKNOWN is not a valid value.
     * </pre>
     *
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0, 0),
    /**
     * <pre>
     * MASTER is the master server for the shard. Only MASTER allows DMLs.
     * </pre>
     *
     * <code>MASTER = 1;</code>
     */
    MASTER(1, 1),
    /**
     * <pre>
     * REPLICA replicates from master. It is used to serve live traffic.
     * A REPLICA can be promoted to MASTER. A demoted MASTER will go to REPLICA.
     * </pre>
     *
     * <code>REPLICA = 2;</code>
     */
    REPLICA(2, 2),
    /**
     * <pre>
     * RDONLY (old name) / BATCH (new name) is used to serve traffic for
     * long-running jobs. It is a separate type from REPLICA so
     * long-running queries don't affect web-like traffic.
     * </pre>
     *
     * <code>RDONLY = 3;</code>
     */
    RDONLY(3, 3),
    /**
     * <pre>
     * SPARE is a type of servers that cannot serve queries, but is available
     * in case an extra server is needed.
     * </pre>
     *
     * <code>SPARE = 4;</code>
     */
    SPARE(5, 4),
    /**
     * <pre>
     * EXPERIMENTAL is like SPARE, except it can serve queries. This
     * type can be used for usages not planned by Vitess, like online
     * export to another storage engine.
     * </pre>
     *
     * <code>EXPERIMENTAL = 5;</code>
     */
    EXPERIMENTAL(6, 5),
    /**
     * <pre>
     * BACKUP is the type a server goes to when taking a backup. No queries
     * can be served in BACKUP mode.
     * </pre>
     *
     * <code>BACKUP = 6;</code>
     */
    BACKUP(7, 6),
    /**
     * <pre>
     * RESTORE is the type a server uses when restoring a backup, at
     * startup time.  No queries can be served in RESTORE mode.
     * </pre>
     *
     * <code>RESTORE = 7;</code>
     */
    RESTORE(8, 7),
    /**
     * <pre>
     * DRAINED is the type a server goes into when used by Vitess tools
     * to perform an offline action. It is a serving type (as
     * the tools processes may need to run queries), but it's not used
     * to route queries from Vitess users. In this state,
     * this tablet is dedicated to the process that uses it.
     * </pre>
     *
     * <code>DRAINED = 8;</code>
     */
    DRAINED(9, 8),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     * <code>BATCH = 3;</code>
     */
    public static final TabletType BATCH = RDONLY;
    /**
     * <pre>
     * UNKNOWN is not a valid value.
     * </pre>
     *
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * MASTER is the master server for the shard. Only MASTER allows DMLs.
     * </pre>
     *
     * <code>MASTER = 1;</code>
     */
    public static final int MASTER_VALUE = 1;
    /**
     * <pre>
     * REPLICA replicates from master. It is used to serve live traffic.
     * A REPLICA can be promoted to MASTER. A demoted MASTER will go to REPLICA.
     * </pre>
     *
     * <code>REPLICA = 2;</code>
     */
    public static final int REPLICA_VALUE = 2;
    /**
     * <pre>
     * RDONLY (old name) / BATCH (new name) is used to serve traffic for
     * long-running jobs. It is a separate type from REPLICA so
     * long-running queries don't affect web-like traffic.
     * </pre>
     *
     * <code>RDONLY = 3;</code>
     */
    public static final int RDONLY_VALUE = 3;
    /**
     * <code>BATCH = 3;</code>
     */
    public static final int BATCH_VALUE = 3;
    /**
     * <pre>
     * SPARE is a type of servers that cannot serve queries, but is available
     * in case an extra server is needed.
     * </pre>
     *
     * <code>SPARE = 4;</code>
     */
    public static final int SPARE_VALUE = 4;
    /**
     * <pre>
     * EXPERIMENTAL is like SPARE, except it can serve queries. This
     * type can be used for usages not planned by Vitess, like online
     * export to another storage engine.
     * </pre>
     *
     * <code>EXPERIMENTAL = 5;</code>
     */
    public static final int EXPERIMENTAL_VALUE = 5;
    /**
     * <pre>
     * BACKUP is the type a server goes to when taking a backup. No queries
     * can be served in BACKUP mode.
     * </pre>
     *
     * <code>BACKUP = 6;</code>
     */
    public static final int BACKUP_VALUE = 6;
    /**
     * <pre>
     * RESTORE is the type a server uses when restoring a backup, at
     * startup time.  No queries can be served in RESTORE mode.
     * </pre>
     *
     * <code>RESTORE = 7;</code>
     */
    public static final int RESTORE_VALUE = 7;
    /**
     * <pre>
     * DRAINED is the type a server goes into when used by Vitess tools
     * to perform an offline action. It is a serving type (as
     * the tools processes may need to run queries), but it's not used
     * to route queries from Vitess users. In this state,
     * this tablet is dedicated to the process that uses it.
     * </pre>
     *
     * <code>DRAINED = 8;</code>
     */
    public static final int DRAINED_VALUE = 8;


    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TabletType valueOf(int value) {
      return forNumber(value);
    }

    public static TabletType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return MASTER;
        case 2: return REPLICA;
        case 3: return RDONLY;
        case 4: return SPARE;
        case 5: return EXPERIMENTAL;
        case 6: return BACKUP;
        case 7: return RESTORE;
        case 8: return DRAINED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TabletType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TabletType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TabletType>() {
            public TabletType findValueByNumber(int number) {
              return TabletType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.getDescriptor().getEnumTypes().get(2);
    }

    private static final TabletType[] VALUES = {
      UNKNOWN, MASTER, REPLICA, RDONLY, BATCH, SPARE, EXPERIMENTAL, BACKUP, RESTORE, DRAINED, 
    };

    public static TabletType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TabletType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:topodata.TabletType)
  }

  public interface KeyRangeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.KeyRange)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes start = 1;</code>
     */
    com.google.protobuf.ByteString getStart();

    /**
     * <code>bytes end = 2;</code>
     */
    com.google.protobuf.ByteString getEnd();
  }
  /**
   * <pre>
   * KeyRange describes a range of sharding keys, when range-based
   * sharding is used.
   * </pre>
   *
   * Protobuf type {@code topodata.KeyRange}
   */
  public  static final class KeyRange extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.KeyRange)
      KeyRangeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use KeyRange.newBuilder() to construct.
    private KeyRange(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private KeyRange() {
      start_ = com.google.protobuf.ByteString.EMPTY;
      end_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private KeyRange(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {

              start_ = input.readBytes();
              break;
            }
            case 18: {

              end_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_KeyRange_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_KeyRange_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.KeyRange.class, io.vitess.proto.Topodata.KeyRange.Builder.class);
    }

    public static final int START_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString start_;
    /**
     * <code>bytes start = 1;</code>
     */
    public com.google.protobuf.ByteString getStart() {
      return start_;
    }

    public static final int END_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString end_;
    /**
     * <code>bytes end = 2;</code>
     */
    public com.google.protobuf.ByteString getEnd() {
      return end_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!start_.isEmpty()) {
        output.writeBytes(1, start_);
      }
      if (!end_.isEmpty()) {
        output.writeBytes(2, end_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!start_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, start_);
      }
      if (!end_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, end_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.KeyRange)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.KeyRange other = (io.vitess.proto.Topodata.KeyRange) obj;

      boolean result = true;
      result = result && getStart()
          .equals(other.getStart());
      result = result && getEnd()
          .equals(other.getEnd());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + START_FIELD_NUMBER;
      hash = (53 * hash) + getStart().hashCode();
      hash = (37 * hash) + END_FIELD_NUMBER;
      hash = (53 * hash) + getEnd().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.KeyRange parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.KeyRange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.KeyRange parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.KeyRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.KeyRange prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * KeyRange describes a range of sharding keys, when range-based
     * sharding is used.
     * </pre>
     *
     * Protobuf type {@code topodata.KeyRange}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.KeyRange)
        io.vitess.proto.Topodata.KeyRangeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_KeyRange_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_KeyRange_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.KeyRange.class, io.vitess.proto.Topodata.KeyRange.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.KeyRange.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        start_ = com.google.protobuf.ByteString.EMPTY;

        end_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_KeyRange_descriptor;
      }

      public io.vitess.proto.Topodata.KeyRange getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.KeyRange.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.KeyRange build() {
        io.vitess.proto.Topodata.KeyRange result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.KeyRange buildPartial() {
        io.vitess.proto.Topodata.KeyRange result = new io.vitess.proto.Topodata.KeyRange(this);
        result.start_ = start_;
        result.end_ = end_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.KeyRange) {
          return mergeFrom((io.vitess.proto.Topodata.KeyRange)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.KeyRange other) {
        if (other == io.vitess.proto.Topodata.KeyRange.getDefaultInstance()) return this;
        if (other.getStart() != com.google.protobuf.ByteString.EMPTY) {
          setStart(other.getStart());
        }
        if (other.getEnd() != com.google.protobuf.ByteString.EMPTY) {
          setEnd(other.getEnd());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.KeyRange parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.KeyRange) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.ByteString start_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes start = 1;</code>
       */
      public com.google.protobuf.ByteString getStart() {
        return start_;
      }
      /**
       * <code>bytes start = 1;</code>
       */
      public Builder setStart(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        start_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes start = 1;</code>
       */
      public Builder clearStart() {
        
        start_ = getDefaultInstance().getStart();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString end_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes end = 2;</code>
       */
      public com.google.protobuf.ByteString getEnd() {
        return end_;
      }
      /**
       * <code>bytes end = 2;</code>
       */
      public Builder setEnd(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        end_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes end = 2;</code>
       */
      public Builder clearEnd() {
        
        end_ = getDefaultInstance().getEnd();
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.KeyRange)
    }

    // @@protoc_insertion_point(class_scope:topodata.KeyRange)
    private static final io.vitess.proto.Topodata.KeyRange DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.KeyRange();
    }

    public static io.vitess.proto.Topodata.KeyRange getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<KeyRange>
        PARSER = new com.google.protobuf.AbstractParser<KeyRange>() {
      public KeyRange parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new KeyRange(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<KeyRange> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<KeyRange> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.KeyRange getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TabletAliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.TabletAlias)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * cell is the cell (or datacenter) the tablet is in
     * </pre>
     *
     * <code>string cell = 1;</code>
     */
    java.lang.String getCell();
    /**
     * <pre>
     * cell is the cell (or datacenter) the tablet is in
     * </pre>
     *
     * <code>string cell = 1;</code>
     */
    com.google.protobuf.ByteString
        getCellBytes();

    /**
     * <pre>
     * uid is a unique id for this tablet within the shard
     * (this is the MySQL server id as well).
     * </pre>
     *
     * <code>uint64 uid = 2;</code>
     */
    long getUid();
  }
  /**
   * <pre>
   * TabletAlias is a globally unique tablet identifier.
   * </pre>
   *
   * Protobuf type {@code topodata.TabletAlias}
   */
  public  static final class TabletAlias extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.TabletAlias)
      TabletAliasOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TabletAlias.newBuilder() to construct.
    private TabletAlias(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TabletAlias() {
      cell_ = "";
      uid_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TabletAlias(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              cell_ = s;
              break;
            }
            case 16: {

              uid_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_TabletAlias_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_TabletAlias_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.TabletAlias.class, io.vitess.proto.Topodata.TabletAlias.Builder.class);
    }

    public static final int CELL_FIELD_NUMBER = 1;
    private volatile java.lang.Object cell_;
    /**
     * <pre>
     * cell is the cell (or datacenter) the tablet is in
     * </pre>
     *
     * <code>string cell = 1;</code>
     */
    public java.lang.String getCell() {
      java.lang.Object ref = cell_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        cell_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * cell is the cell (or datacenter) the tablet is in
     * </pre>
     *
     * <code>string cell = 1;</code>
     */
    public com.google.protobuf.ByteString
        getCellBytes() {
      java.lang.Object ref = cell_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cell_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UID_FIELD_NUMBER = 2;
    private long uid_;
    /**
     * <pre>
     * uid is a unique id for this tablet within the shard
     * (this is the MySQL server id as well).
     * </pre>
     *
     * <code>uint64 uid = 2;</code>
     */
    public long getUid() {
      return uid_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getCellBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, cell_);
      }
      if (uid_ != 0L) {
        output.writeUInt64(2, uid_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getCellBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, cell_);
      }
      if (uid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, uid_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.TabletAlias)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.TabletAlias other = (io.vitess.proto.Topodata.TabletAlias) obj;

      boolean result = true;
      result = result && getCell()
          .equals(other.getCell());
      result = result && (getUid()
          == other.getUid());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CELL_FIELD_NUMBER;
      hash = (53 * hash) + getCell().hashCode();
      hash = (37 * hash) + UID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUid());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.TabletAlias parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.TabletAlias parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.TabletAlias prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TabletAlias is a globally unique tablet identifier.
     * </pre>
     *
     * Protobuf type {@code topodata.TabletAlias}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.TabletAlias)
        io.vitess.proto.Topodata.TabletAliasOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_TabletAlias_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_TabletAlias_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.TabletAlias.class, io.vitess.proto.Topodata.TabletAlias.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.TabletAlias.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        cell_ = "";

        uid_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_TabletAlias_descriptor;
      }

      public io.vitess.proto.Topodata.TabletAlias getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.TabletAlias.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.TabletAlias build() {
        io.vitess.proto.Topodata.TabletAlias result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.TabletAlias buildPartial() {
        io.vitess.proto.Topodata.TabletAlias result = new io.vitess.proto.Topodata.TabletAlias(this);
        result.cell_ = cell_;
        result.uid_ = uid_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.TabletAlias) {
          return mergeFrom((io.vitess.proto.Topodata.TabletAlias)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.TabletAlias other) {
        if (other == io.vitess.proto.Topodata.TabletAlias.getDefaultInstance()) return this;
        if (!other.getCell().isEmpty()) {
          cell_ = other.cell_;
          onChanged();
        }
        if (other.getUid() != 0L) {
          setUid(other.getUid());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.TabletAlias parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.TabletAlias) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object cell_ = "";
      /**
       * <pre>
       * cell is the cell (or datacenter) the tablet is in
       * </pre>
       *
       * <code>string cell = 1;</code>
       */
      public java.lang.String getCell() {
        java.lang.Object ref = cell_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          cell_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * cell is the cell (or datacenter) the tablet is in
       * </pre>
       *
       * <code>string cell = 1;</code>
       */
      public com.google.protobuf.ByteString
          getCellBytes() {
        java.lang.Object ref = cell_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cell_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * cell is the cell (or datacenter) the tablet is in
       * </pre>
       *
       * <code>string cell = 1;</code>
       */
      public Builder setCell(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        cell_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * cell is the cell (or datacenter) the tablet is in
       * </pre>
       *
       * <code>string cell = 1;</code>
       */
      public Builder clearCell() {
        
        cell_ = getDefaultInstance().getCell();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * cell is the cell (or datacenter) the tablet is in
       * </pre>
       *
       * <code>string cell = 1;</code>
       */
      public Builder setCellBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        cell_ = value;
        onChanged();
        return this;
      }

      private long uid_ ;
      /**
       * <pre>
       * uid is a unique id for this tablet within the shard
       * (this is the MySQL server id as well).
       * </pre>
       *
       * <code>uint64 uid = 2;</code>
       */
      public long getUid() {
        return uid_;
      }
      /**
       * <pre>
       * uid is a unique id for this tablet within the shard
       * (this is the MySQL server id as well).
       * </pre>
       *
       * <code>uint64 uid = 2;</code>
       */
      public Builder setUid(long value) {
        
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * uid is a unique id for this tablet within the shard
       * (this is the MySQL server id as well).
       * </pre>
       *
       * <code>uint64 uid = 2;</code>
       */
      public Builder clearUid() {
        
        uid_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.TabletAlias)
    }

    // @@protoc_insertion_point(class_scope:topodata.TabletAlias)
    private static final io.vitess.proto.Topodata.TabletAlias DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.TabletAlias();
    }

    public static io.vitess.proto.Topodata.TabletAlias getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TabletAlias>
        PARSER = new com.google.protobuf.AbstractParser<TabletAlias>() {
      public TabletAlias parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TabletAlias(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TabletAlias> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TabletAlias> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.TabletAlias getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TabletOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.Tablet)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * alias is the unique name of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletAlias alias = 1;</code>
     */
    boolean hasAlias();
    /**
     * <pre>
     * alias is the unique name of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletAlias alias = 1;</code>
     */
    io.vitess.proto.Topodata.TabletAlias getAlias();
    /**
     * <pre>
     * alias is the unique name of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletAlias alias = 1;</code>
     */
    io.vitess.proto.Topodata.TabletAliasOrBuilder getAliasOrBuilder();

    /**
     * <pre>
     * Fully qualified domain name of the host.
     * </pre>
     *
     * <code>string hostname = 2;</code>
     */
    java.lang.String getHostname();
    /**
     * <pre>
     * Fully qualified domain name of the host.
     * </pre>
     *
     * <code>string hostname = 2;</code>
     */
    com.google.protobuf.ByteString
        getHostnameBytes();

    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */
    int getPortMapCount();
    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */
    boolean containsPortMap(
        java.lang.String key);
    /**
     * Use {@link #getPortMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getPortMap();
    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getPortMapMap();
    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */

    int getPortMapOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */

    int getPortMapOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Keyspace name.
     * </pre>
     *
     * <code>string keyspace = 5;</code>
     */
    java.lang.String getKeyspace();
    /**
     * <pre>
     * Keyspace name.
     * </pre>
     *
     * <code>string keyspace = 5;</code>
     */
    com.google.protobuf.ByteString
        getKeyspaceBytes();

    /**
     * <pre>
     * Shard name. If range based sharding is used, it should match
     * key_range.
     * </pre>
     *
     * <code>string shard = 6;</code>
     */
    java.lang.String getShard();
    /**
     * <pre>
     * Shard name. If range based sharding is used, it should match
     * key_range.
     * </pre>
     *
     * <code>string shard = 6;</code>
     */
    com.google.protobuf.ByteString
        getShardBytes();

    /**
     * <pre>
     * If range based sharding is used, range for the tablet's shard.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 7;</code>
     */
    boolean hasKeyRange();
    /**
     * <pre>
     * If range based sharding is used, range for the tablet's shard.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 7;</code>
     */
    io.vitess.proto.Topodata.KeyRange getKeyRange();
    /**
     * <pre>
     * If range based sharding is used, range for the tablet's shard.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 7;</code>
     */
    io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder();

    /**
     * <pre>
     * type is the current type of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletType type = 8;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     * type is the current type of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletType type = 8;</code>
     */
    io.vitess.proto.Topodata.TabletType getType();

    /**
     * <pre>
     * It this is set, it is used as the database name instead of the
     * normal "vt_" + keyspace.
     * </pre>
     *
     * <code>string db_name_override = 9;</code>
     */
    java.lang.String getDbNameOverride();
    /**
     * <pre>
     * It this is set, it is used as the database name instead of the
     * normal "vt_" + keyspace.
     * </pre>
     *
     * <code>string db_name_override = 9;</code>
     */
    com.google.protobuf.ByteString
        getDbNameOverrideBytes();

    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */
    int getTagsCount();
    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */
    boolean containsTags(
        java.lang.String key);
    /**
     * Use {@link #getTagsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getTags();
    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getTagsMap();
    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */

    java.lang.String getTagsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */

    java.lang.String getTagsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * MySQL hostname.
     * </pre>
     *
     * <code>string mysql_hostname = 12;</code>
     */
    java.lang.String getMysqlHostname();
    /**
     * <pre>
     * MySQL hostname.
     * </pre>
     *
     * <code>string mysql_hostname = 12;</code>
     */
    com.google.protobuf.ByteString
        getMysqlHostnameBytes();

    /**
     * <pre>
     * MySQL port. Use topoproto.MysqlPort and topoproto.SetMysqlPort
     * to access this variable. The functions provide support
     * for legacy behavior.
     * </pre>
     *
     * <code>int32 mysql_port = 13;</code>
     */
    int getMysqlPort();

    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the current tablet began as master. If this tablet is not currently the
     * master, this value is ignored.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 14;</code>
     */
    boolean hasMasterTermStartTime();
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the current tablet began as master. If this tablet is not currently the
     * master, this value is ignored.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 14;</code>
     */
    vttime.Vttime.Time getMasterTermStartTime();
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the current tablet began as master. If this tablet is not currently the
     * master, this value is ignored.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 14;</code>
     */
    vttime.Vttime.TimeOrBuilder getMasterTermStartTimeOrBuilder();
  }
  /**
   * <pre>
   * Tablet represents information about a running instance of vttablet.
   * </pre>
   *
   * Protobuf type {@code topodata.Tablet}
   */
  public  static final class Tablet extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.Tablet)
      TabletOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Tablet.newBuilder() to construct.
    private Tablet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Tablet() {
      hostname_ = "";
      keyspace_ = "";
      shard_ = "";
      type_ = 0;
      dbNameOverride_ = "";
      mysqlHostname_ = "";
      mysqlPort_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Tablet(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.vitess.proto.Topodata.TabletAlias.Builder subBuilder = null;
              if (alias_ != null) {
                subBuilder = alias_.toBuilder();
              }
              alias_ = input.readMessage(io.vitess.proto.Topodata.TabletAlias.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(alias_);
                alias_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              hostname_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                portMap_ = com.google.protobuf.MapField.newMapField(
                    PortMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
              portMap__ = input.readMessage(
                  PortMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              portMap_.getMutableMap().put(
                  portMap__.getKey(), portMap__.getValue());
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              keyspace_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              shard_ = s;
              break;
            }
            case 58: {
              io.vitess.proto.Topodata.KeyRange.Builder subBuilder = null;
              if (keyRange_ != null) {
                subBuilder = keyRange_.toBuilder();
              }
              keyRange_ = input.readMessage(io.vitess.proto.Topodata.KeyRange.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keyRange_);
                keyRange_ = subBuilder.buildPartial();
              }

              break;
            }
            case 64: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 74: {
              java.lang.String s = input.readStringRequireUtf8();

              dbNameOverride_ = s;
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                tags_ = com.google.protobuf.MapField.newMapField(
                    TagsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000100;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              tags__ = input.readMessage(
                  TagsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              tags_.getMutableMap().put(
                  tags__.getKey(), tags__.getValue());
              break;
            }
            case 98: {
              java.lang.String s = input.readStringRequireUtf8();

              mysqlHostname_ = s;
              break;
            }
            case 104: {

              mysqlPort_ = input.readInt32();
              break;
            }
            case 114: {
              vttime.Vttime.Time.Builder subBuilder = null;
              if (masterTermStartTime_ != null) {
                subBuilder = masterTermStartTime_.toBuilder();
              }
              masterTermStartTime_ = input.readMessage(vttime.Vttime.Time.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(masterTermStartTime_);
                masterTermStartTime_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_Tablet_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetPortMap();
        case 10:
          return internalGetTags();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_Tablet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.Tablet.class, io.vitess.proto.Topodata.Tablet.Builder.class);
    }

    private int bitField0_;
    public static final int ALIAS_FIELD_NUMBER = 1;
    private io.vitess.proto.Topodata.TabletAlias alias_;
    /**
     * <pre>
     * alias is the unique name of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletAlias alias = 1;</code>
     */
    public boolean hasAlias() {
      return alias_ != null;
    }
    /**
     * <pre>
     * alias is the unique name of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletAlias alias = 1;</code>
     */
    public io.vitess.proto.Topodata.TabletAlias getAlias() {
      return alias_ == null ? io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : alias_;
    }
    /**
     * <pre>
     * alias is the unique name of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletAlias alias = 1;</code>
     */
    public io.vitess.proto.Topodata.TabletAliasOrBuilder getAliasOrBuilder() {
      return getAlias();
    }

    public static final int HOSTNAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object hostname_;
    /**
     * <pre>
     * Fully qualified domain name of the host.
     * </pre>
     *
     * <code>string hostname = 2;</code>
     */
    public java.lang.String getHostname() {
      java.lang.Object ref = hostname_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        hostname_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Fully qualified domain name of the host.
     * </pre>
     *
     * <code>string hostname = 2;</code>
     */
    public com.google.protobuf.ByteString
        getHostnameBytes() {
      java.lang.Object ref = hostname_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hostname_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PORT_MAP_FIELD_NUMBER = 4;
    private static final class PortMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  io.vitess.proto.Topodata.internal_static_topodata_Tablet_PortMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> portMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetPortMap() {
      if (portMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            PortMapDefaultEntryHolder.defaultEntry);
      }
      return portMap_;
    }

    public int getPortMapCount() {
      return internalGetPortMap().getMap().size();
    }
    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */

    public boolean containsPortMap(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetPortMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getPortMapMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getPortMap() {
      return getPortMapMap();
    }
    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Integer> getPortMapMap() {
      return internalGetPortMap().getMap();
    }
    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */

    public int getPortMapOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetPortMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Map of named ports. Normally this should include vt and grpc.
     * Going forward, the mysql port will be stored in mysql_port
     * instead of here.
     * For accessing mysql port, use topoproto.MysqlPort to fetch, and
     * topoproto.SetMysqlPort to set. These wrappers will ensure
     * legacy behavior is supported.
     * </pre>
     *
     * <code>map&lt;string, int32&gt; port_map = 4;</code>
     */

    public int getPortMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetPortMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int KEYSPACE_FIELD_NUMBER = 5;
    private volatile java.lang.Object keyspace_;
    /**
     * <pre>
     * Keyspace name.
     * </pre>
     *
     * <code>string keyspace = 5;</code>
     */
    public java.lang.String getKeyspace() {
      java.lang.Object ref = keyspace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        keyspace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Keyspace name.
     * </pre>
     *
     * <code>string keyspace = 5;</code>
     */
    public com.google.protobuf.ByteString
        getKeyspaceBytes() {
      java.lang.Object ref = keyspace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        keyspace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHARD_FIELD_NUMBER = 6;
    private volatile java.lang.Object shard_;
    /**
     * <pre>
     * Shard name. If range based sharding is used, it should match
     * key_range.
     * </pre>
     *
     * <code>string shard = 6;</code>
     */
    public java.lang.String getShard() {
      java.lang.Object ref = shard_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shard_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Shard name. If range based sharding is used, it should match
     * key_range.
     * </pre>
     *
     * <code>string shard = 6;</code>
     */
    public com.google.protobuf.ByteString
        getShardBytes() {
      java.lang.Object ref = shard_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shard_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEY_RANGE_FIELD_NUMBER = 7;
    private io.vitess.proto.Topodata.KeyRange keyRange_;
    /**
     * <pre>
     * If range based sharding is used, range for the tablet's shard.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 7;</code>
     */
    public boolean hasKeyRange() {
      return keyRange_ != null;
    }
    /**
     * <pre>
     * If range based sharding is used, range for the tablet's shard.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 7;</code>
     */
    public io.vitess.proto.Topodata.KeyRange getKeyRange() {
      return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
    }
    /**
     * <pre>
     * If range based sharding is used, range for the tablet's shard.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 7;</code>
     */
    public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
      return getKeyRange();
    }

    public static final int TYPE_FIELD_NUMBER = 8;
    private int type_;
    /**
     * <pre>
     * type is the current type of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletType type = 8;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * type is the current type of the tablet.
     * </pre>
     *
     * <code>.topodata.TabletType type = 8;</code>
     */
    public io.vitess.proto.Topodata.TabletType getType() {
      io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(type_);
      return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
    }

    public static final int DB_NAME_OVERRIDE_FIELD_NUMBER = 9;
    private volatile java.lang.Object dbNameOverride_;
    /**
     * <pre>
     * It this is set, it is used as the database name instead of the
     * normal "vt_" + keyspace.
     * </pre>
     *
     * <code>string db_name_override = 9;</code>
     */
    public java.lang.String getDbNameOverride() {
      java.lang.Object ref = dbNameOverride_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        dbNameOverride_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * It this is set, it is used as the database name instead of the
     * normal "vt_" + keyspace.
     * </pre>
     *
     * <code>string db_name_override = 9;</code>
     */
    public com.google.protobuf.ByteString
        getDbNameOverrideBytes() {
      java.lang.Object ref = dbNameOverride_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        dbNameOverride_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TAGS_FIELD_NUMBER = 10;
    private static final class TagsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  io.vitess.proto.Topodata.internal_static_topodata_Tablet_TagsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> tags_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetTags() {
      if (tags_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TagsDefaultEntryHolder.defaultEntry);
      }
      return tags_;
    }

    public int getTagsCount() {
      return internalGetTags().getMap().size();
    }
    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */

    public boolean containsTags(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetTags().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTagsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getTags() {
      return getTagsMap();
    }
    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getTagsMap() {
      return internalGetTags().getMap();
    }
    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */

    public java.lang.String getTagsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTags().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * tablet tags
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 10;</code>
     */

    public java.lang.String getTagsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTags().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int MYSQL_HOSTNAME_FIELD_NUMBER = 12;
    private volatile java.lang.Object mysqlHostname_;
    /**
     * <pre>
     * MySQL hostname.
     * </pre>
     *
     * <code>string mysql_hostname = 12;</code>
     */
    public java.lang.String getMysqlHostname() {
      java.lang.Object ref = mysqlHostname_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mysqlHostname_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * MySQL hostname.
     * </pre>
     *
     * <code>string mysql_hostname = 12;</code>
     */
    public com.google.protobuf.ByteString
        getMysqlHostnameBytes() {
      java.lang.Object ref = mysqlHostname_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mysqlHostname_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MYSQL_PORT_FIELD_NUMBER = 13;
    private int mysqlPort_;
    /**
     * <pre>
     * MySQL port. Use topoproto.MysqlPort and topoproto.SetMysqlPort
     * to access this variable. The functions provide support
     * for legacy behavior.
     * </pre>
     *
     * <code>int32 mysql_port = 13;</code>
     */
    public int getMysqlPort() {
      return mysqlPort_;
    }

    public static final int MASTER_TERM_START_TIME_FIELD_NUMBER = 14;
    private vttime.Vttime.Time masterTermStartTime_;
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the current tablet began as master. If this tablet is not currently the
     * master, this value is ignored.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 14;</code>
     */
    public boolean hasMasterTermStartTime() {
      return masterTermStartTime_ != null;
    }
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the current tablet began as master. If this tablet is not currently the
     * master, this value is ignored.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 14;</code>
     */
    public vttime.Vttime.Time getMasterTermStartTime() {
      return masterTermStartTime_ == null ? vttime.Vttime.Time.getDefaultInstance() : masterTermStartTime_;
    }
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the current tablet began as master. If this tablet is not currently the
     * master, this value is ignored.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 14;</code>
     */
    public vttime.Vttime.TimeOrBuilder getMasterTermStartTimeOrBuilder() {
      return getMasterTermStartTime();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (alias_ != null) {
        output.writeMessage(1, getAlias());
      }
      if (!getHostnameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, hostname_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetPortMap(),
          PortMapDefaultEntryHolder.defaultEntry,
          4);
      if (!getKeyspaceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, keyspace_);
      }
      if (!getShardBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, shard_);
      }
      if (keyRange_ != null) {
        output.writeMessage(7, getKeyRange());
      }
      if (type_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
        output.writeEnum(8, type_);
      }
      if (!getDbNameOverrideBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, dbNameOverride_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetTags(),
          TagsDefaultEntryHolder.defaultEntry,
          10);
      if (!getMysqlHostnameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, mysqlHostname_);
      }
      if (mysqlPort_ != 0) {
        output.writeInt32(13, mysqlPort_);
      }
      if (masterTermStartTime_ != null) {
        output.writeMessage(14, getMasterTermStartTime());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (alias_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getAlias());
      }
      if (!getHostnameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, hostname_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetPortMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        portMap__ = PortMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, portMap__);
      }
      if (!getKeyspaceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, keyspace_);
      }
      if (!getShardBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, shard_);
      }
      if (keyRange_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getKeyRange());
      }
      if (type_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, type_);
      }
      if (!getDbNameOverrideBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, dbNameOverride_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetTags().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        tags__ = TagsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, tags__);
      }
      if (!getMysqlHostnameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, mysqlHostname_);
      }
      if (mysqlPort_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, mysqlPort_);
      }
      if (masterTermStartTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getMasterTermStartTime());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.Tablet)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.Tablet other = (io.vitess.proto.Topodata.Tablet) obj;

      boolean result = true;
      result = result && (hasAlias() == other.hasAlias());
      if (hasAlias()) {
        result = result && getAlias()
            .equals(other.getAlias());
      }
      result = result && getHostname()
          .equals(other.getHostname());
      result = result && internalGetPortMap().equals(
          other.internalGetPortMap());
      result = result && getKeyspace()
          .equals(other.getKeyspace());
      result = result && getShard()
          .equals(other.getShard());
      result = result && (hasKeyRange() == other.hasKeyRange());
      if (hasKeyRange()) {
        result = result && getKeyRange()
            .equals(other.getKeyRange());
      }
      result = result && type_ == other.type_;
      result = result && getDbNameOverride()
          .equals(other.getDbNameOverride());
      result = result && internalGetTags().equals(
          other.internalGetTags());
      result = result && getMysqlHostname()
          .equals(other.getMysqlHostname());
      result = result && (getMysqlPort()
          == other.getMysqlPort());
      result = result && (hasMasterTermStartTime() == other.hasMasterTermStartTime());
      if (hasMasterTermStartTime()) {
        result = result && getMasterTermStartTime()
            .equals(other.getMasterTermStartTime());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAlias()) {
        hash = (37 * hash) + ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getAlias().hashCode();
      }
      hash = (37 * hash) + HOSTNAME_FIELD_NUMBER;
      hash = (53 * hash) + getHostname().hashCode();
      if (!internalGetPortMap().getMap().isEmpty()) {
        hash = (37 * hash) + PORT_MAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetPortMap().hashCode();
      }
      hash = (37 * hash) + KEYSPACE_FIELD_NUMBER;
      hash = (53 * hash) + getKeyspace().hashCode();
      hash = (37 * hash) + SHARD_FIELD_NUMBER;
      hash = (53 * hash) + getShard().hashCode();
      if (hasKeyRange()) {
        hash = (37 * hash) + KEY_RANGE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyRange().hashCode();
      }
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + DB_NAME_OVERRIDE_FIELD_NUMBER;
      hash = (53 * hash) + getDbNameOverride().hashCode();
      if (!internalGetTags().getMap().isEmpty()) {
        hash = (37 * hash) + TAGS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetTags().hashCode();
      }
      hash = (37 * hash) + MYSQL_HOSTNAME_FIELD_NUMBER;
      hash = (53 * hash) + getMysqlHostname().hashCode();
      hash = (37 * hash) + MYSQL_PORT_FIELD_NUMBER;
      hash = (53 * hash) + getMysqlPort();
      if (hasMasterTermStartTime()) {
        hash = (37 * hash) + MASTER_TERM_START_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getMasterTermStartTime().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.Tablet parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Tablet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Tablet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Tablet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.Tablet prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Tablet represents information about a running instance of vttablet.
     * </pre>
     *
     * Protobuf type {@code topodata.Tablet}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.Tablet)
        io.vitess.proto.Topodata.TabletOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_Tablet_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetPortMap();
          case 10:
            return internalGetTags();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutablePortMap();
          case 10:
            return internalGetMutableTags();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_Tablet_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.Tablet.class, io.vitess.proto.Topodata.Tablet.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.Tablet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (aliasBuilder_ == null) {
          alias_ = null;
        } else {
          alias_ = null;
          aliasBuilder_ = null;
        }
        hostname_ = "";

        internalGetMutablePortMap().clear();
        keyspace_ = "";

        shard_ = "";

        if (keyRangeBuilder_ == null) {
          keyRange_ = null;
        } else {
          keyRange_ = null;
          keyRangeBuilder_ = null;
        }
        type_ = 0;

        dbNameOverride_ = "";

        internalGetMutableTags().clear();
        mysqlHostname_ = "";

        mysqlPort_ = 0;

        if (masterTermStartTimeBuilder_ == null) {
          masterTermStartTime_ = null;
        } else {
          masterTermStartTime_ = null;
          masterTermStartTimeBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_Tablet_descriptor;
      }

      public io.vitess.proto.Topodata.Tablet getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.Tablet.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.Tablet build() {
        io.vitess.proto.Topodata.Tablet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.Tablet buildPartial() {
        io.vitess.proto.Topodata.Tablet result = new io.vitess.proto.Topodata.Tablet(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (aliasBuilder_ == null) {
          result.alias_ = alias_;
        } else {
          result.alias_ = aliasBuilder_.build();
        }
        result.hostname_ = hostname_;
        result.portMap_ = internalGetPortMap();
        result.portMap_.makeImmutable();
        result.keyspace_ = keyspace_;
        result.shard_ = shard_;
        if (keyRangeBuilder_ == null) {
          result.keyRange_ = keyRange_;
        } else {
          result.keyRange_ = keyRangeBuilder_.build();
        }
        result.type_ = type_;
        result.dbNameOverride_ = dbNameOverride_;
        result.tags_ = internalGetTags();
        result.tags_.makeImmutable();
        result.mysqlHostname_ = mysqlHostname_;
        result.mysqlPort_ = mysqlPort_;
        if (masterTermStartTimeBuilder_ == null) {
          result.masterTermStartTime_ = masterTermStartTime_;
        } else {
          result.masterTermStartTime_ = masterTermStartTimeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.Tablet) {
          return mergeFrom((io.vitess.proto.Topodata.Tablet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.Tablet other) {
        if (other == io.vitess.proto.Topodata.Tablet.getDefaultInstance()) return this;
        if (other.hasAlias()) {
          mergeAlias(other.getAlias());
        }
        if (!other.getHostname().isEmpty()) {
          hostname_ = other.hostname_;
          onChanged();
        }
        internalGetMutablePortMap().mergeFrom(
            other.internalGetPortMap());
        if (!other.getKeyspace().isEmpty()) {
          keyspace_ = other.keyspace_;
          onChanged();
        }
        if (!other.getShard().isEmpty()) {
          shard_ = other.shard_;
          onChanged();
        }
        if (other.hasKeyRange()) {
          mergeKeyRange(other.getKeyRange());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getDbNameOverride().isEmpty()) {
          dbNameOverride_ = other.dbNameOverride_;
          onChanged();
        }
        internalGetMutableTags().mergeFrom(
            other.internalGetTags());
        if (!other.getMysqlHostname().isEmpty()) {
          mysqlHostname_ = other.mysqlHostname_;
          onChanged();
        }
        if (other.getMysqlPort() != 0) {
          setMysqlPort(other.getMysqlPort());
        }
        if (other.hasMasterTermStartTime()) {
          mergeMasterTermStartTime(other.getMasterTermStartTime());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.Tablet parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.Tablet) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.vitess.proto.Topodata.TabletAlias alias_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder> aliasBuilder_;
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      public boolean hasAlias() {
        return aliasBuilder_ != null || alias_ != null;
      }
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletAlias getAlias() {
        if (aliasBuilder_ == null) {
          return alias_ == null ? io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : alias_;
        } else {
          return aliasBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      public Builder setAlias(io.vitess.proto.Topodata.TabletAlias value) {
        if (aliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          alias_ = value;
          onChanged();
        } else {
          aliasBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      public Builder setAlias(
          io.vitess.proto.Topodata.TabletAlias.Builder builderForValue) {
        if (aliasBuilder_ == null) {
          alias_ = builderForValue.build();
          onChanged();
        } else {
          aliasBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      public Builder mergeAlias(io.vitess.proto.Topodata.TabletAlias value) {
        if (aliasBuilder_ == null) {
          if (alias_ != null) {
            alias_ =
              io.vitess.proto.Topodata.TabletAlias.newBuilder(alias_).mergeFrom(value).buildPartial();
          } else {
            alias_ = value;
          }
          onChanged();
        } else {
          aliasBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      public Builder clearAlias() {
        if (aliasBuilder_ == null) {
          alias_ = null;
          onChanged();
        } else {
          alias_ = null;
          aliasBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletAlias.Builder getAliasBuilder() {
        
        onChanged();
        return getAliasFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletAliasOrBuilder getAliasOrBuilder() {
        if (aliasBuilder_ != null) {
          return aliasBuilder_.getMessageOrBuilder();
        } else {
          return alias_ == null ?
              io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : alias_;
        }
      }
      /**
       * <pre>
       * alias is the unique name of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletAlias alias = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder> 
          getAliasFieldBuilder() {
        if (aliasBuilder_ == null) {
          aliasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder>(
                  getAlias(),
                  getParentForChildren(),
                  isClean());
          alias_ = null;
        }
        return aliasBuilder_;
      }

      private java.lang.Object hostname_ = "";
      /**
       * <pre>
       * Fully qualified domain name of the host.
       * </pre>
       *
       * <code>string hostname = 2;</code>
       */
      public java.lang.String getHostname() {
        java.lang.Object ref = hostname_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          hostname_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Fully qualified domain name of the host.
       * </pre>
       *
       * <code>string hostname = 2;</code>
       */
      public com.google.protobuf.ByteString
          getHostnameBytes() {
        java.lang.Object ref = hostname_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          hostname_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Fully qualified domain name of the host.
       * </pre>
       *
       * <code>string hostname = 2;</code>
       */
      public Builder setHostname(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        hostname_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully qualified domain name of the host.
       * </pre>
       *
       * <code>string hostname = 2;</code>
       */
      public Builder clearHostname() {
        
        hostname_ = getDefaultInstance().getHostname();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully qualified domain name of the host.
       * </pre>
       *
       * <code>string hostname = 2;</code>
       */
      public Builder setHostnameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        hostname_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> portMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetPortMap() {
        if (portMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              PortMapDefaultEntryHolder.defaultEntry);
        }
        return portMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
      internalGetMutablePortMap() {
        onChanged();;
        if (portMap_ == null) {
          portMap_ = com.google.protobuf.MapField.newMapField(
              PortMapDefaultEntryHolder.defaultEntry);
        }
        if (!portMap_.isMutable()) {
          portMap_ = portMap_.copy();
        }
        return portMap_;
      }

      public int getPortMapCount() {
        return internalGetPortMap().getMap().size();
      }
      /**
       * <pre>
       * Map of named ports. Normally this should include vt and grpc.
       * Going forward, the mysql port will be stored in mysql_port
       * instead of here.
       * For accessing mysql port, use topoproto.MysqlPort to fetch, and
       * topoproto.SetMysqlPort to set. These wrappers will ensure
       * legacy behavior is supported.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; port_map = 4;</code>
       */

      public boolean containsPortMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetPortMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getPortMapMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getPortMap() {
        return getPortMapMap();
      }
      /**
       * <pre>
       * Map of named ports. Normally this should include vt and grpc.
       * Going forward, the mysql port will be stored in mysql_port
       * instead of here.
       * For accessing mysql port, use topoproto.MysqlPort to fetch, and
       * topoproto.SetMysqlPort to set. These wrappers will ensure
       * legacy behavior is supported.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; port_map = 4;</code>
       */

      public java.util.Map<java.lang.String, java.lang.Integer> getPortMapMap() {
        return internalGetPortMap().getMap();
      }
      /**
       * <pre>
       * Map of named ports. Normally this should include vt and grpc.
       * Going forward, the mysql port will be stored in mysql_port
       * instead of here.
       * For accessing mysql port, use topoproto.MysqlPort to fetch, and
       * topoproto.SetMysqlPort to set. These wrappers will ensure
       * legacy behavior is supported.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; port_map = 4;</code>
       */

      public int getPortMapOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetPortMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Map of named ports. Normally this should include vt and grpc.
       * Going forward, the mysql port will be stored in mysql_port
       * instead of here.
       * For accessing mysql port, use topoproto.MysqlPort to fetch, and
       * topoproto.SetMysqlPort to set. These wrappers will ensure
       * legacy behavior is supported.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; port_map = 4;</code>
       */

      public int getPortMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetPortMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearPortMap() {
        internalGetMutablePortMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Map of named ports. Normally this should include vt and grpc.
       * Going forward, the mysql port will be stored in mysql_port
       * instead of here.
       * For accessing mysql port, use topoproto.MysqlPort to fetch, and
       * topoproto.SetMysqlPort to set. These wrappers will ensure
       * legacy behavior is supported.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; port_map = 4;</code>
       */

      public Builder removePortMap(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutablePortMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
      getMutablePortMap() {
        return internalGetMutablePortMap().getMutableMap();
      }
      /**
       * <pre>
       * Map of named ports. Normally this should include vt and grpc.
       * Going forward, the mysql port will be stored in mysql_port
       * instead of here.
       * For accessing mysql port, use topoproto.MysqlPort to fetch, and
       * topoproto.SetMysqlPort to set. These wrappers will ensure
       * legacy behavior is supported.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; port_map = 4;</code>
       */
      public Builder putPortMap(
          java.lang.String key,
          int value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        internalGetMutablePortMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Map of named ports. Normally this should include vt and grpc.
       * Going forward, the mysql port will be stored in mysql_port
       * instead of here.
       * For accessing mysql port, use topoproto.MysqlPort to fetch, and
       * topoproto.SetMysqlPort to set. These wrappers will ensure
       * legacy behavior is supported.
       * </pre>
       *
       * <code>map&lt;string, int32&gt; port_map = 4;</code>
       */

      public Builder putAllPortMap(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutablePortMap().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.lang.Object keyspace_ = "";
      /**
       * <pre>
       * Keyspace name.
       * </pre>
       *
       * <code>string keyspace = 5;</code>
       */
      public java.lang.String getKeyspace() {
        java.lang.Object ref = keyspace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          keyspace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Keyspace name.
       * </pre>
       *
       * <code>string keyspace = 5;</code>
       */
      public com.google.protobuf.ByteString
          getKeyspaceBytes() {
        java.lang.Object ref = keyspace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          keyspace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Keyspace name.
       * </pre>
       *
       * <code>string keyspace = 5;</code>
       */
      public Builder setKeyspace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        keyspace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Keyspace name.
       * </pre>
       *
       * <code>string keyspace = 5;</code>
       */
      public Builder clearKeyspace() {
        
        keyspace_ = getDefaultInstance().getKeyspace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Keyspace name.
       * </pre>
       *
       * <code>string keyspace = 5;</code>
       */
      public Builder setKeyspaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        keyspace_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object shard_ = "";
      /**
       * <pre>
       * Shard name. If range based sharding is used, it should match
       * key_range.
       * </pre>
       *
       * <code>string shard = 6;</code>
       */
      public java.lang.String getShard() {
        java.lang.Object ref = shard_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          shard_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Shard name. If range based sharding is used, it should match
       * key_range.
       * </pre>
       *
       * <code>string shard = 6;</code>
       */
      public com.google.protobuf.ByteString
          getShardBytes() {
        java.lang.Object ref = shard_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shard_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Shard name. If range based sharding is used, it should match
       * key_range.
       * </pre>
       *
       * <code>string shard = 6;</code>
       */
      public Builder setShard(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        shard_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Shard name. If range based sharding is used, it should match
       * key_range.
       * </pre>
       *
       * <code>string shard = 6;</code>
       */
      public Builder clearShard() {
        
        shard_ = getDefaultInstance().getShard();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Shard name. If range based sharding is used, it should match
       * key_range.
       * </pre>
       *
       * <code>string shard = 6;</code>
       */
      public Builder setShardBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        shard_ = value;
        onChanged();
        return this;
      }

      private io.vitess.proto.Topodata.KeyRange keyRange_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> keyRangeBuilder_;
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      public boolean hasKeyRange() {
        return keyRangeBuilder_ != null || keyRange_ != null;
      }
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      public io.vitess.proto.Topodata.KeyRange getKeyRange() {
        if (keyRangeBuilder_ == null) {
          return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
        } else {
          return keyRangeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      public Builder setKeyRange(io.vitess.proto.Topodata.KeyRange value) {
        if (keyRangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyRange_ = value;
          onChanged();
        } else {
          keyRangeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      public Builder setKeyRange(
          io.vitess.proto.Topodata.KeyRange.Builder builderForValue) {
        if (keyRangeBuilder_ == null) {
          keyRange_ = builderForValue.build();
          onChanged();
        } else {
          keyRangeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      public Builder mergeKeyRange(io.vitess.proto.Topodata.KeyRange value) {
        if (keyRangeBuilder_ == null) {
          if (keyRange_ != null) {
            keyRange_ =
              io.vitess.proto.Topodata.KeyRange.newBuilder(keyRange_).mergeFrom(value).buildPartial();
          } else {
            keyRange_ = value;
          }
          onChanged();
        } else {
          keyRangeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      public Builder clearKeyRange() {
        if (keyRangeBuilder_ == null) {
          keyRange_ = null;
          onChanged();
        } else {
          keyRange_ = null;
          keyRangeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      public io.vitess.proto.Topodata.KeyRange.Builder getKeyRangeBuilder() {
        
        onChanged();
        return getKeyRangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
        if (keyRangeBuilder_ != null) {
          return keyRangeBuilder_.getMessageOrBuilder();
        } else {
          return keyRange_ == null ?
              io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
        }
      }
      /**
       * <pre>
       * If range based sharding is used, range for the tablet's shard.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> 
          getKeyRangeFieldBuilder() {
        if (keyRangeBuilder_ == null) {
          keyRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder>(
                  getKeyRange(),
                  getParentForChildren(),
                  isClean());
          keyRange_ = null;
        }
        return keyRangeBuilder_;
      }

      private int type_ = 0;
      /**
       * <pre>
       * type is the current type of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletType type = 8;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * type is the current type of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletType type = 8;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * type is the current type of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletType type = 8;</code>
       */
      public io.vitess.proto.Topodata.TabletType getType() {
        io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(type_);
        return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * type is the current type of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletType type = 8;</code>
       */
      public Builder setType(io.vitess.proto.Topodata.TabletType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * type is the current type of the tablet.
       * </pre>
       *
       * <code>.topodata.TabletType type = 8;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object dbNameOverride_ = "";
      /**
       * <pre>
       * It this is set, it is used as the database name instead of the
       * normal "vt_" + keyspace.
       * </pre>
       *
       * <code>string db_name_override = 9;</code>
       */
      public java.lang.String getDbNameOverride() {
        java.lang.Object ref = dbNameOverride_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          dbNameOverride_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * It this is set, it is used as the database name instead of the
       * normal "vt_" + keyspace.
       * </pre>
       *
       * <code>string db_name_override = 9;</code>
       */
      public com.google.protobuf.ByteString
          getDbNameOverrideBytes() {
        java.lang.Object ref = dbNameOverride_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          dbNameOverride_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * It this is set, it is used as the database name instead of the
       * normal "vt_" + keyspace.
       * </pre>
       *
       * <code>string db_name_override = 9;</code>
       */
      public Builder setDbNameOverride(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        dbNameOverride_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It this is set, it is used as the database name instead of the
       * normal "vt_" + keyspace.
       * </pre>
       *
       * <code>string db_name_override = 9;</code>
       */
      public Builder clearDbNameOverride() {
        
        dbNameOverride_ = getDefaultInstance().getDbNameOverride();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * It this is set, it is used as the database name instead of the
       * normal "vt_" + keyspace.
       * </pre>
       *
       * <code>string db_name_override = 9;</code>
       */
      public Builder setDbNameOverrideBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        dbNameOverride_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> tags_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetTags() {
        if (tags_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TagsDefaultEntryHolder.defaultEntry);
        }
        return tags_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableTags() {
        onChanged();;
        if (tags_ == null) {
          tags_ = com.google.protobuf.MapField.newMapField(
              TagsDefaultEntryHolder.defaultEntry);
        }
        if (!tags_.isMutable()) {
          tags_ = tags_.copy();
        }
        return tags_;
      }

      public int getTagsCount() {
        return internalGetTags().getMap().size();
      }
      /**
       * <pre>
       * tablet tags
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 10;</code>
       */

      public boolean containsTags(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetTags().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTagsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getTags() {
        return getTagsMap();
      }
      /**
       * <pre>
       * tablet tags
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 10;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getTagsMap() {
        return internalGetTags().getMap();
      }
      /**
       * <pre>
       * tablet tags
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 10;</code>
       */

      public java.lang.String getTagsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetTags().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * tablet tags
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 10;</code>
       */

      public java.lang.String getTagsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetTags().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearTags() {
        internalGetMutableTags().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * tablet tags
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 10;</code>
       */

      public Builder removeTags(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableTags().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableTags() {
        return internalGetMutableTags().getMutableMap();
      }
      /**
       * <pre>
       * tablet tags
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 10;</code>
       */
      public Builder putTags(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableTags().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * tablet tags
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 10;</code>
       */

      public Builder putAllTags(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableTags().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.lang.Object mysqlHostname_ = "";
      /**
       * <pre>
       * MySQL hostname.
       * </pre>
       *
       * <code>string mysql_hostname = 12;</code>
       */
      public java.lang.String getMysqlHostname() {
        java.lang.Object ref = mysqlHostname_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mysqlHostname_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * MySQL hostname.
       * </pre>
       *
       * <code>string mysql_hostname = 12;</code>
       */
      public com.google.protobuf.ByteString
          getMysqlHostnameBytes() {
        java.lang.Object ref = mysqlHostname_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mysqlHostname_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * MySQL hostname.
       * </pre>
       *
       * <code>string mysql_hostname = 12;</code>
       */
      public Builder setMysqlHostname(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mysqlHostname_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * MySQL hostname.
       * </pre>
       *
       * <code>string mysql_hostname = 12;</code>
       */
      public Builder clearMysqlHostname() {
        
        mysqlHostname_ = getDefaultInstance().getMysqlHostname();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * MySQL hostname.
       * </pre>
       *
       * <code>string mysql_hostname = 12;</code>
       */
      public Builder setMysqlHostnameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mysqlHostname_ = value;
        onChanged();
        return this;
      }

      private int mysqlPort_ ;
      /**
       * <pre>
       * MySQL port. Use topoproto.MysqlPort and topoproto.SetMysqlPort
       * to access this variable. The functions provide support
       * for legacy behavior.
       * </pre>
       *
       * <code>int32 mysql_port = 13;</code>
       */
      public int getMysqlPort() {
        return mysqlPort_;
      }
      /**
       * <pre>
       * MySQL port. Use topoproto.MysqlPort and topoproto.SetMysqlPort
       * to access this variable. The functions provide support
       * for legacy behavior.
       * </pre>
       *
       * <code>int32 mysql_port = 13;</code>
       */
      public Builder setMysqlPort(int value) {
        
        mysqlPort_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * MySQL port. Use topoproto.MysqlPort and topoproto.SetMysqlPort
       * to access this variable. The functions provide support
       * for legacy behavior.
       * </pre>
       *
       * <code>int32 mysql_port = 13;</code>
       */
      public Builder clearMysqlPort() {
        
        mysqlPort_ = 0;
        onChanged();
        return this;
      }

      private vttime.Vttime.Time masterTermStartTime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder> masterTermStartTimeBuilder_;
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      public boolean hasMasterTermStartTime() {
        return masterTermStartTimeBuilder_ != null || masterTermStartTime_ != null;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      public vttime.Vttime.Time getMasterTermStartTime() {
        if (masterTermStartTimeBuilder_ == null) {
          return masterTermStartTime_ == null ? vttime.Vttime.Time.getDefaultInstance() : masterTermStartTime_;
        } else {
          return masterTermStartTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      public Builder setMasterTermStartTime(vttime.Vttime.Time value) {
        if (masterTermStartTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          masterTermStartTime_ = value;
          onChanged();
        } else {
          masterTermStartTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      public Builder setMasterTermStartTime(
          vttime.Vttime.Time.Builder builderForValue) {
        if (masterTermStartTimeBuilder_ == null) {
          masterTermStartTime_ = builderForValue.build();
          onChanged();
        } else {
          masterTermStartTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      public Builder mergeMasterTermStartTime(vttime.Vttime.Time value) {
        if (masterTermStartTimeBuilder_ == null) {
          if (masterTermStartTime_ != null) {
            masterTermStartTime_ =
              vttime.Vttime.Time.newBuilder(masterTermStartTime_).mergeFrom(value).buildPartial();
          } else {
            masterTermStartTime_ = value;
          }
          onChanged();
        } else {
          masterTermStartTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      public Builder clearMasterTermStartTime() {
        if (masterTermStartTimeBuilder_ == null) {
          masterTermStartTime_ = null;
          onChanged();
        } else {
          masterTermStartTime_ = null;
          masterTermStartTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      public vttime.Vttime.Time.Builder getMasterTermStartTimeBuilder() {
        
        onChanged();
        return getMasterTermStartTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      public vttime.Vttime.TimeOrBuilder getMasterTermStartTimeOrBuilder() {
        if (masterTermStartTimeBuilder_ != null) {
          return masterTermStartTimeBuilder_.getMessageOrBuilder();
        } else {
          return masterTermStartTime_ == null ?
              vttime.Vttime.Time.getDefaultInstance() : masterTermStartTime_;
        }
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the current tablet began as master. If this tablet is not currently the
       * master, this value is ignored.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder> 
          getMasterTermStartTimeFieldBuilder() {
        if (masterTermStartTimeBuilder_ == null) {
          masterTermStartTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder>(
                  getMasterTermStartTime(),
                  getParentForChildren(),
                  isClean());
          masterTermStartTime_ = null;
        }
        return masterTermStartTimeBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.Tablet)
    }

    // @@protoc_insertion_point(class_scope:topodata.Tablet)
    private static final io.vitess.proto.Topodata.Tablet DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.Tablet();
    }

    public static io.vitess.proto.Topodata.Tablet getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Tablet>
        PARSER = new com.google.protobuf.AbstractParser<Tablet>() {
      public Tablet parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Tablet(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Tablet> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Tablet> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.Tablet getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ShardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.Shard)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * master_alias is the tablet alias of the master for the shard.
     * If it is unset, then there is no master in this shard yet.
     * No lock is necessary to update this field, when for instance
     * TabletExternallyReparented updates this. However, we lock the
     * shard for reparenting operations (InitShardMaster,
     * PlannedReparentShard,EmergencyReparentShard), to guarantee
     * exclusive operation.
     * </pre>
     *
     * <code>.topodata.TabletAlias master_alias = 1;</code>
     */
    boolean hasMasterAlias();
    /**
     * <pre>
     * master_alias is the tablet alias of the master for the shard.
     * If it is unset, then there is no master in this shard yet.
     * No lock is necessary to update this field, when for instance
     * TabletExternallyReparented updates this. However, we lock the
     * shard for reparenting operations (InitShardMaster,
     * PlannedReparentShard,EmergencyReparentShard), to guarantee
     * exclusive operation.
     * </pre>
     *
     * <code>.topodata.TabletAlias master_alias = 1;</code>
     */
    io.vitess.proto.Topodata.TabletAlias getMasterAlias();
    /**
     * <pre>
     * master_alias is the tablet alias of the master for the shard.
     * If it is unset, then there is no master in this shard yet.
     * No lock is necessary to update this field, when for instance
     * TabletExternallyReparented updates this. However, we lock the
     * shard for reparenting operations (InitShardMaster,
     * PlannedReparentShard,EmergencyReparentShard), to guarantee
     * exclusive operation.
     * </pre>
     *
     * <code>.topodata.TabletAlias master_alias = 1;</code>
     */
    io.vitess.proto.Topodata.TabletAliasOrBuilder getMasterAliasOrBuilder();

    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the master specified in master_alias began.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * The master_alias should only ever be changed if the new master's term began
     * at a later time than this. Note that a new term can start for the tablet
     * that is already the master. In that case, the master_term_start_time would
     * be increased without changing the master_alias.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 8;</code>
     */
    boolean hasMasterTermStartTime();
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the master specified in master_alias began.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * The master_alias should only ever be changed if the new master's term began
     * at a later time than this. Note that a new term can start for the tablet
     * that is already the master. In that case, the master_term_start_time would
     * be increased without changing the master_alias.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 8;</code>
     */
    vttime.Vttime.Time getMasterTermStartTime();
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the master specified in master_alias began.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * The master_alias should only ever be changed if the new master's term began
     * at a later time than this. Note that a new term can start for the tablet
     * that is already the master. In that case, the master_term_start_time would
     * be increased without changing the master_alias.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 8;</code>
     */
    vttime.Vttime.TimeOrBuilder getMasterTermStartTimeOrBuilder();

    /**
     * <pre>
     * key_range is the KeyRange for this shard. It can be unset if:
     * - we are not using range-based sharding in this shard.
     * - the shard covers the entire keyrange.
     * This must match the shard name based on our other conventions, but
     * helpful to have it decomposed here.
     * Once set at creation time, it is never changed.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    boolean hasKeyRange();
    /**
     * <pre>
     * key_range is the KeyRange for this shard. It can be unset if:
     * - we are not using range-based sharding in this shard.
     * - the shard covers the entire keyrange.
     * This must match the shard name based on our other conventions, but
     * helpful to have it decomposed here.
     * Once set at creation time, it is never changed.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    io.vitess.proto.Topodata.KeyRange getKeyRange();
    /**
     * <pre>
     * key_range is the KeyRange for this shard. It can be unset if:
     * - we are not using range-based sharding in this shard.
     * - the shard covers the entire keyrange.
     * This must match the shard name based on our other conventions, but
     * helpful to have it decomposed here.
     * Once set at creation time, it is never changed.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder();

    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    java.util.List<io.vitess.proto.Topodata.Shard.ServedType> 
        getServedTypesList();
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    io.vitess.proto.Topodata.Shard.ServedType getServedTypes(int index);
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    int getServedTypesCount();
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    java.util.List<? extends io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder> 
        getServedTypesOrBuilderList();
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder getServedTypesOrBuilder(
        int index);

    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    java.util.List<io.vitess.proto.Topodata.Shard.SourceShard> 
        getSourceShardsList();
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    io.vitess.proto.Topodata.Shard.SourceShard getSourceShards(int index);
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    int getSourceShardsCount();
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    java.util.List<? extends io.vitess.proto.Topodata.Shard.SourceShardOrBuilder> 
        getSourceShardsOrBuilderList();
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    io.vitess.proto.Topodata.Shard.SourceShardOrBuilder getSourceShardsOrBuilder(
        int index);

    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    java.util.List<io.vitess.proto.Topodata.Shard.TabletControl> 
        getTabletControlsList();
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    io.vitess.proto.Topodata.Shard.TabletControl getTabletControls(int index);
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    int getTabletControlsCount();
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    java.util.List<? extends io.vitess.proto.Topodata.Shard.TabletControlOrBuilder> 
        getTabletControlsOrBuilderList();
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    io.vitess.proto.Topodata.Shard.TabletControlOrBuilder getTabletControlsOrBuilder(
        int index);

    /**
     * <pre>
     * is_master_serving sets whether this shard master is serving traffic or not.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>bool is_master_serving = 7;</code>
     */
    boolean getIsMasterServing();
  }
  /**
   * <pre>
   * A Shard contains data about a subset of the data whithin a keyspace.
   * </pre>
   *
   * Protobuf type {@code topodata.Shard}
   */
  public  static final class Shard extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.Shard)
      ShardOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Shard.newBuilder() to construct.
    private Shard(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Shard() {
      servedTypes_ = java.util.Collections.emptyList();
      sourceShards_ = java.util.Collections.emptyList();
      tabletControls_ = java.util.Collections.emptyList();
      isMasterServing_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Shard(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.vitess.proto.Topodata.TabletAlias.Builder subBuilder = null;
              if (masterAlias_ != null) {
                subBuilder = masterAlias_.toBuilder();
              }
              masterAlias_ = input.readMessage(io.vitess.proto.Topodata.TabletAlias.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(masterAlias_);
                masterAlias_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.vitess.proto.Topodata.KeyRange.Builder subBuilder = null;
              if (keyRange_ != null) {
                subBuilder = keyRange_.toBuilder();
              }
              keyRange_ = input.readMessage(io.vitess.proto.Topodata.KeyRange.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keyRange_);
                keyRange_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                servedTypes_ = new java.util.ArrayList<io.vitess.proto.Topodata.Shard.ServedType>();
                mutable_bitField0_ |= 0x00000008;
              }
              servedTypes_.add(
                  input.readMessage(io.vitess.proto.Topodata.Shard.ServedType.parser(), extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                sourceShards_ = new java.util.ArrayList<io.vitess.proto.Topodata.Shard.SourceShard>();
                mutable_bitField0_ |= 0x00000010;
              }
              sourceShards_.add(
                  input.readMessage(io.vitess.proto.Topodata.Shard.SourceShard.parser(), extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                tabletControls_ = new java.util.ArrayList<io.vitess.proto.Topodata.Shard.TabletControl>();
                mutable_bitField0_ |= 0x00000020;
              }
              tabletControls_.add(
                  input.readMessage(io.vitess.proto.Topodata.Shard.TabletControl.parser(), extensionRegistry));
              break;
            }
            case 56: {

              isMasterServing_ = input.readBool();
              break;
            }
            case 66: {
              vttime.Vttime.Time.Builder subBuilder = null;
              if (masterTermStartTime_ != null) {
                subBuilder = masterTermStartTime_.toBuilder();
              }
              masterTermStartTime_ = input.readMessage(vttime.Vttime.Time.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(masterTermStartTime_);
                masterTermStartTime_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          servedTypes_ = java.util.Collections.unmodifiableList(servedTypes_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          sourceShards_ = java.util.Collections.unmodifiableList(sourceShards_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          tabletControls_ = java.util.Collections.unmodifiableList(tabletControls_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_Shard_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_Shard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.Shard.class, io.vitess.proto.Topodata.Shard.Builder.class);
    }

    public interface ServedTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:topodata.Shard.ServedType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      int getTabletTypeValue();
      /**
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      io.vitess.proto.Topodata.TabletType getTabletType();

      /**
       * <code>repeated string cells = 2;</code>
       */
      java.util.List<java.lang.String>
          getCellsList();
      /**
       * <code>repeated string cells = 2;</code>
       */
      int getCellsCount();
      /**
       * <code>repeated string cells = 2;</code>
       */
      java.lang.String getCells(int index);
      /**
       * <code>repeated string cells = 2;</code>
       */
      com.google.protobuf.ByteString
          getCellsBytes(int index);
    }
    /**
     * <pre>
     * ServedType is an entry in the served_types
     * </pre>
     *
     * Protobuf type {@code topodata.Shard.ServedType}
     */
    public  static final class ServedType extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:topodata.Shard.ServedType)
        ServedTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ServedType.newBuilder() to construct.
      private ServedType(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ServedType() {
        tabletType_ = 0;
        cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ServedType(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();

                tabletType_ = rawValue;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  cells_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000002;
                }
                cells_.add(s);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = cells_.getUnmodifiableView();
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_ServedType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_ServedType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.Shard.ServedType.class, io.vitess.proto.Topodata.Shard.ServedType.Builder.class);
      }

      private int bitField0_;
      public static final int TABLET_TYPE_FIELD_NUMBER = 1;
      private int tabletType_;
      /**
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      public int getTabletTypeValue() {
        return tabletType_;
      }
      /**
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletType getTabletType() {
        io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(tabletType_);
        return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
      }

      public static final int CELLS_FIELD_NUMBER = 2;
      private com.google.protobuf.LazyStringList cells_;
      /**
       * <code>repeated string cells = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCellsList() {
        return cells_;
      }
      /**
       * <code>repeated string cells = 2;</code>
       */
      public int getCellsCount() {
        return cells_.size();
      }
      /**
       * <code>repeated string cells = 2;</code>
       */
      public java.lang.String getCells(int index) {
        return cells_.get(index);
      }
      /**
       * <code>repeated string cells = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCellsBytes(int index) {
        return cells_.getByteString(index);
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (tabletType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          output.writeEnum(1, tabletType_);
        }
        for (int i = 0; i < cells_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, cells_.getRaw(i));
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (tabletType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, tabletType_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < cells_.size(); i++) {
            dataSize += computeStringSizeNoTag(cells_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getCellsList().size();
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.vitess.proto.Topodata.Shard.ServedType)) {
          return super.equals(obj);
        }
        io.vitess.proto.Topodata.Shard.ServedType other = (io.vitess.proto.Topodata.Shard.ServedType) obj;

        boolean result = true;
        result = result && tabletType_ == other.tabletType_;
        result = result && getCellsList()
            .equals(other.getCellsList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TABLET_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + tabletType_;
        if (getCellsCount() > 0) {
          hash = (37 * hash) + CELLS_FIELD_NUMBER;
          hash = (53 * hash) + getCellsList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.ServedType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.vitess.proto.Topodata.Shard.ServedType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * ServedType is an entry in the served_types
       * </pre>
       *
       * Protobuf type {@code topodata.Shard.ServedType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:topodata.Shard.ServedType)
          io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_ServedType_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_ServedType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.vitess.proto.Topodata.Shard.ServedType.class, io.vitess.proto.Topodata.Shard.ServedType.Builder.class);
        }

        // Construct using io.vitess.proto.Topodata.Shard.ServedType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          tabletType_ = 0;

          cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_ServedType_descriptor;
        }

        public io.vitess.proto.Topodata.Shard.ServedType getDefaultInstanceForType() {
          return io.vitess.proto.Topodata.Shard.ServedType.getDefaultInstance();
        }

        public io.vitess.proto.Topodata.Shard.ServedType build() {
          io.vitess.proto.Topodata.Shard.ServedType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.vitess.proto.Topodata.Shard.ServedType buildPartial() {
          io.vitess.proto.Topodata.Shard.ServedType result = new io.vitess.proto.Topodata.Shard.ServedType(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.tabletType_ = tabletType_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = cells_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cells_ = cells_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.vitess.proto.Topodata.Shard.ServedType) {
            return mergeFrom((io.vitess.proto.Topodata.Shard.ServedType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.vitess.proto.Topodata.Shard.ServedType other) {
          if (other == io.vitess.proto.Topodata.Shard.ServedType.getDefaultInstance()) return this;
          if (other.tabletType_ != 0) {
            setTabletTypeValue(other.getTabletTypeValue());
          }
          if (!other.cells_.isEmpty()) {
            if (cells_.isEmpty()) {
              cells_ = other.cells_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCellsIsMutable();
              cells_.addAll(other.cells_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.vitess.proto.Topodata.Shard.ServedType parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.vitess.proto.Topodata.Shard.ServedType) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int tabletType_ = 0;
        /**
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public int getTabletTypeValue() {
          return tabletType_;
        }
        /**
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder setTabletTypeValue(int value) {
          tabletType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public io.vitess.proto.Topodata.TabletType getTabletType() {
          io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(tabletType_);
          return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
        }
        /**
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder setTabletType(io.vitess.proto.Topodata.TabletType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          tabletType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder clearTabletType() {
          
          tabletType_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringList cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureCellsIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = new com.google.protobuf.LazyStringArrayList(cells_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getCellsList() {
          return cells_.getUnmodifiableView();
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public int getCellsCount() {
          return cells_.size();
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public java.lang.String getCells(int index) {
          return cells_.get(index);
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public com.google.protobuf.ByteString
            getCellsBytes(int index) {
          return cells_.getByteString(index);
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder setCells(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureCellsIsMutable();
          cells_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder addCells(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureCellsIsMutable();
          cells_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder addAllCells(
            java.lang.Iterable<java.lang.String> values) {
          ensureCellsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cells_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder clearCells() {
          cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder addCellsBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureCellsIsMutable();
          cells_.add(value);
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:topodata.Shard.ServedType)
      }

      // @@protoc_insertion_point(class_scope:topodata.Shard.ServedType)
      private static final io.vitess.proto.Topodata.Shard.ServedType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.vitess.proto.Topodata.Shard.ServedType();
      }

      public static io.vitess.proto.Topodata.Shard.ServedType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ServedType>
          PARSER = new com.google.protobuf.AbstractParser<ServedType>() {
        public ServedType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ServedType(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ServedType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ServedType> getParserForType() {
        return PARSER;
      }

      public io.vitess.proto.Topodata.Shard.ServedType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface SourceShardOrBuilder extends
        // @@protoc_insertion_point(interface_extends:topodata.Shard.SourceShard)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Uid is the unique ID for this SourceShard object.
       * </pre>
       *
       * <code>uint32 uid = 1;</code>
       */
      int getUid();

      /**
       * <pre>
       * the source keyspace
       * </pre>
       *
       * <code>string keyspace = 2;</code>
       */
      java.lang.String getKeyspace();
      /**
       * <pre>
       * the source keyspace
       * </pre>
       *
       * <code>string keyspace = 2;</code>
       */
      com.google.protobuf.ByteString
          getKeyspaceBytes();

      /**
       * <pre>
       * the source shard
       * </pre>
       *
       * <code>string shard = 3;</code>
       */
      java.lang.String getShard();
      /**
       * <pre>
       * the source shard
       * </pre>
       *
       * <code>string shard = 3;</code>
       */
      com.google.protobuf.ByteString
          getShardBytes();

      /**
       * <pre>
       * the source shard keyrange
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 4;</code>
       */
      boolean hasKeyRange();
      /**
       * <pre>
       * the source shard keyrange
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 4;</code>
       */
      io.vitess.proto.Topodata.KeyRange getKeyRange();
      /**
       * <pre>
       * the source shard keyrange
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 4;</code>
       */
      io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder();

      /**
       * <pre>
       * the source table list to replicate
       * </pre>
       *
       * <code>repeated string tables = 5;</code>
       */
      java.util.List<java.lang.String>
          getTablesList();
      /**
       * <pre>
       * the source table list to replicate
       * </pre>
       *
       * <code>repeated string tables = 5;</code>
       */
      int getTablesCount();
      /**
       * <pre>
       * the source table list to replicate
       * </pre>
       *
       * <code>repeated string tables = 5;</code>
       */
      java.lang.String getTables(int index);
      /**
       * <pre>
       * the source table list to replicate
       * </pre>
       *
       * <code>repeated string tables = 5;</code>
       */
      com.google.protobuf.ByteString
          getTablesBytes(int index);
    }
    /**
     * <pre>
     * SourceShard represents a data source for filtered replication
     * across shards. When this is used in a destination shard, the master
     * of that shard will run filtered replication.
     * </pre>
     *
     * Protobuf type {@code topodata.Shard.SourceShard}
     */
    public  static final class SourceShard extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:topodata.Shard.SourceShard)
        SourceShardOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use SourceShard.newBuilder() to construct.
      private SourceShard(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private SourceShard() {
        uid_ = 0;
        keyspace_ = "";
        shard_ = "";
        tables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private SourceShard(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                uid_ = input.readUInt32();
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                keyspace_ = s;
                break;
              }
              case 26: {
                java.lang.String s = input.readStringRequireUtf8();

                shard_ = s;
                break;
              }
              case 34: {
                io.vitess.proto.Topodata.KeyRange.Builder subBuilder = null;
                if (keyRange_ != null) {
                  subBuilder = keyRange_.toBuilder();
                }
                keyRange_ = input.readMessage(io.vitess.proto.Topodata.KeyRange.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(keyRange_);
                  keyRange_ = subBuilder.buildPartial();
                }

                break;
              }
              case 42: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  tables_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000010;
                }
                tables_.add(s);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            tables_ = tables_.getUnmodifiableView();
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_SourceShard_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_SourceShard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.Shard.SourceShard.class, io.vitess.proto.Topodata.Shard.SourceShard.Builder.class);
      }

      private int bitField0_;
      public static final int UID_FIELD_NUMBER = 1;
      private int uid_;
      /**
       * <pre>
       * Uid is the unique ID for this SourceShard object.
       * </pre>
       *
       * <code>uint32 uid = 1;</code>
       */
      public int getUid() {
        return uid_;
      }

      public static final int KEYSPACE_FIELD_NUMBER = 2;
      private volatile java.lang.Object keyspace_;
      /**
       * <pre>
       * the source keyspace
       * </pre>
       *
       * <code>string keyspace = 2;</code>
       */
      public java.lang.String getKeyspace() {
        java.lang.Object ref = keyspace_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          keyspace_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * the source keyspace
       * </pre>
       *
       * <code>string keyspace = 2;</code>
       */
      public com.google.protobuf.ByteString
          getKeyspaceBytes() {
        java.lang.Object ref = keyspace_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          keyspace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SHARD_FIELD_NUMBER = 3;
      private volatile java.lang.Object shard_;
      /**
       * <pre>
       * the source shard
       * </pre>
       *
       * <code>string shard = 3;</code>
       */
      public java.lang.String getShard() {
        java.lang.Object ref = shard_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          shard_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * the source shard
       * </pre>
       *
       * <code>string shard = 3;</code>
       */
      public com.google.protobuf.ByteString
          getShardBytes() {
        java.lang.Object ref = shard_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shard_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int KEY_RANGE_FIELD_NUMBER = 4;
      private io.vitess.proto.Topodata.KeyRange keyRange_;
      /**
       * <pre>
       * the source shard keyrange
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 4;</code>
       */
      public boolean hasKeyRange() {
        return keyRange_ != null;
      }
      /**
       * <pre>
       * the source shard keyrange
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 4;</code>
       */
      public io.vitess.proto.Topodata.KeyRange getKeyRange() {
        return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
      }
      /**
       * <pre>
       * the source shard keyrange
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 4;</code>
       */
      public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
        return getKeyRange();
      }

      public static final int TABLES_FIELD_NUMBER = 5;
      private com.google.protobuf.LazyStringList tables_;
      /**
       * <pre>
       * the source table list to replicate
       * </pre>
       *
       * <code>repeated string tables = 5;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getTablesList() {
        return tables_;
      }
      /**
       * <pre>
       * the source table list to replicate
       * </pre>
       *
       * <code>repeated string tables = 5;</code>
       */
      public int getTablesCount() {
        return tables_.size();
      }
      /**
       * <pre>
       * the source table list to replicate
       * </pre>
       *
       * <code>repeated string tables = 5;</code>
       */
      public java.lang.String getTables(int index) {
        return tables_.get(index);
      }
      /**
       * <pre>
       * the source table list to replicate
       * </pre>
       *
       * <code>repeated string tables = 5;</code>
       */
      public com.google.protobuf.ByteString
          getTablesBytes(int index) {
        return tables_.getByteString(index);
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (uid_ != 0) {
          output.writeUInt32(1, uid_);
        }
        if (!getKeyspaceBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, keyspace_);
        }
        if (!getShardBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, shard_);
        }
        if (keyRange_ != null) {
          output.writeMessage(4, getKeyRange());
        }
        for (int i = 0; i < tables_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 5, tables_.getRaw(i));
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (uid_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, uid_);
        }
        if (!getKeyspaceBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, keyspace_);
        }
        if (!getShardBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, shard_);
        }
        if (keyRange_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getKeyRange());
        }
        {
          int dataSize = 0;
          for (int i = 0; i < tables_.size(); i++) {
            dataSize += computeStringSizeNoTag(tables_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getTablesList().size();
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.vitess.proto.Topodata.Shard.SourceShard)) {
          return super.equals(obj);
        }
        io.vitess.proto.Topodata.Shard.SourceShard other = (io.vitess.proto.Topodata.Shard.SourceShard) obj;

        boolean result = true;
        result = result && (getUid()
            == other.getUid());
        result = result && getKeyspace()
            .equals(other.getKeyspace());
        result = result && getShard()
            .equals(other.getShard());
        result = result && (hasKeyRange() == other.hasKeyRange());
        if (hasKeyRange()) {
          result = result && getKeyRange()
              .equals(other.getKeyRange());
        }
        result = result && getTablesList()
            .equals(other.getTablesList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + UID_FIELD_NUMBER;
        hash = (53 * hash) + getUid();
        hash = (37 * hash) + KEYSPACE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyspace().hashCode();
        hash = (37 * hash) + SHARD_FIELD_NUMBER;
        hash = (53 * hash) + getShard().hashCode();
        if (hasKeyRange()) {
          hash = (37 * hash) + KEY_RANGE_FIELD_NUMBER;
          hash = (53 * hash) + getKeyRange().hashCode();
        }
        if (getTablesCount() > 0) {
          hash = (37 * hash) + TABLES_FIELD_NUMBER;
          hash = (53 * hash) + getTablesList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.SourceShard parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.vitess.proto.Topodata.Shard.SourceShard prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * SourceShard represents a data source for filtered replication
       * across shards. When this is used in a destination shard, the master
       * of that shard will run filtered replication.
       * </pre>
       *
       * Protobuf type {@code topodata.Shard.SourceShard}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:topodata.Shard.SourceShard)
          io.vitess.proto.Topodata.Shard.SourceShardOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_SourceShard_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_SourceShard_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.vitess.proto.Topodata.Shard.SourceShard.class, io.vitess.proto.Topodata.Shard.SourceShard.Builder.class);
        }

        // Construct using io.vitess.proto.Topodata.Shard.SourceShard.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          uid_ = 0;

          keyspace_ = "";

          shard_ = "";

          if (keyRangeBuilder_ == null) {
            keyRange_ = null;
          } else {
            keyRange_ = null;
            keyRangeBuilder_ = null;
          }
          tables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_SourceShard_descriptor;
        }

        public io.vitess.proto.Topodata.Shard.SourceShard getDefaultInstanceForType() {
          return io.vitess.proto.Topodata.Shard.SourceShard.getDefaultInstance();
        }

        public io.vitess.proto.Topodata.Shard.SourceShard build() {
          io.vitess.proto.Topodata.Shard.SourceShard result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.vitess.proto.Topodata.Shard.SourceShard buildPartial() {
          io.vitess.proto.Topodata.Shard.SourceShard result = new io.vitess.proto.Topodata.Shard.SourceShard(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.uid_ = uid_;
          result.keyspace_ = keyspace_;
          result.shard_ = shard_;
          if (keyRangeBuilder_ == null) {
            result.keyRange_ = keyRange_;
          } else {
            result.keyRange_ = keyRangeBuilder_.build();
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            tables_ = tables_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.tables_ = tables_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.vitess.proto.Topodata.Shard.SourceShard) {
            return mergeFrom((io.vitess.proto.Topodata.Shard.SourceShard)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.vitess.proto.Topodata.Shard.SourceShard other) {
          if (other == io.vitess.proto.Topodata.Shard.SourceShard.getDefaultInstance()) return this;
          if (other.getUid() != 0) {
            setUid(other.getUid());
          }
          if (!other.getKeyspace().isEmpty()) {
            keyspace_ = other.keyspace_;
            onChanged();
          }
          if (!other.getShard().isEmpty()) {
            shard_ = other.shard_;
            onChanged();
          }
          if (other.hasKeyRange()) {
            mergeKeyRange(other.getKeyRange());
          }
          if (!other.tables_.isEmpty()) {
            if (tables_.isEmpty()) {
              tables_ = other.tables_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureTablesIsMutable();
              tables_.addAll(other.tables_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.vitess.proto.Topodata.Shard.SourceShard parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.vitess.proto.Topodata.Shard.SourceShard) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int uid_ ;
        /**
         * <pre>
         * Uid is the unique ID for this SourceShard object.
         * </pre>
         *
         * <code>uint32 uid = 1;</code>
         */
        public int getUid() {
          return uid_;
        }
        /**
         * <pre>
         * Uid is the unique ID for this SourceShard object.
         * </pre>
         *
         * <code>uint32 uid = 1;</code>
         */
        public Builder setUid(int value) {
          
          uid_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Uid is the unique ID for this SourceShard object.
         * </pre>
         *
         * <code>uint32 uid = 1;</code>
         */
        public Builder clearUid() {
          
          uid_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object keyspace_ = "";
        /**
         * <pre>
         * the source keyspace
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public java.lang.String getKeyspace() {
          java.lang.Object ref = keyspace_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            keyspace_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * the source keyspace
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public com.google.protobuf.ByteString
            getKeyspaceBytes() {
          java.lang.Object ref = keyspace_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            keyspace_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * the source keyspace
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public Builder setKeyspace(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          keyspace_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the source keyspace
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public Builder clearKeyspace() {
          
          keyspace_ = getDefaultInstance().getKeyspace();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the source keyspace
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public Builder setKeyspaceBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          keyspace_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object shard_ = "";
        /**
         * <pre>
         * the source shard
         * </pre>
         *
         * <code>string shard = 3;</code>
         */
        public java.lang.String getShard() {
          java.lang.Object ref = shard_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            shard_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * the source shard
         * </pre>
         *
         * <code>string shard = 3;</code>
         */
        public com.google.protobuf.ByteString
            getShardBytes() {
          java.lang.Object ref = shard_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            shard_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * the source shard
         * </pre>
         *
         * <code>string shard = 3;</code>
         */
        public Builder setShard(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          shard_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the source shard
         * </pre>
         *
         * <code>string shard = 3;</code>
         */
        public Builder clearShard() {
          
          shard_ = getDefaultInstance().getShard();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the source shard
         * </pre>
         *
         * <code>string shard = 3;</code>
         */
        public Builder setShardBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          shard_ = value;
          onChanged();
          return this;
        }

        private io.vitess.proto.Topodata.KeyRange keyRange_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> keyRangeBuilder_;
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        public boolean hasKeyRange() {
          return keyRangeBuilder_ != null || keyRange_ != null;
        }
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        public io.vitess.proto.Topodata.KeyRange getKeyRange() {
          if (keyRangeBuilder_ == null) {
            return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
          } else {
            return keyRangeBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        public Builder setKeyRange(io.vitess.proto.Topodata.KeyRange value) {
          if (keyRangeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            keyRange_ = value;
            onChanged();
          } else {
            keyRangeBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        public Builder setKeyRange(
            io.vitess.proto.Topodata.KeyRange.Builder builderForValue) {
          if (keyRangeBuilder_ == null) {
            keyRange_ = builderForValue.build();
            onChanged();
          } else {
            keyRangeBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        public Builder mergeKeyRange(io.vitess.proto.Topodata.KeyRange value) {
          if (keyRangeBuilder_ == null) {
            if (keyRange_ != null) {
              keyRange_ =
                io.vitess.proto.Topodata.KeyRange.newBuilder(keyRange_).mergeFrom(value).buildPartial();
            } else {
              keyRange_ = value;
            }
            onChanged();
          } else {
            keyRangeBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        public Builder clearKeyRange() {
          if (keyRangeBuilder_ == null) {
            keyRange_ = null;
            onChanged();
          } else {
            keyRange_ = null;
            keyRangeBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        public io.vitess.proto.Topodata.KeyRange.Builder getKeyRangeBuilder() {
          
          onChanged();
          return getKeyRangeFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
          if (keyRangeBuilder_ != null) {
            return keyRangeBuilder_.getMessageOrBuilder();
          } else {
            return keyRange_ == null ?
                io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
          }
        }
        /**
         * <pre>
         * the source shard keyrange
         * </pre>
         *
         * <code>.topodata.KeyRange key_range = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> 
            getKeyRangeFieldBuilder() {
          if (keyRangeBuilder_ == null) {
            keyRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder>(
                    getKeyRange(),
                    getParentForChildren(),
                    isClean());
            keyRange_ = null;
          }
          return keyRangeBuilder_;
        }

        private com.google.protobuf.LazyStringList tables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureTablesIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            tables_ = new com.google.protobuf.LazyStringArrayList(tables_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getTablesList() {
          return tables_.getUnmodifiableView();
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public int getTablesCount() {
          return tables_.size();
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public java.lang.String getTables(int index) {
          return tables_.get(index);
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public com.google.protobuf.ByteString
            getTablesBytes(int index) {
          return tables_.getByteString(index);
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public Builder setTables(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureTablesIsMutable();
          tables_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public Builder addTables(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureTablesIsMutable();
          tables_.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public Builder addAllTables(
            java.lang.Iterable<java.lang.String> values) {
          ensureTablesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tables_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public Builder clearTables() {
          tables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the source table list to replicate
         * </pre>
         *
         * <code>repeated string tables = 5;</code>
         */
        public Builder addTablesBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureTablesIsMutable();
          tables_.add(value);
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:topodata.Shard.SourceShard)
      }

      // @@protoc_insertion_point(class_scope:topodata.Shard.SourceShard)
      private static final io.vitess.proto.Topodata.Shard.SourceShard DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.vitess.proto.Topodata.Shard.SourceShard();
      }

      public static io.vitess.proto.Topodata.Shard.SourceShard getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<SourceShard>
          PARSER = new com.google.protobuf.AbstractParser<SourceShard>() {
        public SourceShard parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SourceShard(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<SourceShard> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<SourceShard> getParserForType() {
        return PARSER;
      }

      public io.vitess.proto.Topodata.Shard.SourceShard getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TabletControlOrBuilder extends
        // @@protoc_insertion_point(interface_extends:topodata.Shard.TabletControl)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * which tablet type is affected
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      int getTabletTypeValue();
      /**
       * <pre>
       * which tablet type is affected
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      io.vitess.proto.Topodata.TabletType getTabletType();

      /**
       * <code>repeated string cells = 2;</code>
       */
      java.util.List<java.lang.String>
          getCellsList();
      /**
       * <code>repeated string cells = 2;</code>
       */
      int getCellsCount();
      /**
       * <code>repeated string cells = 2;</code>
       */
      java.lang.String getCells(int index);
      /**
       * <code>repeated string cells = 2;</code>
       */
      com.google.protobuf.ByteString
          getCellsBytes(int index);

      /**
       * <code>repeated string blacklisted_tables = 4;</code>
       */
      java.util.List<java.lang.String>
          getBlacklistedTablesList();
      /**
       * <code>repeated string blacklisted_tables = 4;</code>
       */
      int getBlacklistedTablesCount();
      /**
       * <code>repeated string blacklisted_tables = 4;</code>
       */
      java.lang.String getBlacklistedTables(int index);
      /**
       * <code>repeated string blacklisted_tables = 4;</code>
       */
      com.google.protobuf.ByteString
          getBlacklistedTablesBytes(int index);

      /**
       * <pre>
       * frozen is set if we've started failing over traffic for
       * the master. If set, this record should not be removed.
       * </pre>
       *
       * <code>bool frozen = 5;</code>
       */
      boolean getFrozen();
    }
    /**
     * <pre>
     * TabletControl controls tablet's behavior
     * </pre>
     *
     * Protobuf type {@code topodata.Shard.TabletControl}
     */
    public  static final class TabletControl extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:topodata.Shard.TabletControl)
        TabletControlOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TabletControl.newBuilder() to construct.
      private TabletControl(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TabletControl() {
        tabletType_ = 0;
        cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        blacklistedTables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        frozen_ = false;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TabletControl(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();

                tabletType_ = rawValue;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  cells_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000002;
                }
                cells_.add(s);
                break;
              }
              case 34: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  blacklistedTables_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000004;
                }
                blacklistedTables_.add(s);
                break;
              }
              case 40: {

                frozen_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = cells_.getUnmodifiableView();
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            blacklistedTables_ = blacklistedTables_.getUnmodifiableView();
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_TabletControl_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_TabletControl_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.Shard.TabletControl.class, io.vitess.proto.Topodata.Shard.TabletControl.Builder.class);
      }

      private int bitField0_;
      public static final int TABLET_TYPE_FIELD_NUMBER = 1;
      private int tabletType_;
      /**
       * <pre>
       * which tablet type is affected
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      public int getTabletTypeValue() {
        return tabletType_;
      }
      /**
       * <pre>
       * which tablet type is affected
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletType getTabletType() {
        io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(tabletType_);
        return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
      }

      public static final int CELLS_FIELD_NUMBER = 2;
      private com.google.protobuf.LazyStringList cells_;
      /**
       * <code>repeated string cells = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCellsList() {
        return cells_;
      }
      /**
       * <code>repeated string cells = 2;</code>
       */
      public int getCellsCount() {
        return cells_.size();
      }
      /**
       * <code>repeated string cells = 2;</code>
       */
      public java.lang.String getCells(int index) {
        return cells_.get(index);
      }
      /**
       * <code>repeated string cells = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCellsBytes(int index) {
        return cells_.getByteString(index);
      }

      public static final int BLACKLISTED_TABLES_FIELD_NUMBER = 4;
      private com.google.protobuf.LazyStringList blacklistedTables_;
      /**
       * <code>repeated string blacklisted_tables = 4;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getBlacklistedTablesList() {
        return blacklistedTables_;
      }
      /**
       * <code>repeated string blacklisted_tables = 4;</code>
       */
      public int getBlacklistedTablesCount() {
        return blacklistedTables_.size();
      }
      /**
       * <code>repeated string blacklisted_tables = 4;</code>
       */
      public java.lang.String getBlacklistedTables(int index) {
        return blacklistedTables_.get(index);
      }
      /**
       * <code>repeated string blacklisted_tables = 4;</code>
       */
      public com.google.protobuf.ByteString
          getBlacklistedTablesBytes(int index) {
        return blacklistedTables_.getByteString(index);
      }

      public static final int FROZEN_FIELD_NUMBER = 5;
      private boolean frozen_;
      /**
       * <pre>
       * frozen is set if we've started failing over traffic for
       * the master. If set, this record should not be removed.
       * </pre>
       *
       * <code>bool frozen = 5;</code>
       */
      public boolean getFrozen() {
        return frozen_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (tabletType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          output.writeEnum(1, tabletType_);
        }
        for (int i = 0; i < cells_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, cells_.getRaw(i));
        }
        for (int i = 0; i < blacklistedTables_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 4, blacklistedTables_.getRaw(i));
        }
        if (frozen_ != false) {
          output.writeBool(5, frozen_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (tabletType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, tabletType_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < cells_.size(); i++) {
            dataSize += computeStringSizeNoTag(cells_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getCellsList().size();
        }
        {
          int dataSize = 0;
          for (int i = 0; i < blacklistedTables_.size(); i++) {
            dataSize += computeStringSizeNoTag(blacklistedTables_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getBlacklistedTablesList().size();
        }
        if (frozen_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(5, frozen_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.vitess.proto.Topodata.Shard.TabletControl)) {
          return super.equals(obj);
        }
        io.vitess.proto.Topodata.Shard.TabletControl other = (io.vitess.proto.Topodata.Shard.TabletControl) obj;

        boolean result = true;
        result = result && tabletType_ == other.tabletType_;
        result = result && getCellsList()
            .equals(other.getCellsList());
        result = result && getBlacklistedTablesList()
            .equals(other.getBlacklistedTablesList());
        result = result && (getFrozen()
            == other.getFrozen());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TABLET_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + tabletType_;
        if (getCellsCount() > 0) {
          hash = (37 * hash) + CELLS_FIELD_NUMBER;
          hash = (53 * hash) + getCellsList().hashCode();
        }
        if (getBlacklistedTablesCount() > 0) {
          hash = (37 * hash) + BLACKLISTED_TABLES_FIELD_NUMBER;
          hash = (53 * hash) + getBlacklistedTablesList().hashCode();
        }
        hash = (37 * hash) + FROZEN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getFrozen());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Shard.TabletControl parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.vitess.proto.Topodata.Shard.TabletControl prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * TabletControl controls tablet's behavior
       * </pre>
       *
       * Protobuf type {@code topodata.Shard.TabletControl}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:topodata.Shard.TabletControl)
          io.vitess.proto.Topodata.Shard.TabletControlOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_TabletControl_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_TabletControl_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.vitess.proto.Topodata.Shard.TabletControl.class, io.vitess.proto.Topodata.Shard.TabletControl.Builder.class);
        }

        // Construct using io.vitess.proto.Topodata.Shard.TabletControl.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          tabletType_ = 0;

          cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          blacklistedTables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000004);
          frozen_ = false;

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.vitess.proto.Topodata.internal_static_topodata_Shard_TabletControl_descriptor;
        }

        public io.vitess.proto.Topodata.Shard.TabletControl getDefaultInstanceForType() {
          return io.vitess.proto.Topodata.Shard.TabletControl.getDefaultInstance();
        }

        public io.vitess.proto.Topodata.Shard.TabletControl build() {
          io.vitess.proto.Topodata.Shard.TabletControl result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.vitess.proto.Topodata.Shard.TabletControl buildPartial() {
          io.vitess.proto.Topodata.Shard.TabletControl result = new io.vitess.proto.Topodata.Shard.TabletControl(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.tabletType_ = tabletType_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = cells_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cells_ = cells_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            blacklistedTables_ = blacklistedTables_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.blacklistedTables_ = blacklistedTables_;
          result.frozen_ = frozen_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.vitess.proto.Topodata.Shard.TabletControl) {
            return mergeFrom((io.vitess.proto.Topodata.Shard.TabletControl)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.vitess.proto.Topodata.Shard.TabletControl other) {
          if (other == io.vitess.proto.Topodata.Shard.TabletControl.getDefaultInstance()) return this;
          if (other.tabletType_ != 0) {
            setTabletTypeValue(other.getTabletTypeValue());
          }
          if (!other.cells_.isEmpty()) {
            if (cells_.isEmpty()) {
              cells_ = other.cells_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCellsIsMutable();
              cells_.addAll(other.cells_);
            }
            onChanged();
          }
          if (!other.blacklistedTables_.isEmpty()) {
            if (blacklistedTables_.isEmpty()) {
              blacklistedTables_ = other.blacklistedTables_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureBlacklistedTablesIsMutable();
              blacklistedTables_.addAll(other.blacklistedTables_);
            }
            onChanged();
          }
          if (other.getFrozen() != false) {
            setFrozen(other.getFrozen());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.vitess.proto.Topodata.Shard.TabletControl parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.vitess.proto.Topodata.Shard.TabletControl) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int tabletType_ = 0;
        /**
         * <pre>
         * which tablet type is affected
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public int getTabletTypeValue() {
          return tabletType_;
        }
        /**
         * <pre>
         * which tablet type is affected
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder setTabletTypeValue(int value) {
          tabletType_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * which tablet type is affected
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public io.vitess.proto.Topodata.TabletType getTabletType() {
          io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(tabletType_);
          return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * which tablet type is affected
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder setTabletType(io.vitess.proto.Topodata.TabletType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          tabletType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * which tablet type is affected
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder clearTabletType() {
          
          tabletType_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringList cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureCellsIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = new com.google.protobuf.LazyStringArrayList(cells_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getCellsList() {
          return cells_.getUnmodifiableView();
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public int getCellsCount() {
          return cells_.size();
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public java.lang.String getCells(int index) {
          return cells_.get(index);
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public com.google.protobuf.ByteString
            getCellsBytes(int index) {
          return cells_.getByteString(index);
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder setCells(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureCellsIsMutable();
          cells_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder addCells(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureCellsIsMutable();
          cells_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder addAllCells(
            java.lang.Iterable<java.lang.String> values) {
          ensureCellsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cells_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder clearCells() {
          cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string cells = 2;</code>
         */
        public Builder addCellsBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureCellsIsMutable();
          cells_.add(value);
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringList blacklistedTables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureBlacklistedTablesIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            blacklistedTables_ = new com.google.protobuf.LazyStringArrayList(blacklistedTables_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getBlacklistedTablesList() {
          return blacklistedTables_.getUnmodifiableView();
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public int getBlacklistedTablesCount() {
          return blacklistedTables_.size();
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public java.lang.String getBlacklistedTables(int index) {
          return blacklistedTables_.get(index);
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public com.google.protobuf.ByteString
            getBlacklistedTablesBytes(int index) {
          return blacklistedTables_.getByteString(index);
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public Builder setBlacklistedTables(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureBlacklistedTablesIsMutable();
          blacklistedTables_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public Builder addBlacklistedTables(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureBlacklistedTablesIsMutable();
          blacklistedTables_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public Builder addAllBlacklistedTables(
            java.lang.Iterable<java.lang.String> values) {
          ensureBlacklistedTablesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, blacklistedTables_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public Builder clearBlacklistedTables() {
          blacklistedTables_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string blacklisted_tables = 4;</code>
         */
        public Builder addBlacklistedTablesBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureBlacklistedTablesIsMutable();
          blacklistedTables_.add(value);
          onChanged();
          return this;
        }

        private boolean frozen_ ;
        /**
         * <pre>
         * frozen is set if we've started failing over traffic for
         * the master. If set, this record should not be removed.
         * </pre>
         *
         * <code>bool frozen = 5;</code>
         */
        public boolean getFrozen() {
          return frozen_;
        }
        /**
         * <pre>
         * frozen is set if we've started failing over traffic for
         * the master. If set, this record should not be removed.
         * </pre>
         *
         * <code>bool frozen = 5;</code>
         */
        public Builder setFrozen(boolean value) {
          
          frozen_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * frozen is set if we've started failing over traffic for
         * the master. If set, this record should not be removed.
         * </pre>
         *
         * <code>bool frozen = 5;</code>
         */
        public Builder clearFrozen() {
          
          frozen_ = false;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:topodata.Shard.TabletControl)
      }

      // @@protoc_insertion_point(class_scope:topodata.Shard.TabletControl)
      private static final io.vitess.proto.Topodata.Shard.TabletControl DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.vitess.proto.Topodata.Shard.TabletControl();
      }

      public static io.vitess.proto.Topodata.Shard.TabletControl getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TabletControl>
          PARSER = new com.google.protobuf.AbstractParser<TabletControl>() {
        public TabletControl parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TabletControl(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<TabletControl> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TabletControl> getParserForType() {
        return PARSER;
      }

      public io.vitess.proto.Topodata.Shard.TabletControl getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int MASTER_ALIAS_FIELD_NUMBER = 1;
    private io.vitess.proto.Topodata.TabletAlias masterAlias_;
    /**
     * <pre>
     * master_alias is the tablet alias of the master for the shard.
     * If it is unset, then there is no master in this shard yet.
     * No lock is necessary to update this field, when for instance
     * TabletExternallyReparented updates this. However, we lock the
     * shard for reparenting operations (InitShardMaster,
     * PlannedReparentShard,EmergencyReparentShard), to guarantee
     * exclusive operation.
     * </pre>
     *
     * <code>.topodata.TabletAlias master_alias = 1;</code>
     */
    public boolean hasMasterAlias() {
      return masterAlias_ != null;
    }
    /**
     * <pre>
     * master_alias is the tablet alias of the master for the shard.
     * If it is unset, then there is no master in this shard yet.
     * No lock is necessary to update this field, when for instance
     * TabletExternallyReparented updates this. However, we lock the
     * shard for reparenting operations (InitShardMaster,
     * PlannedReparentShard,EmergencyReparentShard), to guarantee
     * exclusive operation.
     * </pre>
     *
     * <code>.topodata.TabletAlias master_alias = 1;</code>
     */
    public io.vitess.proto.Topodata.TabletAlias getMasterAlias() {
      return masterAlias_ == null ? io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : masterAlias_;
    }
    /**
     * <pre>
     * master_alias is the tablet alias of the master for the shard.
     * If it is unset, then there is no master in this shard yet.
     * No lock is necessary to update this field, when for instance
     * TabletExternallyReparented updates this. However, we lock the
     * shard for reparenting operations (InitShardMaster,
     * PlannedReparentShard,EmergencyReparentShard), to guarantee
     * exclusive operation.
     * </pre>
     *
     * <code>.topodata.TabletAlias master_alias = 1;</code>
     */
    public io.vitess.proto.Topodata.TabletAliasOrBuilder getMasterAliasOrBuilder() {
      return getMasterAlias();
    }

    public static final int MASTER_TERM_START_TIME_FIELD_NUMBER = 8;
    private vttime.Vttime.Time masterTermStartTime_;
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the master specified in master_alias began.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * The master_alias should only ever be changed if the new master's term began
     * at a later time than this. Note that a new term can start for the tablet
     * that is already the master. In that case, the master_term_start_time would
     * be increased without changing the master_alias.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 8;</code>
     */
    public boolean hasMasterTermStartTime() {
      return masterTermStartTime_ != null;
    }
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the master specified in master_alias began.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * The master_alias should only ever be changed if the new master's term began
     * at a later time than this. Note that a new term can start for the tablet
     * that is already the master. In that case, the master_term_start_time would
     * be increased without changing the master_alias.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 8;</code>
     */
    public vttime.Vttime.Time getMasterTermStartTime() {
      return masterTermStartTime_ == null ? vttime.Vttime.Time.getDefaultInstance() : masterTermStartTime_;
    }
    /**
     * <pre>
     * master_term_start_time is the time (in UTC) at which the current term of
     * the master specified in master_alias began.
     * A new master term begins any time an authoritative decision is communicated
     * about which tablet should be the master, such as via Vitess
     * replication-management commands like PlannedReparentShard,
     * EmergencyReparentShard, and TabletExternallyReparented.
     * The master_alias should only ever be changed if the new master's term began
     * at a later time than this. Note that a new term can start for the tablet
     * that is already the master. In that case, the master_term_start_time would
     * be increased without changing the master_alias.
     * </pre>
     *
     * <code>.vttime.Time master_term_start_time = 8;</code>
     */
    public vttime.Vttime.TimeOrBuilder getMasterTermStartTimeOrBuilder() {
      return getMasterTermStartTime();
    }

    public static final int KEY_RANGE_FIELD_NUMBER = 2;
    private io.vitess.proto.Topodata.KeyRange keyRange_;
    /**
     * <pre>
     * key_range is the KeyRange for this shard. It can be unset if:
     * - we are not using range-based sharding in this shard.
     * - the shard covers the entire keyrange.
     * This must match the shard name based on our other conventions, but
     * helpful to have it decomposed here.
     * Once set at creation time, it is never changed.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public boolean hasKeyRange() {
      return keyRange_ != null;
    }
    /**
     * <pre>
     * key_range is the KeyRange for this shard. It can be unset if:
     * - we are not using range-based sharding in this shard.
     * - the shard covers the entire keyrange.
     * This must match the shard name based on our other conventions, but
     * helpful to have it decomposed here.
     * Once set at creation time, it is never changed.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public io.vitess.proto.Topodata.KeyRange getKeyRange() {
      return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
    }
    /**
     * <pre>
     * key_range is the KeyRange for this shard. It can be unset if:
     * - we are not using range-based sharding in this shard.
     * - the shard covers the entire keyrange.
     * This must match the shard name based on our other conventions, but
     * helpful to have it decomposed here.
     * Once set at creation time, it is never changed.
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
      return getKeyRange();
    }

    public static final int SERVED_TYPES_FIELD_NUMBER = 3;
    private java.util.List<io.vitess.proto.Topodata.Shard.ServedType> servedTypes_;
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    public java.util.List<io.vitess.proto.Topodata.Shard.ServedType> getServedTypesList() {
      return servedTypes_;
    }
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    public java.util.List<? extends io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder> 
        getServedTypesOrBuilderList() {
      return servedTypes_;
    }
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    public int getServedTypesCount() {
      return servedTypes_.size();
    }
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    public io.vitess.proto.Topodata.Shard.ServedType getServedTypes(int index) {
      return servedTypes_.get(index);
    }
    /**
     * <pre>
     * served_types has at most one entry per TabletType
     * This field is in the process of being deprecated in favor of
     * is_master_serving. Keeping for backwards compatibility purposes.
     * </pre>
     *
     * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
     */
    public io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder getServedTypesOrBuilder(
        int index) {
      return servedTypes_.get(index);
    }

    public static final int SOURCE_SHARDS_FIELD_NUMBER = 4;
    private java.util.List<io.vitess.proto.Topodata.Shard.SourceShard> sourceShards_;
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    public java.util.List<io.vitess.proto.Topodata.Shard.SourceShard> getSourceShardsList() {
      return sourceShards_;
    }
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    public java.util.List<? extends io.vitess.proto.Topodata.Shard.SourceShardOrBuilder> 
        getSourceShardsOrBuilderList() {
      return sourceShards_;
    }
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    public int getSourceShardsCount() {
      return sourceShards_.size();
    }
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    public io.vitess.proto.Topodata.Shard.SourceShard getSourceShards(int index) {
      return sourceShards_.get(index);
    }
    /**
     * <pre>
     * SourceShards is the list of shards we're replicating from,
     * using filtered replication.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
     */
    public io.vitess.proto.Topodata.Shard.SourceShardOrBuilder getSourceShardsOrBuilder(
        int index) {
      return sourceShards_.get(index);
    }

    public static final int TABLET_CONTROLS_FIELD_NUMBER = 6;
    private java.util.List<io.vitess.proto.Topodata.Shard.TabletControl> tabletControls_;
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    public java.util.List<io.vitess.proto.Topodata.Shard.TabletControl> getTabletControlsList() {
      return tabletControls_;
    }
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    public java.util.List<? extends io.vitess.proto.Topodata.Shard.TabletControlOrBuilder> 
        getTabletControlsOrBuilderList() {
      return tabletControls_;
    }
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    public int getTabletControlsCount() {
      return tabletControls_.size();
    }
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    public io.vitess.proto.Topodata.Shard.TabletControl getTabletControls(int index) {
      return tabletControls_.get(index);
    }
    /**
     * <pre>
     * tablet_controls has at most one entry per TabletType.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
     */
    public io.vitess.proto.Topodata.Shard.TabletControlOrBuilder getTabletControlsOrBuilder(
        int index) {
      return tabletControls_.get(index);
    }

    public static final int IS_MASTER_SERVING_FIELD_NUMBER = 7;
    private boolean isMasterServing_;
    /**
     * <pre>
     * is_master_serving sets whether this shard master is serving traffic or not.
     * The keyspace lock is always taken when changing this.
     * </pre>
     *
     * <code>bool is_master_serving = 7;</code>
     */
    public boolean getIsMasterServing() {
      return isMasterServing_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (masterAlias_ != null) {
        output.writeMessage(1, getMasterAlias());
      }
      if (keyRange_ != null) {
        output.writeMessage(2, getKeyRange());
      }
      for (int i = 0; i < servedTypes_.size(); i++) {
        output.writeMessage(3, servedTypes_.get(i));
      }
      for (int i = 0; i < sourceShards_.size(); i++) {
        output.writeMessage(4, sourceShards_.get(i));
      }
      for (int i = 0; i < tabletControls_.size(); i++) {
        output.writeMessage(6, tabletControls_.get(i));
      }
      if (isMasterServing_ != false) {
        output.writeBool(7, isMasterServing_);
      }
      if (masterTermStartTime_ != null) {
        output.writeMessage(8, getMasterTermStartTime());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (masterAlias_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getMasterAlias());
      }
      if (keyRange_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getKeyRange());
      }
      for (int i = 0; i < servedTypes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, servedTypes_.get(i));
      }
      for (int i = 0; i < sourceShards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, sourceShards_.get(i));
      }
      for (int i = 0; i < tabletControls_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, tabletControls_.get(i));
      }
      if (isMasterServing_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, isMasterServing_);
      }
      if (masterTermStartTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getMasterTermStartTime());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.Shard)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.Shard other = (io.vitess.proto.Topodata.Shard) obj;

      boolean result = true;
      result = result && (hasMasterAlias() == other.hasMasterAlias());
      if (hasMasterAlias()) {
        result = result && getMasterAlias()
            .equals(other.getMasterAlias());
      }
      result = result && (hasMasterTermStartTime() == other.hasMasterTermStartTime());
      if (hasMasterTermStartTime()) {
        result = result && getMasterTermStartTime()
            .equals(other.getMasterTermStartTime());
      }
      result = result && (hasKeyRange() == other.hasKeyRange());
      if (hasKeyRange()) {
        result = result && getKeyRange()
            .equals(other.getKeyRange());
      }
      result = result && getServedTypesList()
          .equals(other.getServedTypesList());
      result = result && getSourceShardsList()
          .equals(other.getSourceShardsList());
      result = result && getTabletControlsList()
          .equals(other.getTabletControlsList());
      result = result && (getIsMasterServing()
          == other.getIsMasterServing());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasMasterAlias()) {
        hash = (37 * hash) + MASTER_ALIAS_FIELD_NUMBER;
        hash = (53 * hash) + getMasterAlias().hashCode();
      }
      if (hasMasterTermStartTime()) {
        hash = (37 * hash) + MASTER_TERM_START_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getMasterTermStartTime().hashCode();
      }
      if (hasKeyRange()) {
        hash = (37 * hash) + KEY_RANGE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyRange().hashCode();
      }
      if (getServedTypesCount() > 0) {
        hash = (37 * hash) + SERVED_TYPES_FIELD_NUMBER;
        hash = (53 * hash) + getServedTypesList().hashCode();
      }
      if (getSourceShardsCount() > 0) {
        hash = (37 * hash) + SOURCE_SHARDS_FIELD_NUMBER;
        hash = (53 * hash) + getSourceShardsList().hashCode();
      }
      if (getTabletControlsCount() > 0) {
        hash = (37 * hash) + TABLET_CONTROLS_FIELD_NUMBER;
        hash = (53 * hash) + getTabletControlsList().hashCode();
      }
      hash = (37 * hash) + IS_MASTER_SERVING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsMasterServing());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.Shard parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Shard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Shard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Shard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.Shard prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A Shard contains data about a subset of the data whithin a keyspace.
     * </pre>
     *
     * Protobuf type {@code topodata.Shard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.Shard)
        io.vitess.proto.Topodata.ShardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.Shard.class, io.vitess.proto.Topodata.Shard.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.Shard.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getServedTypesFieldBuilder();
          getSourceShardsFieldBuilder();
          getTabletControlsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (masterAliasBuilder_ == null) {
          masterAlias_ = null;
        } else {
          masterAlias_ = null;
          masterAliasBuilder_ = null;
        }
        if (masterTermStartTimeBuilder_ == null) {
          masterTermStartTime_ = null;
        } else {
          masterTermStartTime_ = null;
          masterTermStartTimeBuilder_ = null;
        }
        if (keyRangeBuilder_ == null) {
          keyRange_ = null;
        } else {
          keyRange_ = null;
          keyRangeBuilder_ = null;
        }
        if (servedTypesBuilder_ == null) {
          servedTypes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          servedTypesBuilder_.clear();
        }
        if (sourceShardsBuilder_ == null) {
          sourceShards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          sourceShardsBuilder_.clear();
        }
        if (tabletControlsBuilder_ == null) {
          tabletControls_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          tabletControlsBuilder_.clear();
        }
        isMasterServing_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_Shard_descriptor;
      }

      public io.vitess.proto.Topodata.Shard getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.Shard.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.Shard build() {
        io.vitess.proto.Topodata.Shard result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.Shard buildPartial() {
        io.vitess.proto.Topodata.Shard result = new io.vitess.proto.Topodata.Shard(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (masterAliasBuilder_ == null) {
          result.masterAlias_ = masterAlias_;
        } else {
          result.masterAlias_ = masterAliasBuilder_.build();
        }
        if (masterTermStartTimeBuilder_ == null) {
          result.masterTermStartTime_ = masterTermStartTime_;
        } else {
          result.masterTermStartTime_ = masterTermStartTimeBuilder_.build();
        }
        if (keyRangeBuilder_ == null) {
          result.keyRange_ = keyRange_;
        } else {
          result.keyRange_ = keyRangeBuilder_.build();
        }
        if (servedTypesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            servedTypes_ = java.util.Collections.unmodifiableList(servedTypes_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.servedTypes_ = servedTypes_;
        } else {
          result.servedTypes_ = servedTypesBuilder_.build();
        }
        if (sourceShardsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            sourceShards_ = java.util.Collections.unmodifiableList(sourceShards_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.sourceShards_ = sourceShards_;
        } else {
          result.sourceShards_ = sourceShardsBuilder_.build();
        }
        if (tabletControlsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            tabletControls_ = java.util.Collections.unmodifiableList(tabletControls_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.tabletControls_ = tabletControls_;
        } else {
          result.tabletControls_ = tabletControlsBuilder_.build();
        }
        result.isMasterServing_ = isMasterServing_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.Shard) {
          return mergeFrom((io.vitess.proto.Topodata.Shard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.Shard other) {
        if (other == io.vitess.proto.Topodata.Shard.getDefaultInstance()) return this;
        if (other.hasMasterAlias()) {
          mergeMasterAlias(other.getMasterAlias());
        }
        if (other.hasMasterTermStartTime()) {
          mergeMasterTermStartTime(other.getMasterTermStartTime());
        }
        if (other.hasKeyRange()) {
          mergeKeyRange(other.getKeyRange());
        }
        if (servedTypesBuilder_ == null) {
          if (!other.servedTypes_.isEmpty()) {
            if (servedTypes_.isEmpty()) {
              servedTypes_ = other.servedTypes_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureServedTypesIsMutable();
              servedTypes_.addAll(other.servedTypes_);
            }
            onChanged();
          }
        } else {
          if (!other.servedTypes_.isEmpty()) {
            if (servedTypesBuilder_.isEmpty()) {
              servedTypesBuilder_.dispose();
              servedTypesBuilder_ = null;
              servedTypes_ = other.servedTypes_;
              bitField0_ = (bitField0_ & ~0x00000008);
              servedTypesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getServedTypesFieldBuilder() : null;
            } else {
              servedTypesBuilder_.addAllMessages(other.servedTypes_);
            }
          }
        }
        if (sourceShardsBuilder_ == null) {
          if (!other.sourceShards_.isEmpty()) {
            if (sourceShards_.isEmpty()) {
              sourceShards_ = other.sourceShards_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureSourceShardsIsMutable();
              sourceShards_.addAll(other.sourceShards_);
            }
            onChanged();
          }
        } else {
          if (!other.sourceShards_.isEmpty()) {
            if (sourceShardsBuilder_.isEmpty()) {
              sourceShardsBuilder_.dispose();
              sourceShardsBuilder_ = null;
              sourceShards_ = other.sourceShards_;
              bitField0_ = (bitField0_ & ~0x00000010);
              sourceShardsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSourceShardsFieldBuilder() : null;
            } else {
              sourceShardsBuilder_.addAllMessages(other.sourceShards_);
            }
          }
        }
        if (tabletControlsBuilder_ == null) {
          if (!other.tabletControls_.isEmpty()) {
            if (tabletControls_.isEmpty()) {
              tabletControls_ = other.tabletControls_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTabletControlsIsMutable();
              tabletControls_.addAll(other.tabletControls_);
            }
            onChanged();
          }
        } else {
          if (!other.tabletControls_.isEmpty()) {
            if (tabletControlsBuilder_.isEmpty()) {
              tabletControlsBuilder_.dispose();
              tabletControlsBuilder_ = null;
              tabletControls_ = other.tabletControls_;
              bitField0_ = (bitField0_ & ~0x00000020);
              tabletControlsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTabletControlsFieldBuilder() : null;
            } else {
              tabletControlsBuilder_.addAllMessages(other.tabletControls_);
            }
          }
        }
        if (other.getIsMasterServing() != false) {
          setIsMasterServing(other.getIsMasterServing());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.Shard parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.Shard) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.vitess.proto.Topodata.TabletAlias masterAlias_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder> masterAliasBuilder_;
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      public boolean hasMasterAlias() {
        return masterAliasBuilder_ != null || masterAlias_ != null;
      }
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletAlias getMasterAlias() {
        if (masterAliasBuilder_ == null) {
          return masterAlias_ == null ? io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : masterAlias_;
        } else {
          return masterAliasBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      public Builder setMasterAlias(io.vitess.proto.Topodata.TabletAlias value) {
        if (masterAliasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          masterAlias_ = value;
          onChanged();
        } else {
          masterAliasBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      public Builder setMasterAlias(
          io.vitess.proto.Topodata.TabletAlias.Builder builderForValue) {
        if (masterAliasBuilder_ == null) {
          masterAlias_ = builderForValue.build();
          onChanged();
        } else {
          masterAliasBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      public Builder mergeMasterAlias(io.vitess.proto.Topodata.TabletAlias value) {
        if (masterAliasBuilder_ == null) {
          if (masterAlias_ != null) {
            masterAlias_ =
              io.vitess.proto.Topodata.TabletAlias.newBuilder(masterAlias_).mergeFrom(value).buildPartial();
          } else {
            masterAlias_ = value;
          }
          onChanged();
        } else {
          masterAliasBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      public Builder clearMasterAlias() {
        if (masterAliasBuilder_ == null) {
          masterAlias_ = null;
          onChanged();
        } else {
          masterAlias_ = null;
          masterAliasBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletAlias.Builder getMasterAliasBuilder() {
        
        onChanged();
        return getMasterAliasFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletAliasOrBuilder getMasterAliasOrBuilder() {
        if (masterAliasBuilder_ != null) {
          return masterAliasBuilder_.getMessageOrBuilder();
        } else {
          return masterAlias_ == null ?
              io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : masterAlias_;
        }
      }
      /**
       * <pre>
       * master_alias is the tablet alias of the master for the shard.
       * If it is unset, then there is no master in this shard yet.
       * No lock is necessary to update this field, when for instance
       * TabletExternallyReparented updates this. However, we lock the
       * shard for reparenting operations (InitShardMaster,
       * PlannedReparentShard,EmergencyReparentShard), to guarantee
       * exclusive operation.
       * </pre>
       *
       * <code>.topodata.TabletAlias master_alias = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder> 
          getMasterAliasFieldBuilder() {
        if (masterAliasBuilder_ == null) {
          masterAliasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder>(
                  getMasterAlias(),
                  getParentForChildren(),
                  isClean());
          masterAlias_ = null;
        }
        return masterAliasBuilder_;
      }

      private vttime.Vttime.Time masterTermStartTime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder> masterTermStartTimeBuilder_;
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      public boolean hasMasterTermStartTime() {
        return masterTermStartTimeBuilder_ != null || masterTermStartTime_ != null;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      public vttime.Vttime.Time getMasterTermStartTime() {
        if (masterTermStartTimeBuilder_ == null) {
          return masterTermStartTime_ == null ? vttime.Vttime.Time.getDefaultInstance() : masterTermStartTime_;
        } else {
          return masterTermStartTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      public Builder setMasterTermStartTime(vttime.Vttime.Time value) {
        if (masterTermStartTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          masterTermStartTime_ = value;
          onChanged();
        } else {
          masterTermStartTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      public Builder setMasterTermStartTime(
          vttime.Vttime.Time.Builder builderForValue) {
        if (masterTermStartTimeBuilder_ == null) {
          masterTermStartTime_ = builderForValue.build();
          onChanged();
        } else {
          masterTermStartTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      public Builder mergeMasterTermStartTime(vttime.Vttime.Time value) {
        if (masterTermStartTimeBuilder_ == null) {
          if (masterTermStartTime_ != null) {
            masterTermStartTime_ =
              vttime.Vttime.Time.newBuilder(masterTermStartTime_).mergeFrom(value).buildPartial();
          } else {
            masterTermStartTime_ = value;
          }
          onChanged();
        } else {
          masterTermStartTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      public Builder clearMasterTermStartTime() {
        if (masterTermStartTimeBuilder_ == null) {
          masterTermStartTime_ = null;
          onChanged();
        } else {
          masterTermStartTime_ = null;
          masterTermStartTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      public vttime.Vttime.Time.Builder getMasterTermStartTimeBuilder() {
        
        onChanged();
        return getMasterTermStartTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      public vttime.Vttime.TimeOrBuilder getMasterTermStartTimeOrBuilder() {
        if (masterTermStartTimeBuilder_ != null) {
          return masterTermStartTimeBuilder_.getMessageOrBuilder();
        } else {
          return masterTermStartTime_ == null ?
              vttime.Vttime.Time.getDefaultInstance() : masterTermStartTime_;
        }
      }
      /**
       * <pre>
       * master_term_start_time is the time (in UTC) at which the current term of
       * the master specified in master_alias began.
       * A new master term begins any time an authoritative decision is communicated
       * about which tablet should be the master, such as via Vitess
       * replication-management commands like PlannedReparentShard,
       * EmergencyReparentShard, and TabletExternallyReparented.
       * The master_alias should only ever be changed if the new master's term began
       * at a later time than this. Note that a new term can start for the tablet
       * that is already the master. In that case, the master_term_start_time would
       * be increased without changing the master_alias.
       * </pre>
       *
       * <code>.vttime.Time master_term_start_time = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder> 
          getMasterTermStartTimeFieldBuilder() {
        if (masterTermStartTimeBuilder_ == null) {
          masterTermStartTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder>(
                  getMasterTermStartTime(),
                  getParentForChildren(),
                  isClean());
          masterTermStartTime_ = null;
        }
        return masterTermStartTimeBuilder_;
      }

      private io.vitess.proto.Topodata.KeyRange keyRange_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> keyRangeBuilder_;
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public boolean hasKeyRange() {
        return keyRangeBuilder_ != null || keyRange_ != null;
      }
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRange getKeyRange() {
        if (keyRangeBuilder_ == null) {
          return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
        } else {
          return keyRangeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder setKeyRange(io.vitess.proto.Topodata.KeyRange value) {
        if (keyRangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyRange_ = value;
          onChanged();
        } else {
          keyRangeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder setKeyRange(
          io.vitess.proto.Topodata.KeyRange.Builder builderForValue) {
        if (keyRangeBuilder_ == null) {
          keyRange_ = builderForValue.build();
          onChanged();
        } else {
          keyRangeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder mergeKeyRange(io.vitess.proto.Topodata.KeyRange value) {
        if (keyRangeBuilder_ == null) {
          if (keyRange_ != null) {
            keyRange_ =
              io.vitess.proto.Topodata.KeyRange.newBuilder(keyRange_).mergeFrom(value).buildPartial();
          } else {
            keyRange_ = value;
          }
          onChanged();
        } else {
          keyRangeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder clearKeyRange() {
        if (keyRangeBuilder_ == null) {
          keyRange_ = null;
          onChanged();
        } else {
          keyRange_ = null;
          keyRangeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRange.Builder getKeyRangeBuilder() {
        
        onChanged();
        return getKeyRangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
        if (keyRangeBuilder_ != null) {
          return keyRangeBuilder_.getMessageOrBuilder();
        } else {
          return keyRange_ == null ?
              io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
        }
      }
      /**
       * <pre>
       * key_range is the KeyRange for this shard. It can be unset if:
       * - we are not using range-based sharding in this shard.
       * - the shard covers the entire keyrange.
       * This must match the shard name based on our other conventions, but
       * helpful to have it decomposed here.
       * Once set at creation time, it is never changed.
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> 
          getKeyRangeFieldBuilder() {
        if (keyRangeBuilder_ == null) {
          keyRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder>(
                  getKeyRange(),
                  getParentForChildren(),
                  isClean());
          keyRange_ = null;
        }
        return keyRangeBuilder_;
      }

      private java.util.List<io.vitess.proto.Topodata.Shard.ServedType> servedTypes_ =
        java.util.Collections.emptyList();
      private void ensureServedTypesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          servedTypes_ = new java.util.ArrayList<io.vitess.proto.Topodata.Shard.ServedType>(servedTypes_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.Shard.ServedType, io.vitess.proto.Topodata.Shard.ServedType.Builder, io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder> servedTypesBuilder_;

      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.Shard.ServedType> getServedTypesList() {
        if (servedTypesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(servedTypes_);
        } else {
          return servedTypesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public int getServedTypesCount() {
        if (servedTypesBuilder_ == null) {
          return servedTypes_.size();
        } else {
          return servedTypesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public io.vitess.proto.Topodata.Shard.ServedType getServedTypes(int index) {
        if (servedTypesBuilder_ == null) {
          return servedTypes_.get(index);
        } else {
          return servedTypesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder setServedTypes(
          int index, io.vitess.proto.Topodata.Shard.ServedType value) {
        if (servedTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedTypesIsMutable();
          servedTypes_.set(index, value);
          onChanged();
        } else {
          servedTypesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder setServedTypes(
          int index, io.vitess.proto.Topodata.Shard.ServedType.Builder builderForValue) {
        if (servedTypesBuilder_ == null) {
          ensureServedTypesIsMutable();
          servedTypes_.set(index, builderForValue.build());
          onChanged();
        } else {
          servedTypesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder addServedTypes(io.vitess.proto.Topodata.Shard.ServedType value) {
        if (servedTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedTypesIsMutable();
          servedTypes_.add(value);
          onChanged();
        } else {
          servedTypesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder addServedTypes(
          int index, io.vitess.proto.Topodata.Shard.ServedType value) {
        if (servedTypesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedTypesIsMutable();
          servedTypes_.add(index, value);
          onChanged();
        } else {
          servedTypesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder addServedTypes(
          io.vitess.proto.Topodata.Shard.ServedType.Builder builderForValue) {
        if (servedTypesBuilder_ == null) {
          ensureServedTypesIsMutable();
          servedTypes_.add(builderForValue.build());
          onChanged();
        } else {
          servedTypesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder addServedTypes(
          int index, io.vitess.proto.Topodata.Shard.ServedType.Builder builderForValue) {
        if (servedTypesBuilder_ == null) {
          ensureServedTypesIsMutable();
          servedTypes_.add(index, builderForValue.build());
          onChanged();
        } else {
          servedTypesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder addAllServedTypes(
          java.lang.Iterable<? extends io.vitess.proto.Topodata.Shard.ServedType> values) {
        if (servedTypesBuilder_ == null) {
          ensureServedTypesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, servedTypes_);
          onChanged();
        } else {
          servedTypesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder clearServedTypes() {
        if (servedTypesBuilder_ == null) {
          servedTypes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          servedTypesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public Builder removeServedTypes(int index) {
        if (servedTypesBuilder_ == null) {
          ensureServedTypesIsMutable();
          servedTypes_.remove(index);
          onChanged();
        } else {
          servedTypesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public io.vitess.proto.Topodata.Shard.ServedType.Builder getServedTypesBuilder(
          int index) {
        return getServedTypesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder getServedTypesOrBuilder(
          int index) {
        if (servedTypesBuilder_ == null) {
          return servedTypes_.get(index);  } else {
          return servedTypesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder> 
           getServedTypesOrBuilderList() {
        if (servedTypesBuilder_ != null) {
          return servedTypesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(servedTypes_);
        }
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public io.vitess.proto.Topodata.Shard.ServedType.Builder addServedTypesBuilder() {
        return getServedTypesFieldBuilder().addBuilder(
            io.vitess.proto.Topodata.Shard.ServedType.getDefaultInstance());
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public io.vitess.proto.Topodata.Shard.ServedType.Builder addServedTypesBuilder(
          int index) {
        return getServedTypesFieldBuilder().addBuilder(
            index, io.vitess.proto.Topodata.Shard.ServedType.getDefaultInstance());
      }
      /**
       * <pre>
       * served_types has at most one entry per TabletType
       * This field is in the process of being deprecated in favor of
       * is_master_serving. Keeping for backwards compatibility purposes.
       * </pre>
       *
       * <code>repeated .topodata.Shard.ServedType served_types = 3;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.Shard.ServedType.Builder> 
           getServedTypesBuilderList() {
        return getServedTypesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.Shard.ServedType, io.vitess.proto.Topodata.Shard.ServedType.Builder, io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder> 
          getServedTypesFieldBuilder() {
        if (servedTypesBuilder_ == null) {
          servedTypesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.vitess.proto.Topodata.Shard.ServedType, io.vitess.proto.Topodata.Shard.ServedType.Builder, io.vitess.proto.Topodata.Shard.ServedTypeOrBuilder>(
                  servedTypes_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          servedTypes_ = null;
        }
        return servedTypesBuilder_;
      }

      private java.util.List<io.vitess.proto.Topodata.Shard.SourceShard> sourceShards_ =
        java.util.Collections.emptyList();
      private void ensureSourceShardsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          sourceShards_ = new java.util.ArrayList<io.vitess.proto.Topodata.Shard.SourceShard>(sourceShards_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.Shard.SourceShard, io.vitess.proto.Topodata.Shard.SourceShard.Builder, io.vitess.proto.Topodata.Shard.SourceShardOrBuilder> sourceShardsBuilder_;

      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.Shard.SourceShard> getSourceShardsList() {
        if (sourceShardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sourceShards_);
        } else {
          return sourceShardsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public int getSourceShardsCount() {
        if (sourceShardsBuilder_ == null) {
          return sourceShards_.size();
        } else {
          return sourceShardsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public io.vitess.proto.Topodata.Shard.SourceShard getSourceShards(int index) {
        if (sourceShardsBuilder_ == null) {
          return sourceShards_.get(index);
        } else {
          return sourceShardsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder setSourceShards(
          int index, io.vitess.proto.Topodata.Shard.SourceShard value) {
        if (sourceShardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSourceShardsIsMutable();
          sourceShards_.set(index, value);
          onChanged();
        } else {
          sourceShardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder setSourceShards(
          int index, io.vitess.proto.Topodata.Shard.SourceShard.Builder builderForValue) {
        if (sourceShardsBuilder_ == null) {
          ensureSourceShardsIsMutable();
          sourceShards_.set(index, builderForValue.build());
          onChanged();
        } else {
          sourceShardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder addSourceShards(io.vitess.proto.Topodata.Shard.SourceShard value) {
        if (sourceShardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSourceShardsIsMutable();
          sourceShards_.add(value);
          onChanged();
        } else {
          sourceShardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder addSourceShards(
          int index, io.vitess.proto.Topodata.Shard.SourceShard value) {
        if (sourceShardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSourceShardsIsMutable();
          sourceShards_.add(index, value);
          onChanged();
        } else {
          sourceShardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder addSourceShards(
          io.vitess.proto.Topodata.Shard.SourceShard.Builder builderForValue) {
        if (sourceShardsBuilder_ == null) {
          ensureSourceShardsIsMutable();
          sourceShards_.add(builderForValue.build());
          onChanged();
        } else {
          sourceShardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder addSourceShards(
          int index, io.vitess.proto.Topodata.Shard.SourceShard.Builder builderForValue) {
        if (sourceShardsBuilder_ == null) {
          ensureSourceShardsIsMutable();
          sourceShards_.add(index, builderForValue.build());
          onChanged();
        } else {
          sourceShardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder addAllSourceShards(
          java.lang.Iterable<? extends io.vitess.proto.Topodata.Shard.SourceShard> values) {
        if (sourceShardsBuilder_ == null) {
          ensureSourceShardsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sourceShards_);
          onChanged();
        } else {
          sourceShardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder clearSourceShards() {
        if (sourceShardsBuilder_ == null) {
          sourceShards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          sourceShardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public Builder removeSourceShards(int index) {
        if (sourceShardsBuilder_ == null) {
          ensureSourceShardsIsMutable();
          sourceShards_.remove(index);
          onChanged();
        } else {
          sourceShardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public io.vitess.proto.Topodata.Shard.SourceShard.Builder getSourceShardsBuilder(
          int index) {
        return getSourceShardsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public io.vitess.proto.Topodata.Shard.SourceShardOrBuilder getSourceShardsOrBuilder(
          int index) {
        if (sourceShardsBuilder_ == null) {
          return sourceShards_.get(index);  } else {
          return sourceShardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.Shard.SourceShardOrBuilder> 
           getSourceShardsOrBuilderList() {
        if (sourceShardsBuilder_ != null) {
          return sourceShardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sourceShards_);
        }
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public io.vitess.proto.Topodata.Shard.SourceShard.Builder addSourceShardsBuilder() {
        return getSourceShardsFieldBuilder().addBuilder(
            io.vitess.proto.Topodata.Shard.SourceShard.getDefaultInstance());
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public io.vitess.proto.Topodata.Shard.SourceShard.Builder addSourceShardsBuilder(
          int index) {
        return getSourceShardsFieldBuilder().addBuilder(
            index, io.vitess.proto.Topodata.Shard.SourceShard.getDefaultInstance());
      }
      /**
       * <pre>
       * SourceShards is the list of shards we're replicating from,
       * using filtered replication.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.SourceShard source_shards = 4;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.Shard.SourceShard.Builder> 
           getSourceShardsBuilderList() {
        return getSourceShardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.Shard.SourceShard, io.vitess.proto.Topodata.Shard.SourceShard.Builder, io.vitess.proto.Topodata.Shard.SourceShardOrBuilder> 
          getSourceShardsFieldBuilder() {
        if (sourceShardsBuilder_ == null) {
          sourceShardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.vitess.proto.Topodata.Shard.SourceShard, io.vitess.proto.Topodata.Shard.SourceShard.Builder, io.vitess.proto.Topodata.Shard.SourceShardOrBuilder>(
                  sourceShards_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          sourceShards_ = null;
        }
        return sourceShardsBuilder_;
      }

      private java.util.List<io.vitess.proto.Topodata.Shard.TabletControl> tabletControls_ =
        java.util.Collections.emptyList();
      private void ensureTabletControlsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          tabletControls_ = new java.util.ArrayList<io.vitess.proto.Topodata.Shard.TabletControl>(tabletControls_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.Shard.TabletControl, io.vitess.proto.Topodata.Shard.TabletControl.Builder, io.vitess.proto.Topodata.Shard.TabletControlOrBuilder> tabletControlsBuilder_;

      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.Shard.TabletControl> getTabletControlsList() {
        if (tabletControlsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tabletControls_);
        } else {
          return tabletControlsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public int getTabletControlsCount() {
        if (tabletControlsBuilder_ == null) {
          return tabletControls_.size();
        } else {
          return tabletControlsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public io.vitess.proto.Topodata.Shard.TabletControl getTabletControls(int index) {
        if (tabletControlsBuilder_ == null) {
          return tabletControls_.get(index);
        } else {
          return tabletControlsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder setTabletControls(
          int index, io.vitess.proto.Topodata.Shard.TabletControl value) {
        if (tabletControlsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTabletControlsIsMutable();
          tabletControls_.set(index, value);
          onChanged();
        } else {
          tabletControlsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder setTabletControls(
          int index, io.vitess.proto.Topodata.Shard.TabletControl.Builder builderForValue) {
        if (tabletControlsBuilder_ == null) {
          ensureTabletControlsIsMutable();
          tabletControls_.set(index, builderForValue.build());
          onChanged();
        } else {
          tabletControlsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder addTabletControls(io.vitess.proto.Topodata.Shard.TabletControl value) {
        if (tabletControlsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTabletControlsIsMutable();
          tabletControls_.add(value);
          onChanged();
        } else {
          tabletControlsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder addTabletControls(
          int index, io.vitess.proto.Topodata.Shard.TabletControl value) {
        if (tabletControlsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTabletControlsIsMutable();
          tabletControls_.add(index, value);
          onChanged();
        } else {
          tabletControlsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder addTabletControls(
          io.vitess.proto.Topodata.Shard.TabletControl.Builder builderForValue) {
        if (tabletControlsBuilder_ == null) {
          ensureTabletControlsIsMutable();
          tabletControls_.add(builderForValue.build());
          onChanged();
        } else {
          tabletControlsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder addTabletControls(
          int index, io.vitess.proto.Topodata.Shard.TabletControl.Builder builderForValue) {
        if (tabletControlsBuilder_ == null) {
          ensureTabletControlsIsMutable();
          tabletControls_.add(index, builderForValue.build());
          onChanged();
        } else {
          tabletControlsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder addAllTabletControls(
          java.lang.Iterable<? extends io.vitess.proto.Topodata.Shard.TabletControl> values) {
        if (tabletControlsBuilder_ == null) {
          ensureTabletControlsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tabletControls_);
          onChanged();
        } else {
          tabletControlsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder clearTabletControls() {
        if (tabletControlsBuilder_ == null) {
          tabletControls_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          tabletControlsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public Builder removeTabletControls(int index) {
        if (tabletControlsBuilder_ == null) {
          ensureTabletControlsIsMutable();
          tabletControls_.remove(index);
          onChanged();
        } else {
          tabletControlsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public io.vitess.proto.Topodata.Shard.TabletControl.Builder getTabletControlsBuilder(
          int index) {
        return getTabletControlsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public io.vitess.proto.Topodata.Shard.TabletControlOrBuilder getTabletControlsOrBuilder(
          int index) {
        if (tabletControlsBuilder_ == null) {
          return tabletControls_.get(index);  } else {
          return tabletControlsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.Shard.TabletControlOrBuilder> 
           getTabletControlsOrBuilderList() {
        if (tabletControlsBuilder_ != null) {
          return tabletControlsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tabletControls_);
        }
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public io.vitess.proto.Topodata.Shard.TabletControl.Builder addTabletControlsBuilder() {
        return getTabletControlsFieldBuilder().addBuilder(
            io.vitess.proto.Topodata.Shard.TabletControl.getDefaultInstance());
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public io.vitess.proto.Topodata.Shard.TabletControl.Builder addTabletControlsBuilder(
          int index) {
        return getTabletControlsFieldBuilder().addBuilder(
            index, io.vitess.proto.Topodata.Shard.TabletControl.getDefaultInstance());
      }
      /**
       * <pre>
       * tablet_controls has at most one entry per TabletType.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>repeated .topodata.Shard.TabletControl tablet_controls = 6;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.Shard.TabletControl.Builder> 
           getTabletControlsBuilderList() {
        return getTabletControlsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.Shard.TabletControl, io.vitess.proto.Topodata.Shard.TabletControl.Builder, io.vitess.proto.Topodata.Shard.TabletControlOrBuilder> 
          getTabletControlsFieldBuilder() {
        if (tabletControlsBuilder_ == null) {
          tabletControlsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.vitess.proto.Topodata.Shard.TabletControl, io.vitess.proto.Topodata.Shard.TabletControl.Builder, io.vitess.proto.Topodata.Shard.TabletControlOrBuilder>(
                  tabletControls_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          tabletControls_ = null;
        }
        return tabletControlsBuilder_;
      }

      private boolean isMasterServing_ ;
      /**
       * <pre>
       * is_master_serving sets whether this shard master is serving traffic or not.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>bool is_master_serving = 7;</code>
       */
      public boolean getIsMasterServing() {
        return isMasterServing_;
      }
      /**
       * <pre>
       * is_master_serving sets whether this shard master is serving traffic or not.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>bool is_master_serving = 7;</code>
       */
      public Builder setIsMasterServing(boolean value) {
        
        isMasterServing_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * is_master_serving sets whether this shard master is serving traffic or not.
       * The keyspace lock is always taken when changing this.
       * </pre>
       *
       * <code>bool is_master_serving = 7;</code>
       */
      public Builder clearIsMasterServing() {
        
        isMasterServing_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.Shard)
    }

    // @@protoc_insertion_point(class_scope:topodata.Shard)
    private static final io.vitess.proto.Topodata.Shard DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.Shard();
    }

    public static io.vitess.proto.Topodata.Shard getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Shard>
        PARSER = new com.google.protobuf.AbstractParser<Shard>() {
      public Shard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Shard(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Shard> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Shard> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.Shard getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface KeyspaceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.Keyspace)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * name of the column used for sharding
     * empty if the keyspace is not sharded
     * </pre>
     *
     * <code>string sharding_column_name = 1;</code>
     */
    java.lang.String getShardingColumnName();
    /**
     * <pre>
     * name of the column used for sharding
     * empty if the keyspace is not sharded
     * </pre>
     *
     * <code>string sharding_column_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getShardingColumnNameBytes();

    /**
     * <pre>
     * type of the column used for sharding
     * UNSET if the keyspace is not sharded
     * </pre>
     *
     * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
     */
    int getShardingColumnTypeValue();
    /**
     * <pre>
     * type of the column used for sharding
     * UNSET if the keyspace is not sharded
     * </pre>
     *
     * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
     */
    io.vitess.proto.Topodata.KeyspaceIdType getShardingColumnType();

    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    java.util.List<io.vitess.proto.Topodata.Keyspace.ServedFrom> 
        getServedFromsList();
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    io.vitess.proto.Topodata.Keyspace.ServedFrom getServedFroms(int index);
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    int getServedFromsCount();
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    java.util.List<? extends io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder> 
        getServedFromsOrBuilderList();
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder getServedFromsOrBuilder(
        int index);

    /**
     * <pre>
     * keyspace_type will determine how this keyspace is treated by
     * vtgate / vschema. Normal keyspaces are routable by
     * any query. Snapshot keyspaces are only accessible
     * by explicit addresssing or by calling "use keyspace" first
     * </pre>
     *
     * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
     */
    int getKeyspaceTypeValue();
    /**
     * <pre>
     * keyspace_type will determine how this keyspace is treated by
     * vtgate / vschema. Normal keyspaces are routable by
     * any query. Snapshot keyspaces are only accessible
     * by explicit addresssing or by calling "use keyspace" first
     * </pre>
     *
     * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
     */
    io.vitess.proto.Topodata.KeyspaceType getKeyspaceType();

    /**
     * <pre>
     * base_keyspace is the base keyspace from which a snapshot
     * keyspace is created. empty for normal keyspaces
     * </pre>
     *
     * <code>string base_keyspace = 6;</code>
     */
    java.lang.String getBaseKeyspace();
    /**
     * <pre>
     * base_keyspace is the base keyspace from which a snapshot
     * keyspace is created. empty for normal keyspaces
     * </pre>
     *
     * <code>string base_keyspace = 6;</code>
     */
    com.google.protobuf.ByteString
        getBaseKeyspaceBytes();

    /**
     * <pre>
     * snapshot_time (in UTC) is a property of snapshot
     * keyspaces which tells us what point in time
     * the snapshot is of
     * </pre>
     *
     * <code>.vttime.Time snapshot_time = 7;</code>
     */
    boolean hasSnapshotTime();
    /**
     * <pre>
     * snapshot_time (in UTC) is a property of snapshot
     * keyspaces which tells us what point in time
     * the snapshot is of
     * </pre>
     *
     * <code>.vttime.Time snapshot_time = 7;</code>
     */
    vttime.Vttime.Time getSnapshotTime();
    /**
     * <pre>
     * snapshot_time (in UTC) is a property of snapshot
     * keyspaces which tells us what point in time
     * the snapshot is of
     * </pre>
     *
     * <code>.vttime.Time snapshot_time = 7;</code>
     */
    vttime.Vttime.TimeOrBuilder getSnapshotTimeOrBuilder();
  }
  /**
   * <pre>
   * A Keyspace contains data about a keyspace.
   * </pre>
   *
   * Protobuf type {@code topodata.Keyspace}
   */
  public  static final class Keyspace extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.Keyspace)
      KeyspaceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Keyspace.newBuilder() to construct.
    private Keyspace(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Keyspace() {
      shardingColumnName_ = "";
      shardingColumnType_ = 0;
      servedFroms_ = java.util.Collections.emptyList();
      keyspaceType_ = 0;
      baseKeyspace_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Keyspace(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              shardingColumnName_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              shardingColumnType_ = rawValue;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                servedFroms_ = new java.util.ArrayList<io.vitess.proto.Topodata.Keyspace.ServedFrom>();
                mutable_bitField0_ |= 0x00000004;
              }
              servedFroms_.add(
                  input.readMessage(io.vitess.proto.Topodata.Keyspace.ServedFrom.parser(), extensionRegistry));
              break;
            }
            case 40: {
              int rawValue = input.readEnum();

              keyspaceType_ = rawValue;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              baseKeyspace_ = s;
              break;
            }
            case 58: {
              vttime.Vttime.Time.Builder subBuilder = null;
              if (snapshotTime_ != null) {
                subBuilder = snapshotTime_.toBuilder();
              }
              snapshotTime_ = input.readMessage(vttime.Vttime.Time.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(snapshotTime_);
                snapshotTime_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          servedFroms_ = java.util.Collections.unmodifiableList(servedFroms_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.Keyspace.class, io.vitess.proto.Topodata.Keyspace.Builder.class);
    }

    public interface ServedFromOrBuilder extends
        // @@protoc_insertion_point(interface_extends:topodata.Keyspace.ServedFrom)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * the tablet type (key for the map)
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      int getTabletTypeValue();
      /**
       * <pre>
       * the tablet type (key for the map)
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      io.vitess.proto.Topodata.TabletType getTabletType();

      /**
       * <pre>
       * the cells to limit this to
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      java.util.List<java.lang.String>
          getCellsList();
      /**
       * <pre>
       * the cells to limit this to
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      int getCellsCount();
      /**
       * <pre>
       * the cells to limit this to
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      java.lang.String getCells(int index);
      /**
       * <pre>
       * the cells to limit this to
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      com.google.protobuf.ByteString
          getCellsBytes(int index);

      /**
       * <pre>
       * the keyspace name that's serving it
       * </pre>
       *
       * <code>string keyspace = 3;</code>
       */
      java.lang.String getKeyspace();
      /**
       * <pre>
       * the keyspace name that's serving it
       * </pre>
       *
       * <code>string keyspace = 3;</code>
       */
      com.google.protobuf.ByteString
          getKeyspaceBytes();
    }
    /**
     * <pre>
     * ServedFrom indicates a relationship between a TabletType and the
     * keyspace name that's serving it.
     * </pre>
     *
     * Protobuf type {@code topodata.Keyspace.ServedFrom}
     */
    public  static final class ServedFrom extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:topodata.Keyspace.ServedFrom)
        ServedFromOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ServedFrom.newBuilder() to construct.
      private ServedFrom(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ServedFrom() {
        tabletType_ = 0;
        cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        keyspace_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ServedFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();

                tabletType_ = rawValue;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  cells_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000002;
                }
                cells_.add(s);
                break;
              }
              case 26: {
                java.lang.String s = input.readStringRequireUtf8();

                keyspace_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = cells_.getUnmodifiableView();
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_ServedFrom_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_ServedFrom_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.Keyspace.ServedFrom.class, io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder.class);
      }

      private int bitField0_;
      public static final int TABLET_TYPE_FIELD_NUMBER = 1;
      private int tabletType_;
      /**
       * <pre>
       * the tablet type (key for the map)
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      public int getTabletTypeValue() {
        return tabletType_;
      }
      /**
       * <pre>
       * the tablet type (key for the map)
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletType getTabletType() {
        io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(tabletType_);
        return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
      }

      public static final int CELLS_FIELD_NUMBER = 2;
      private com.google.protobuf.LazyStringList cells_;
      /**
       * <pre>
       * the cells to limit this to
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCellsList() {
        return cells_;
      }
      /**
       * <pre>
       * the cells to limit this to
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public int getCellsCount() {
        return cells_.size();
      }
      /**
       * <pre>
       * the cells to limit this to
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public java.lang.String getCells(int index) {
        return cells_.get(index);
      }
      /**
       * <pre>
       * the cells to limit this to
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCellsBytes(int index) {
        return cells_.getByteString(index);
      }

      public static final int KEYSPACE_FIELD_NUMBER = 3;
      private volatile java.lang.Object keyspace_;
      /**
       * <pre>
       * the keyspace name that's serving it
       * </pre>
       *
       * <code>string keyspace = 3;</code>
       */
      public java.lang.String getKeyspace() {
        java.lang.Object ref = keyspace_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          keyspace_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * the keyspace name that's serving it
       * </pre>
       *
       * <code>string keyspace = 3;</code>
       */
      public com.google.protobuf.ByteString
          getKeyspaceBytes() {
        java.lang.Object ref = keyspace_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          keyspace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (tabletType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          output.writeEnum(1, tabletType_);
        }
        for (int i = 0; i < cells_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, cells_.getRaw(i));
        }
        if (!getKeyspaceBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, keyspace_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (tabletType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, tabletType_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < cells_.size(); i++) {
            dataSize += computeStringSizeNoTag(cells_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getCellsList().size();
        }
        if (!getKeyspaceBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, keyspace_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.vitess.proto.Topodata.Keyspace.ServedFrom)) {
          return super.equals(obj);
        }
        io.vitess.proto.Topodata.Keyspace.ServedFrom other = (io.vitess.proto.Topodata.Keyspace.ServedFrom) obj;

        boolean result = true;
        result = result && tabletType_ == other.tabletType_;
        result = result && getCellsList()
            .equals(other.getCellsList());
        result = result && getKeyspace()
            .equals(other.getKeyspace());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TABLET_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + tabletType_;
        if (getCellsCount() > 0) {
          hash = (37 * hash) + CELLS_FIELD_NUMBER;
          hash = (53 * hash) + getCellsList().hashCode();
        }
        hash = (37 * hash) + KEYSPACE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyspace().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.Keyspace.ServedFrom parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.vitess.proto.Topodata.Keyspace.ServedFrom prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * ServedFrom indicates a relationship between a TabletType and the
       * keyspace name that's serving it.
       * </pre>
       *
       * Protobuf type {@code topodata.Keyspace.ServedFrom}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:topodata.Keyspace.ServedFrom)
          io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_ServedFrom_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_ServedFrom_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.vitess.proto.Topodata.Keyspace.ServedFrom.class, io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder.class);
        }

        // Construct using io.vitess.proto.Topodata.Keyspace.ServedFrom.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          tabletType_ = 0;

          cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          keyspace_ = "";

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_ServedFrom_descriptor;
        }

        public io.vitess.proto.Topodata.Keyspace.ServedFrom getDefaultInstanceForType() {
          return io.vitess.proto.Topodata.Keyspace.ServedFrom.getDefaultInstance();
        }

        public io.vitess.proto.Topodata.Keyspace.ServedFrom build() {
          io.vitess.proto.Topodata.Keyspace.ServedFrom result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.vitess.proto.Topodata.Keyspace.ServedFrom buildPartial() {
          io.vitess.proto.Topodata.Keyspace.ServedFrom result = new io.vitess.proto.Topodata.Keyspace.ServedFrom(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.tabletType_ = tabletType_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = cells_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.cells_ = cells_;
          result.keyspace_ = keyspace_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.vitess.proto.Topodata.Keyspace.ServedFrom) {
            return mergeFrom((io.vitess.proto.Topodata.Keyspace.ServedFrom)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.vitess.proto.Topodata.Keyspace.ServedFrom other) {
          if (other == io.vitess.proto.Topodata.Keyspace.ServedFrom.getDefaultInstance()) return this;
          if (other.tabletType_ != 0) {
            setTabletTypeValue(other.getTabletTypeValue());
          }
          if (!other.cells_.isEmpty()) {
            if (cells_.isEmpty()) {
              cells_ = other.cells_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCellsIsMutable();
              cells_.addAll(other.cells_);
            }
            onChanged();
          }
          if (!other.getKeyspace().isEmpty()) {
            keyspace_ = other.keyspace_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.vitess.proto.Topodata.Keyspace.ServedFrom parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.vitess.proto.Topodata.Keyspace.ServedFrom) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int tabletType_ = 0;
        /**
         * <pre>
         * the tablet type (key for the map)
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public int getTabletTypeValue() {
          return tabletType_;
        }
        /**
         * <pre>
         * the tablet type (key for the map)
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder setTabletTypeValue(int value) {
          tabletType_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the tablet type (key for the map)
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public io.vitess.proto.Topodata.TabletType getTabletType() {
          io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(tabletType_);
          return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * the tablet type (key for the map)
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder setTabletType(io.vitess.proto.Topodata.TabletType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          tabletType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the tablet type (key for the map)
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder clearTabletType() {
          
          tabletType_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringList cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureCellsIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            cells_ = new com.google.protobuf.LazyStringArrayList(cells_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getCellsList() {
          return cells_.getUnmodifiableView();
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public int getCellsCount() {
          return cells_.size();
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public java.lang.String getCells(int index) {
          return cells_.get(index);
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public com.google.protobuf.ByteString
            getCellsBytes(int index) {
          return cells_.getByteString(index);
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public Builder setCells(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureCellsIsMutable();
          cells_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public Builder addCells(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureCellsIsMutable();
          cells_.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public Builder addAllCells(
            java.lang.Iterable<java.lang.String> values) {
          ensureCellsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cells_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public Builder clearCells() {
          cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the cells to limit this to
         * </pre>
         *
         * <code>repeated string cells = 2;</code>
         */
        public Builder addCellsBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureCellsIsMutable();
          cells_.add(value);
          onChanged();
          return this;
        }

        private java.lang.Object keyspace_ = "";
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 3;</code>
         */
        public java.lang.String getKeyspace() {
          java.lang.Object ref = keyspace_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            keyspace_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 3;</code>
         */
        public com.google.protobuf.ByteString
            getKeyspaceBytes() {
          java.lang.Object ref = keyspace_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            keyspace_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 3;</code>
         */
        public Builder setKeyspace(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          keyspace_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 3;</code>
         */
        public Builder clearKeyspace() {
          
          keyspace_ = getDefaultInstance().getKeyspace();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 3;</code>
         */
        public Builder setKeyspaceBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          keyspace_ = value;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:topodata.Keyspace.ServedFrom)
      }

      // @@protoc_insertion_point(class_scope:topodata.Keyspace.ServedFrom)
      private static final io.vitess.proto.Topodata.Keyspace.ServedFrom DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.vitess.proto.Topodata.Keyspace.ServedFrom();
      }

      public static io.vitess.proto.Topodata.Keyspace.ServedFrom getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ServedFrom>
          PARSER = new com.google.protobuf.AbstractParser<ServedFrom>() {
        public ServedFrom parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ServedFrom(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ServedFrom> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ServedFrom> getParserForType() {
        return PARSER;
      }

      public io.vitess.proto.Topodata.Keyspace.ServedFrom getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int SHARDING_COLUMN_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object shardingColumnName_;
    /**
     * <pre>
     * name of the column used for sharding
     * empty if the keyspace is not sharded
     * </pre>
     *
     * <code>string sharding_column_name = 1;</code>
     */
    public java.lang.String getShardingColumnName() {
      java.lang.Object ref = shardingColumnName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shardingColumnName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * name of the column used for sharding
     * empty if the keyspace is not sharded
     * </pre>
     *
     * <code>string sharding_column_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getShardingColumnNameBytes() {
      java.lang.Object ref = shardingColumnName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shardingColumnName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHARDING_COLUMN_TYPE_FIELD_NUMBER = 2;
    private int shardingColumnType_;
    /**
     * <pre>
     * type of the column used for sharding
     * UNSET if the keyspace is not sharded
     * </pre>
     *
     * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
     */
    public int getShardingColumnTypeValue() {
      return shardingColumnType_;
    }
    /**
     * <pre>
     * type of the column used for sharding
     * UNSET if the keyspace is not sharded
     * </pre>
     *
     * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
     */
    public io.vitess.proto.Topodata.KeyspaceIdType getShardingColumnType() {
      io.vitess.proto.Topodata.KeyspaceIdType result = io.vitess.proto.Topodata.KeyspaceIdType.valueOf(shardingColumnType_);
      return result == null ? io.vitess.proto.Topodata.KeyspaceIdType.UNRECOGNIZED : result;
    }

    public static final int SERVED_FROMS_FIELD_NUMBER = 4;
    private java.util.List<io.vitess.proto.Topodata.Keyspace.ServedFrom> servedFroms_;
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    public java.util.List<io.vitess.proto.Topodata.Keyspace.ServedFrom> getServedFromsList() {
      return servedFroms_;
    }
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    public java.util.List<? extends io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder> 
        getServedFromsOrBuilderList() {
      return servedFroms_;
    }
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    public int getServedFromsCount() {
      return servedFroms_.size();
    }
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    public io.vitess.proto.Topodata.Keyspace.ServedFrom getServedFroms(int index) {
      return servedFroms_.get(index);
    }
    /**
     * <pre>
     * ServedFrom will redirect the appropriate traffic to
     * another keyspace.
     * </pre>
     *
     * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
     */
    public io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder getServedFromsOrBuilder(
        int index) {
      return servedFroms_.get(index);
    }

    public static final int KEYSPACE_TYPE_FIELD_NUMBER = 5;
    private int keyspaceType_;
    /**
     * <pre>
     * keyspace_type will determine how this keyspace is treated by
     * vtgate / vschema. Normal keyspaces are routable by
     * any query. Snapshot keyspaces are only accessible
     * by explicit addresssing or by calling "use keyspace" first
     * </pre>
     *
     * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
     */
    public int getKeyspaceTypeValue() {
      return keyspaceType_;
    }
    /**
     * <pre>
     * keyspace_type will determine how this keyspace is treated by
     * vtgate / vschema. Normal keyspaces are routable by
     * any query. Snapshot keyspaces are only accessible
     * by explicit addresssing or by calling "use keyspace" first
     * </pre>
     *
     * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
     */
    public io.vitess.proto.Topodata.KeyspaceType getKeyspaceType() {
      io.vitess.proto.Topodata.KeyspaceType result = io.vitess.proto.Topodata.KeyspaceType.valueOf(keyspaceType_);
      return result == null ? io.vitess.proto.Topodata.KeyspaceType.UNRECOGNIZED : result;
    }

    public static final int BASE_KEYSPACE_FIELD_NUMBER = 6;
    private volatile java.lang.Object baseKeyspace_;
    /**
     * <pre>
     * base_keyspace is the base keyspace from which a snapshot
     * keyspace is created. empty for normal keyspaces
     * </pre>
     *
     * <code>string base_keyspace = 6;</code>
     */
    public java.lang.String getBaseKeyspace() {
      java.lang.Object ref = baseKeyspace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        baseKeyspace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * base_keyspace is the base keyspace from which a snapshot
     * keyspace is created. empty for normal keyspaces
     * </pre>
     *
     * <code>string base_keyspace = 6;</code>
     */
    public com.google.protobuf.ByteString
        getBaseKeyspaceBytes() {
      java.lang.Object ref = baseKeyspace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        baseKeyspace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SNAPSHOT_TIME_FIELD_NUMBER = 7;
    private vttime.Vttime.Time snapshotTime_;
    /**
     * <pre>
     * snapshot_time (in UTC) is a property of snapshot
     * keyspaces which tells us what point in time
     * the snapshot is of
     * </pre>
     *
     * <code>.vttime.Time snapshot_time = 7;</code>
     */
    public boolean hasSnapshotTime() {
      return snapshotTime_ != null;
    }
    /**
     * <pre>
     * snapshot_time (in UTC) is a property of snapshot
     * keyspaces which tells us what point in time
     * the snapshot is of
     * </pre>
     *
     * <code>.vttime.Time snapshot_time = 7;</code>
     */
    public vttime.Vttime.Time getSnapshotTime() {
      return snapshotTime_ == null ? vttime.Vttime.Time.getDefaultInstance() : snapshotTime_;
    }
    /**
     * <pre>
     * snapshot_time (in UTC) is a property of snapshot
     * keyspaces which tells us what point in time
     * the snapshot is of
     * </pre>
     *
     * <code>.vttime.Time snapshot_time = 7;</code>
     */
    public vttime.Vttime.TimeOrBuilder getSnapshotTimeOrBuilder() {
      return getSnapshotTime();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getShardingColumnNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, shardingColumnName_);
      }
      if (shardingColumnType_ != io.vitess.proto.Topodata.KeyspaceIdType.UNSET.getNumber()) {
        output.writeEnum(2, shardingColumnType_);
      }
      for (int i = 0; i < servedFroms_.size(); i++) {
        output.writeMessage(4, servedFroms_.get(i));
      }
      if (keyspaceType_ != io.vitess.proto.Topodata.KeyspaceType.NORMAL.getNumber()) {
        output.writeEnum(5, keyspaceType_);
      }
      if (!getBaseKeyspaceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, baseKeyspace_);
      }
      if (snapshotTime_ != null) {
        output.writeMessage(7, getSnapshotTime());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getShardingColumnNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, shardingColumnName_);
      }
      if (shardingColumnType_ != io.vitess.proto.Topodata.KeyspaceIdType.UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, shardingColumnType_);
      }
      for (int i = 0; i < servedFroms_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, servedFroms_.get(i));
      }
      if (keyspaceType_ != io.vitess.proto.Topodata.KeyspaceType.NORMAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, keyspaceType_);
      }
      if (!getBaseKeyspaceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, baseKeyspace_);
      }
      if (snapshotTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getSnapshotTime());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.Keyspace)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.Keyspace other = (io.vitess.proto.Topodata.Keyspace) obj;

      boolean result = true;
      result = result && getShardingColumnName()
          .equals(other.getShardingColumnName());
      result = result && shardingColumnType_ == other.shardingColumnType_;
      result = result && getServedFromsList()
          .equals(other.getServedFromsList());
      result = result && keyspaceType_ == other.keyspaceType_;
      result = result && getBaseKeyspace()
          .equals(other.getBaseKeyspace());
      result = result && (hasSnapshotTime() == other.hasSnapshotTime());
      if (hasSnapshotTime()) {
        result = result && getSnapshotTime()
            .equals(other.getSnapshotTime());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SHARDING_COLUMN_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getShardingColumnName().hashCode();
      hash = (37 * hash) + SHARDING_COLUMN_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + shardingColumnType_;
      if (getServedFromsCount() > 0) {
        hash = (37 * hash) + SERVED_FROMS_FIELD_NUMBER;
        hash = (53 * hash) + getServedFromsList().hashCode();
      }
      hash = (37 * hash) + KEYSPACE_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + keyspaceType_;
      hash = (37 * hash) + BASE_KEYSPACE_FIELD_NUMBER;
      hash = (53 * hash) + getBaseKeyspace().hashCode();
      if (hasSnapshotTime()) {
        hash = (37 * hash) + SNAPSHOT_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getSnapshotTime().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.Keyspace parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Keyspace parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Keyspace parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.Keyspace parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.Keyspace prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A Keyspace contains data about a keyspace.
     * </pre>
     *
     * Protobuf type {@code topodata.Keyspace}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.Keyspace)
        io.vitess.proto.Topodata.KeyspaceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.Keyspace.class, io.vitess.proto.Topodata.Keyspace.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.Keyspace.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getServedFromsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        shardingColumnName_ = "";

        shardingColumnType_ = 0;

        if (servedFromsBuilder_ == null) {
          servedFroms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          servedFromsBuilder_.clear();
        }
        keyspaceType_ = 0;

        baseKeyspace_ = "";

        if (snapshotTimeBuilder_ == null) {
          snapshotTime_ = null;
        } else {
          snapshotTime_ = null;
          snapshotTimeBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_Keyspace_descriptor;
      }

      public io.vitess.proto.Topodata.Keyspace getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.Keyspace.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.Keyspace build() {
        io.vitess.proto.Topodata.Keyspace result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.Keyspace buildPartial() {
        io.vitess.proto.Topodata.Keyspace result = new io.vitess.proto.Topodata.Keyspace(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.shardingColumnName_ = shardingColumnName_;
        result.shardingColumnType_ = shardingColumnType_;
        if (servedFromsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            servedFroms_ = java.util.Collections.unmodifiableList(servedFroms_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.servedFroms_ = servedFroms_;
        } else {
          result.servedFroms_ = servedFromsBuilder_.build();
        }
        result.keyspaceType_ = keyspaceType_;
        result.baseKeyspace_ = baseKeyspace_;
        if (snapshotTimeBuilder_ == null) {
          result.snapshotTime_ = snapshotTime_;
        } else {
          result.snapshotTime_ = snapshotTimeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.Keyspace) {
          return mergeFrom((io.vitess.proto.Topodata.Keyspace)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.Keyspace other) {
        if (other == io.vitess.proto.Topodata.Keyspace.getDefaultInstance()) return this;
        if (!other.getShardingColumnName().isEmpty()) {
          shardingColumnName_ = other.shardingColumnName_;
          onChanged();
        }
        if (other.shardingColumnType_ != 0) {
          setShardingColumnTypeValue(other.getShardingColumnTypeValue());
        }
        if (servedFromsBuilder_ == null) {
          if (!other.servedFroms_.isEmpty()) {
            if (servedFroms_.isEmpty()) {
              servedFroms_ = other.servedFroms_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureServedFromsIsMutable();
              servedFroms_.addAll(other.servedFroms_);
            }
            onChanged();
          }
        } else {
          if (!other.servedFroms_.isEmpty()) {
            if (servedFromsBuilder_.isEmpty()) {
              servedFromsBuilder_.dispose();
              servedFromsBuilder_ = null;
              servedFroms_ = other.servedFroms_;
              bitField0_ = (bitField0_ & ~0x00000004);
              servedFromsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getServedFromsFieldBuilder() : null;
            } else {
              servedFromsBuilder_.addAllMessages(other.servedFroms_);
            }
          }
        }
        if (other.keyspaceType_ != 0) {
          setKeyspaceTypeValue(other.getKeyspaceTypeValue());
        }
        if (!other.getBaseKeyspace().isEmpty()) {
          baseKeyspace_ = other.baseKeyspace_;
          onChanged();
        }
        if (other.hasSnapshotTime()) {
          mergeSnapshotTime(other.getSnapshotTime());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.Keyspace parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.Keyspace) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object shardingColumnName_ = "";
      /**
       * <pre>
       * name of the column used for sharding
       * empty if the keyspace is not sharded
       * </pre>
       *
       * <code>string sharding_column_name = 1;</code>
       */
      public java.lang.String getShardingColumnName() {
        java.lang.Object ref = shardingColumnName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          shardingColumnName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * name of the column used for sharding
       * empty if the keyspace is not sharded
       * </pre>
       *
       * <code>string sharding_column_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getShardingColumnNameBytes() {
        java.lang.Object ref = shardingColumnName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shardingColumnName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * name of the column used for sharding
       * empty if the keyspace is not sharded
       * </pre>
       *
       * <code>string sharding_column_name = 1;</code>
       */
      public Builder setShardingColumnName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        shardingColumnName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * name of the column used for sharding
       * empty if the keyspace is not sharded
       * </pre>
       *
       * <code>string sharding_column_name = 1;</code>
       */
      public Builder clearShardingColumnName() {
        
        shardingColumnName_ = getDefaultInstance().getShardingColumnName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * name of the column used for sharding
       * empty if the keyspace is not sharded
       * </pre>
       *
       * <code>string sharding_column_name = 1;</code>
       */
      public Builder setShardingColumnNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        shardingColumnName_ = value;
        onChanged();
        return this;
      }

      private int shardingColumnType_ = 0;
      /**
       * <pre>
       * type of the column used for sharding
       * UNSET if the keyspace is not sharded
       * </pre>
       *
       * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
       */
      public int getShardingColumnTypeValue() {
        return shardingColumnType_;
      }
      /**
       * <pre>
       * type of the column used for sharding
       * UNSET if the keyspace is not sharded
       * </pre>
       *
       * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
       */
      public Builder setShardingColumnTypeValue(int value) {
        shardingColumnType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * type of the column used for sharding
       * UNSET if the keyspace is not sharded
       * </pre>
       *
       * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyspaceIdType getShardingColumnType() {
        io.vitess.proto.Topodata.KeyspaceIdType result = io.vitess.proto.Topodata.KeyspaceIdType.valueOf(shardingColumnType_);
        return result == null ? io.vitess.proto.Topodata.KeyspaceIdType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * type of the column used for sharding
       * UNSET if the keyspace is not sharded
       * </pre>
       *
       * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
       */
      public Builder setShardingColumnType(io.vitess.proto.Topodata.KeyspaceIdType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        shardingColumnType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * type of the column used for sharding
       * UNSET if the keyspace is not sharded
       * </pre>
       *
       * <code>.topodata.KeyspaceIdType sharding_column_type = 2;</code>
       */
      public Builder clearShardingColumnType() {
        
        shardingColumnType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<io.vitess.proto.Topodata.Keyspace.ServedFrom> servedFroms_ =
        java.util.Collections.emptyList();
      private void ensureServedFromsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          servedFroms_ = new java.util.ArrayList<io.vitess.proto.Topodata.Keyspace.ServedFrom>(servedFroms_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.Keyspace.ServedFrom, io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder, io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder> servedFromsBuilder_;

      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.Keyspace.ServedFrom> getServedFromsList() {
        if (servedFromsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(servedFroms_);
        } else {
          return servedFromsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public int getServedFromsCount() {
        if (servedFromsBuilder_ == null) {
          return servedFroms_.size();
        } else {
          return servedFromsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public io.vitess.proto.Topodata.Keyspace.ServedFrom getServedFroms(int index) {
        if (servedFromsBuilder_ == null) {
          return servedFroms_.get(index);
        } else {
          return servedFromsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder setServedFroms(
          int index, io.vitess.proto.Topodata.Keyspace.ServedFrom value) {
        if (servedFromsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedFromsIsMutable();
          servedFroms_.set(index, value);
          onChanged();
        } else {
          servedFromsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder setServedFroms(
          int index, io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder builderForValue) {
        if (servedFromsBuilder_ == null) {
          ensureServedFromsIsMutable();
          servedFroms_.set(index, builderForValue.build());
          onChanged();
        } else {
          servedFromsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder addServedFroms(io.vitess.proto.Topodata.Keyspace.ServedFrom value) {
        if (servedFromsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedFromsIsMutable();
          servedFroms_.add(value);
          onChanged();
        } else {
          servedFromsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder addServedFroms(
          int index, io.vitess.proto.Topodata.Keyspace.ServedFrom value) {
        if (servedFromsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedFromsIsMutable();
          servedFroms_.add(index, value);
          onChanged();
        } else {
          servedFromsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder addServedFroms(
          io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder builderForValue) {
        if (servedFromsBuilder_ == null) {
          ensureServedFromsIsMutable();
          servedFroms_.add(builderForValue.build());
          onChanged();
        } else {
          servedFromsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder addServedFroms(
          int index, io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder builderForValue) {
        if (servedFromsBuilder_ == null) {
          ensureServedFromsIsMutable();
          servedFroms_.add(index, builderForValue.build());
          onChanged();
        } else {
          servedFromsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder addAllServedFroms(
          java.lang.Iterable<? extends io.vitess.proto.Topodata.Keyspace.ServedFrom> values) {
        if (servedFromsBuilder_ == null) {
          ensureServedFromsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, servedFroms_);
          onChanged();
        } else {
          servedFromsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder clearServedFroms() {
        if (servedFromsBuilder_ == null) {
          servedFroms_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          servedFromsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public Builder removeServedFroms(int index) {
        if (servedFromsBuilder_ == null) {
          ensureServedFromsIsMutable();
          servedFroms_.remove(index);
          onChanged();
        } else {
          servedFromsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder getServedFromsBuilder(
          int index) {
        return getServedFromsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder getServedFromsOrBuilder(
          int index) {
        if (servedFromsBuilder_ == null) {
          return servedFroms_.get(index);  } else {
          return servedFromsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder> 
           getServedFromsOrBuilderList() {
        if (servedFromsBuilder_ != null) {
          return servedFromsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(servedFroms_);
        }
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder addServedFromsBuilder() {
        return getServedFromsFieldBuilder().addBuilder(
            io.vitess.proto.Topodata.Keyspace.ServedFrom.getDefaultInstance());
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder addServedFromsBuilder(
          int index) {
        return getServedFromsFieldBuilder().addBuilder(
            index, io.vitess.proto.Topodata.Keyspace.ServedFrom.getDefaultInstance());
      }
      /**
       * <pre>
       * ServedFrom will redirect the appropriate traffic to
       * another keyspace.
       * </pre>
       *
       * <code>repeated .topodata.Keyspace.ServedFrom served_froms = 4;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder> 
           getServedFromsBuilderList() {
        return getServedFromsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.Keyspace.ServedFrom, io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder, io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder> 
          getServedFromsFieldBuilder() {
        if (servedFromsBuilder_ == null) {
          servedFromsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.vitess.proto.Topodata.Keyspace.ServedFrom, io.vitess.proto.Topodata.Keyspace.ServedFrom.Builder, io.vitess.proto.Topodata.Keyspace.ServedFromOrBuilder>(
                  servedFroms_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          servedFroms_ = null;
        }
        return servedFromsBuilder_;
      }

      private int keyspaceType_ = 0;
      /**
       * <pre>
       * keyspace_type will determine how this keyspace is treated by
       * vtgate / vschema. Normal keyspaces are routable by
       * any query. Snapshot keyspaces are only accessible
       * by explicit addresssing or by calling "use keyspace" first
       * </pre>
       *
       * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
       */
      public int getKeyspaceTypeValue() {
        return keyspaceType_;
      }
      /**
       * <pre>
       * keyspace_type will determine how this keyspace is treated by
       * vtgate / vschema. Normal keyspaces are routable by
       * any query. Snapshot keyspaces are only accessible
       * by explicit addresssing or by calling "use keyspace" first
       * </pre>
       *
       * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
       */
      public Builder setKeyspaceTypeValue(int value) {
        keyspaceType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * keyspace_type will determine how this keyspace is treated by
       * vtgate / vschema. Normal keyspaces are routable by
       * any query. Snapshot keyspaces are only accessible
       * by explicit addresssing or by calling "use keyspace" first
       * </pre>
       *
       * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
       */
      public io.vitess.proto.Topodata.KeyspaceType getKeyspaceType() {
        io.vitess.proto.Topodata.KeyspaceType result = io.vitess.proto.Topodata.KeyspaceType.valueOf(keyspaceType_);
        return result == null ? io.vitess.proto.Topodata.KeyspaceType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * keyspace_type will determine how this keyspace is treated by
       * vtgate / vschema. Normal keyspaces are routable by
       * any query. Snapshot keyspaces are only accessible
       * by explicit addresssing or by calling "use keyspace" first
       * </pre>
       *
       * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
       */
      public Builder setKeyspaceType(io.vitess.proto.Topodata.KeyspaceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        keyspaceType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * keyspace_type will determine how this keyspace is treated by
       * vtgate / vschema. Normal keyspaces are routable by
       * any query. Snapshot keyspaces are only accessible
       * by explicit addresssing or by calling "use keyspace" first
       * </pre>
       *
       * <code>.topodata.KeyspaceType keyspace_type = 5;</code>
       */
      public Builder clearKeyspaceType() {
        
        keyspaceType_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object baseKeyspace_ = "";
      /**
       * <pre>
       * base_keyspace is the base keyspace from which a snapshot
       * keyspace is created. empty for normal keyspaces
       * </pre>
       *
       * <code>string base_keyspace = 6;</code>
       */
      public java.lang.String getBaseKeyspace() {
        java.lang.Object ref = baseKeyspace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          baseKeyspace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * base_keyspace is the base keyspace from which a snapshot
       * keyspace is created. empty for normal keyspaces
       * </pre>
       *
       * <code>string base_keyspace = 6;</code>
       */
      public com.google.protobuf.ByteString
          getBaseKeyspaceBytes() {
        java.lang.Object ref = baseKeyspace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          baseKeyspace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * base_keyspace is the base keyspace from which a snapshot
       * keyspace is created. empty for normal keyspaces
       * </pre>
       *
       * <code>string base_keyspace = 6;</code>
       */
      public Builder setBaseKeyspace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        baseKeyspace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * base_keyspace is the base keyspace from which a snapshot
       * keyspace is created. empty for normal keyspaces
       * </pre>
       *
       * <code>string base_keyspace = 6;</code>
       */
      public Builder clearBaseKeyspace() {
        
        baseKeyspace_ = getDefaultInstance().getBaseKeyspace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * base_keyspace is the base keyspace from which a snapshot
       * keyspace is created. empty for normal keyspaces
       * </pre>
       *
       * <code>string base_keyspace = 6;</code>
       */
      public Builder setBaseKeyspaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        baseKeyspace_ = value;
        onChanged();
        return this;
      }

      private vttime.Vttime.Time snapshotTime_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder> snapshotTimeBuilder_;
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      public boolean hasSnapshotTime() {
        return snapshotTimeBuilder_ != null || snapshotTime_ != null;
      }
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      public vttime.Vttime.Time getSnapshotTime() {
        if (snapshotTimeBuilder_ == null) {
          return snapshotTime_ == null ? vttime.Vttime.Time.getDefaultInstance() : snapshotTime_;
        } else {
          return snapshotTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      public Builder setSnapshotTime(vttime.Vttime.Time value) {
        if (snapshotTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          snapshotTime_ = value;
          onChanged();
        } else {
          snapshotTimeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      public Builder setSnapshotTime(
          vttime.Vttime.Time.Builder builderForValue) {
        if (snapshotTimeBuilder_ == null) {
          snapshotTime_ = builderForValue.build();
          onChanged();
        } else {
          snapshotTimeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      public Builder mergeSnapshotTime(vttime.Vttime.Time value) {
        if (snapshotTimeBuilder_ == null) {
          if (snapshotTime_ != null) {
            snapshotTime_ =
              vttime.Vttime.Time.newBuilder(snapshotTime_).mergeFrom(value).buildPartial();
          } else {
            snapshotTime_ = value;
          }
          onChanged();
        } else {
          snapshotTimeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      public Builder clearSnapshotTime() {
        if (snapshotTimeBuilder_ == null) {
          snapshotTime_ = null;
          onChanged();
        } else {
          snapshotTime_ = null;
          snapshotTimeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      public vttime.Vttime.Time.Builder getSnapshotTimeBuilder() {
        
        onChanged();
        return getSnapshotTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      public vttime.Vttime.TimeOrBuilder getSnapshotTimeOrBuilder() {
        if (snapshotTimeBuilder_ != null) {
          return snapshotTimeBuilder_.getMessageOrBuilder();
        } else {
          return snapshotTime_ == null ?
              vttime.Vttime.Time.getDefaultInstance() : snapshotTime_;
        }
      }
      /**
       * <pre>
       * snapshot_time (in UTC) is a property of snapshot
       * keyspaces which tells us what point in time
       * the snapshot is of
       * </pre>
       *
       * <code>.vttime.Time snapshot_time = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder> 
          getSnapshotTimeFieldBuilder() {
        if (snapshotTimeBuilder_ == null) {
          snapshotTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              vttime.Vttime.Time, vttime.Vttime.Time.Builder, vttime.Vttime.TimeOrBuilder>(
                  getSnapshotTime(),
                  getParentForChildren(),
                  isClean());
          snapshotTime_ = null;
        }
        return snapshotTimeBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.Keyspace)
    }

    // @@protoc_insertion_point(class_scope:topodata.Keyspace)
    private static final io.vitess.proto.Topodata.Keyspace DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.Keyspace();
    }

    public static io.vitess.proto.Topodata.Keyspace getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Keyspace>
        PARSER = new com.google.protobuf.AbstractParser<Keyspace>() {
      public Keyspace parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Keyspace(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Keyspace> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Keyspace> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.Keyspace getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ShardReplicationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.ShardReplication)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    java.util.List<io.vitess.proto.Topodata.ShardReplication.Node> 
        getNodesList();
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    io.vitess.proto.Topodata.ShardReplication.Node getNodes(int index);
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    int getNodesCount();
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    java.util.List<? extends io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder> 
        getNodesOrBuilderList();
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder getNodesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * ShardReplication describes the MySQL replication relationships
   * whithin a cell.
   * </pre>
   *
   * Protobuf type {@code topodata.ShardReplication}
   */
  public  static final class ShardReplication extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.ShardReplication)
      ShardReplicationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ShardReplication.newBuilder() to construct.
    private ShardReplication(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ShardReplication() {
      nodes_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ShardReplication(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                nodes_ = new java.util.ArrayList<io.vitess.proto.Topodata.ShardReplication.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              nodes_.add(
                  input.readMessage(io.vitess.proto.Topodata.ShardReplication.Node.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          nodes_ = java.util.Collections.unmodifiableList(nodes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.ShardReplication.class, io.vitess.proto.Topodata.ShardReplication.Builder.class);
    }

    public interface NodeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:topodata.ShardReplication.Node)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.topodata.TabletAlias tablet_alias = 1;</code>
       */
      boolean hasTabletAlias();
      /**
       * <code>.topodata.TabletAlias tablet_alias = 1;</code>
       */
      io.vitess.proto.Topodata.TabletAlias getTabletAlias();
      /**
       * <code>.topodata.TabletAlias tablet_alias = 1;</code>
       */
      io.vitess.proto.Topodata.TabletAliasOrBuilder getTabletAliasOrBuilder();
    }
    /**
     * <pre>
     * Node describes a tablet instance within the cell
     * </pre>
     *
     * Protobuf type {@code topodata.ShardReplication.Node}
     */
    public  static final class Node extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:topodata.ShardReplication.Node)
        NodeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Node.newBuilder() to construct.
      private Node(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Node() {
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Node(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                io.vitess.proto.Topodata.TabletAlias.Builder subBuilder = null;
                if (tabletAlias_ != null) {
                  subBuilder = tabletAlias_.toBuilder();
                }
                tabletAlias_ = input.readMessage(io.vitess.proto.Topodata.TabletAlias.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(tabletAlias_);
                  tabletAlias_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_Node_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_Node_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.ShardReplication.Node.class, io.vitess.proto.Topodata.ShardReplication.Node.Builder.class);
      }

      public static final int TABLET_ALIAS_FIELD_NUMBER = 1;
      private io.vitess.proto.Topodata.TabletAlias tabletAlias_;
      /**
       * <code>.topodata.TabletAlias tablet_alias = 1;</code>
       */
      public boolean hasTabletAlias() {
        return tabletAlias_ != null;
      }
      /**
       * <code>.topodata.TabletAlias tablet_alias = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletAlias getTabletAlias() {
        return tabletAlias_ == null ? io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : tabletAlias_;
      }
      /**
       * <code>.topodata.TabletAlias tablet_alias = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletAliasOrBuilder getTabletAliasOrBuilder() {
        return getTabletAlias();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (tabletAlias_ != null) {
          output.writeMessage(1, getTabletAlias());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (tabletAlias_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getTabletAlias());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.vitess.proto.Topodata.ShardReplication.Node)) {
          return super.equals(obj);
        }
        io.vitess.proto.Topodata.ShardReplication.Node other = (io.vitess.proto.Topodata.ShardReplication.Node) obj;

        boolean result = true;
        result = result && (hasTabletAlias() == other.hasTabletAlias());
        if (hasTabletAlias()) {
          result = result && getTabletAlias()
              .equals(other.getTabletAlias());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasTabletAlias()) {
          hash = (37 * hash) + TABLET_ALIAS_FIELD_NUMBER;
          hash = (53 * hash) + getTabletAlias().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.ShardReplication.Node parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.vitess.proto.Topodata.ShardReplication.Node prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Node describes a tablet instance within the cell
       * </pre>
       *
       * Protobuf type {@code topodata.ShardReplication.Node}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:topodata.ShardReplication.Node)
          io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_Node_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_Node_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.vitess.proto.Topodata.ShardReplication.Node.class, io.vitess.proto.Topodata.ShardReplication.Node.Builder.class);
        }

        // Construct using io.vitess.proto.Topodata.ShardReplication.Node.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          if (tabletAliasBuilder_ == null) {
            tabletAlias_ = null;
          } else {
            tabletAlias_ = null;
            tabletAliasBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_Node_descriptor;
        }

        public io.vitess.proto.Topodata.ShardReplication.Node getDefaultInstanceForType() {
          return io.vitess.proto.Topodata.ShardReplication.Node.getDefaultInstance();
        }

        public io.vitess.proto.Topodata.ShardReplication.Node build() {
          io.vitess.proto.Topodata.ShardReplication.Node result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.vitess.proto.Topodata.ShardReplication.Node buildPartial() {
          io.vitess.proto.Topodata.ShardReplication.Node result = new io.vitess.proto.Topodata.ShardReplication.Node(this);
          if (tabletAliasBuilder_ == null) {
            result.tabletAlias_ = tabletAlias_;
          } else {
            result.tabletAlias_ = tabletAliasBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.vitess.proto.Topodata.ShardReplication.Node) {
            return mergeFrom((io.vitess.proto.Topodata.ShardReplication.Node)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.vitess.proto.Topodata.ShardReplication.Node other) {
          if (other == io.vitess.proto.Topodata.ShardReplication.Node.getDefaultInstance()) return this;
          if (other.hasTabletAlias()) {
            mergeTabletAlias(other.getTabletAlias());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.vitess.proto.Topodata.ShardReplication.Node parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.vitess.proto.Topodata.ShardReplication.Node) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private io.vitess.proto.Topodata.TabletAlias tabletAlias_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder> tabletAliasBuilder_;
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        public boolean hasTabletAlias() {
          return tabletAliasBuilder_ != null || tabletAlias_ != null;
        }
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        public io.vitess.proto.Topodata.TabletAlias getTabletAlias() {
          if (tabletAliasBuilder_ == null) {
            return tabletAlias_ == null ? io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : tabletAlias_;
          } else {
            return tabletAliasBuilder_.getMessage();
          }
        }
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        public Builder setTabletAlias(io.vitess.proto.Topodata.TabletAlias value) {
          if (tabletAliasBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            tabletAlias_ = value;
            onChanged();
          } else {
            tabletAliasBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        public Builder setTabletAlias(
            io.vitess.proto.Topodata.TabletAlias.Builder builderForValue) {
          if (tabletAliasBuilder_ == null) {
            tabletAlias_ = builderForValue.build();
            onChanged();
          } else {
            tabletAliasBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        public Builder mergeTabletAlias(io.vitess.proto.Topodata.TabletAlias value) {
          if (tabletAliasBuilder_ == null) {
            if (tabletAlias_ != null) {
              tabletAlias_ =
                io.vitess.proto.Topodata.TabletAlias.newBuilder(tabletAlias_).mergeFrom(value).buildPartial();
            } else {
              tabletAlias_ = value;
            }
            onChanged();
          } else {
            tabletAliasBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        public Builder clearTabletAlias() {
          if (tabletAliasBuilder_ == null) {
            tabletAlias_ = null;
            onChanged();
          } else {
            tabletAlias_ = null;
            tabletAliasBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        public io.vitess.proto.Topodata.TabletAlias.Builder getTabletAliasBuilder() {
          
          onChanged();
          return getTabletAliasFieldBuilder().getBuilder();
        }
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        public io.vitess.proto.Topodata.TabletAliasOrBuilder getTabletAliasOrBuilder() {
          if (tabletAliasBuilder_ != null) {
            return tabletAliasBuilder_.getMessageOrBuilder();
          } else {
            return tabletAlias_ == null ?
                io.vitess.proto.Topodata.TabletAlias.getDefaultInstance() : tabletAlias_;
          }
        }
        /**
         * <code>.topodata.TabletAlias tablet_alias = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder> 
            getTabletAliasFieldBuilder() {
          if (tabletAliasBuilder_ == null) {
            tabletAliasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                io.vitess.proto.Topodata.TabletAlias, io.vitess.proto.Topodata.TabletAlias.Builder, io.vitess.proto.Topodata.TabletAliasOrBuilder>(
                    getTabletAlias(),
                    getParentForChildren(),
                    isClean());
            tabletAlias_ = null;
          }
          return tabletAliasBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:topodata.ShardReplication.Node)
      }

      // @@protoc_insertion_point(class_scope:topodata.ShardReplication.Node)
      private static final io.vitess.proto.Topodata.ShardReplication.Node DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.vitess.proto.Topodata.ShardReplication.Node();
      }

      public static io.vitess.proto.Topodata.ShardReplication.Node getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Node>
          PARSER = new com.google.protobuf.AbstractParser<Node>() {
        public Node parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Node(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Node> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Node> getParserForType() {
        return PARSER;
      }

      public io.vitess.proto.Topodata.ShardReplication.Node getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int NODES_FIELD_NUMBER = 1;
    private java.util.List<io.vitess.proto.Topodata.ShardReplication.Node> nodes_;
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    public java.util.List<io.vitess.proto.Topodata.ShardReplication.Node> getNodesList() {
      return nodes_;
    }
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    public java.util.List<? extends io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder> 
        getNodesOrBuilderList() {
      return nodes_;
    }
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    public int getNodesCount() {
      return nodes_.size();
    }
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    public io.vitess.proto.Topodata.ShardReplication.Node getNodes(int index) {
      return nodes_.get(index);
    }
    /**
     * <pre>
     * Note there can be only one Node in this array
     * for a given tablet.
     * </pre>
     *
     * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
     */
    public io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder getNodesOrBuilder(
        int index) {
      return nodes_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < nodes_.size(); i++) {
        output.writeMessage(1, nodes_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < nodes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, nodes_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.ShardReplication)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.ShardReplication other = (io.vitess.proto.Topodata.ShardReplication) obj;

      boolean result = true;
      result = result && getNodesList()
          .equals(other.getNodesList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getNodesCount() > 0) {
        hash = (37 * hash) + NODES_FIELD_NUMBER;
        hash = (53 * hash) + getNodesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.ShardReplication parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardReplication parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.ShardReplication prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ShardReplication describes the MySQL replication relationships
     * whithin a cell.
     * </pre>
     *
     * Protobuf type {@code topodata.ShardReplication}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.ShardReplication)
        io.vitess.proto.Topodata.ShardReplicationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.ShardReplication.class, io.vitess.proto.Topodata.ShardReplication.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.ShardReplication.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getNodesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (nodesBuilder_ == null) {
          nodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          nodesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardReplication_descriptor;
      }

      public io.vitess.proto.Topodata.ShardReplication getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.ShardReplication.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.ShardReplication build() {
        io.vitess.proto.Topodata.ShardReplication result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.ShardReplication buildPartial() {
        io.vitess.proto.Topodata.ShardReplication result = new io.vitess.proto.Topodata.ShardReplication(this);
        int from_bitField0_ = bitField0_;
        if (nodesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            nodes_ = java.util.Collections.unmodifiableList(nodes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.nodes_ = nodes_;
        } else {
          result.nodes_ = nodesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.ShardReplication) {
          return mergeFrom((io.vitess.proto.Topodata.ShardReplication)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.ShardReplication other) {
        if (other == io.vitess.proto.Topodata.ShardReplication.getDefaultInstance()) return this;
        if (nodesBuilder_ == null) {
          if (!other.nodes_.isEmpty()) {
            if (nodes_.isEmpty()) {
              nodes_ = other.nodes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureNodesIsMutable();
              nodes_.addAll(other.nodes_);
            }
            onChanged();
          }
        } else {
          if (!other.nodes_.isEmpty()) {
            if (nodesBuilder_.isEmpty()) {
              nodesBuilder_.dispose();
              nodesBuilder_ = null;
              nodes_ = other.nodes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              nodesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNodesFieldBuilder() : null;
            } else {
              nodesBuilder_.addAllMessages(other.nodes_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.ShardReplication parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.ShardReplication) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.vitess.proto.Topodata.ShardReplication.Node> nodes_ =
        java.util.Collections.emptyList();
      private void ensureNodesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          nodes_ = new java.util.ArrayList<io.vitess.proto.Topodata.ShardReplication.Node>(nodes_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.ShardReplication.Node, io.vitess.proto.Topodata.ShardReplication.Node.Builder, io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder> nodesBuilder_;

      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.ShardReplication.Node> getNodesList() {
        if (nodesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(nodes_);
        } else {
          return nodesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public int getNodesCount() {
        if (nodesBuilder_ == null) {
          return nodes_.size();
        } else {
          return nodesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public io.vitess.proto.Topodata.ShardReplication.Node getNodes(int index) {
        if (nodesBuilder_ == null) {
          return nodes_.get(index);
        } else {
          return nodesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder setNodes(
          int index, io.vitess.proto.Topodata.ShardReplication.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.set(index, value);
          onChanged();
        } else {
          nodesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder setNodes(
          int index, io.vitess.proto.Topodata.ShardReplication.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.set(index, builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder addNodes(io.vitess.proto.Topodata.ShardReplication.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.add(value);
          onChanged();
        } else {
          nodesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder addNodes(
          int index, io.vitess.proto.Topodata.ShardReplication.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.add(index, value);
          onChanged();
        } else {
          nodesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder addNodes(
          io.vitess.proto.Topodata.ShardReplication.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.add(builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder addNodes(
          int index, io.vitess.proto.Topodata.ShardReplication.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.add(index, builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder addAllNodes(
          java.lang.Iterable<? extends io.vitess.proto.Topodata.ShardReplication.Node> values) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, nodes_);
          onChanged();
        } else {
          nodesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder clearNodes() {
        if (nodesBuilder_ == null) {
          nodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          nodesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public Builder removeNodes(int index) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.remove(index);
          onChanged();
        } else {
          nodesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public io.vitess.proto.Topodata.ShardReplication.Node.Builder getNodesBuilder(
          int index) {
        return getNodesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder getNodesOrBuilder(
          int index) {
        if (nodesBuilder_ == null) {
          return nodes_.get(index);  } else {
          return nodesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder> 
           getNodesOrBuilderList() {
        if (nodesBuilder_ != null) {
          return nodesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(nodes_);
        }
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public io.vitess.proto.Topodata.ShardReplication.Node.Builder addNodesBuilder() {
        return getNodesFieldBuilder().addBuilder(
            io.vitess.proto.Topodata.ShardReplication.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public io.vitess.proto.Topodata.ShardReplication.Node.Builder addNodesBuilder(
          int index) {
        return getNodesFieldBuilder().addBuilder(
            index, io.vitess.proto.Topodata.ShardReplication.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * Note there can be only one Node in this array
       * for a given tablet.
       * </pre>
       *
       * <code>repeated .topodata.ShardReplication.Node nodes = 1;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.ShardReplication.Node.Builder> 
           getNodesBuilderList() {
        return getNodesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.ShardReplication.Node, io.vitess.proto.Topodata.ShardReplication.Node.Builder, io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder> 
          getNodesFieldBuilder() {
        if (nodesBuilder_ == null) {
          nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.vitess.proto.Topodata.ShardReplication.Node, io.vitess.proto.Topodata.ShardReplication.Node.Builder, io.vitess.proto.Topodata.ShardReplication.NodeOrBuilder>(
                  nodes_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          nodes_ = null;
        }
        return nodesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.ShardReplication)
    }

    // @@protoc_insertion_point(class_scope:topodata.ShardReplication)
    private static final io.vitess.proto.Topodata.ShardReplication DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.ShardReplication();
    }

    public static io.vitess.proto.Topodata.ShardReplication getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ShardReplication>
        PARSER = new com.google.protobuf.AbstractParser<ShardReplication>() {
      public ShardReplication parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ShardReplication(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ShardReplication> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ShardReplication> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.ShardReplication getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ShardReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.ShardReference)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Copied from Shard.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Copied from Shard.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Disable query serving in this shard
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    boolean hasKeyRange();
    /**
     * <pre>
     * Disable query serving in this shard
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    io.vitess.proto.Topodata.KeyRange getKeyRange();
    /**
     * <pre>
     * Disable query serving in this shard
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder();
  }
  /**
   * <pre>
   * ShardReference is used as a pointer from a SrvKeyspace to a Shard
   * </pre>
   *
   * Protobuf type {@code topodata.ShardReference}
   */
  public  static final class ShardReference extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.ShardReference)
      ShardReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ShardReference.newBuilder() to construct.
    private ShardReference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ShardReference() {
      name_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ShardReference(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              io.vitess.proto.Topodata.KeyRange.Builder subBuilder = null;
              if (keyRange_ != null) {
                subBuilder = keyRange_.toBuilder();
              }
              keyRange_ = input.readMessage(io.vitess.proto.Topodata.KeyRange.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keyRange_);
                keyRange_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_ShardReference_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_ShardReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.ShardReference.class, io.vitess.proto.Topodata.ShardReference.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Copied from Shard.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Copied from Shard.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEY_RANGE_FIELD_NUMBER = 2;
    private io.vitess.proto.Topodata.KeyRange keyRange_;
    /**
     * <pre>
     * Disable query serving in this shard
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public boolean hasKeyRange() {
      return keyRange_ != null;
    }
    /**
     * <pre>
     * Disable query serving in this shard
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public io.vitess.proto.Topodata.KeyRange getKeyRange() {
      return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
    }
    /**
     * <pre>
     * Disable query serving in this shard
     * </pre>
     *
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
      return getKeyRange();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (keyRange_ != null) {
        output.writeMessage(2, getKeyRange());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (keyRange_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getKeyRange());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.ShardReference)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.ShardReference other = (io.vitess.proto.Topodata.ShardReference) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && (hasKeyRange() == other.hasKeyRange());
      if (hasKeyRange()) {
        result = result && getKeyRange()
            .equals(other.getKeyRange());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasKeyRange()) {
        hash = (37 * hash) + KEY_RANGE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyRange().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.ShardReference parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardReference parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardReference parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.ShardReference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ShardReference is used as a pointer from a SrvKeyspace to a Shard
     * </pre>
     *
     * Protobuf type {@code topodata.ShardReference}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.ShardReference)
        io.vitess.proto.Topodata.ShardReferenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardReference_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.ShardReference.class, io.vitess.proto.Topodata.ShardReference.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.ShardReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        if (keyRangeBuilder_ == null) {
          keyRange_ = null;
        } else {
          keyRange_ = null;
          keyRangeBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardReference_descriptor;
      }

      public io.vitess.proto.Topodata.ShardReference getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.ShardReference.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.ShardReference build() {
        io.vitess.proto.Topodata.ShardReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.ShardReference buildPartial() {
        io.vitess.proto.Topodata.ShardReference result = new io.vitess.proto.Topodata.ShardReference(this);
        result.name_ = name_;
        if (keyRangeBuilder_ == null) {
          result.keyRange_ = keyRange_;
        } else {
          result.keyRange_ = keyRangeBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.ShardReference) {
          return mergeFrom((io.vitess.proto.Topodata.ShardReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.ShardReference other) {
        if (other == io.vitess.proto.Topodata.ShardReference.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.hasKeyRange()) {
          mergeKeyRange(other.getKeyRange());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.ShardReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.ShardReference) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private io.vitess.proto.Topodata.KeyRange keyRange_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> keyRangeBuilder_;
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public boolean hasKeyRange() {
        return keyRangeBuilder_ != null || keyRange_ != null;
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRange getKeyRange() {
        if (keyRangeBuilder_ == null) {
          return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
        } else {
          return keyRangeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder setKeyRange(io.vitess.proto.Topodata.KeyRange value) {
        if (keyRangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyRange_ = value;
          onChanged();
        } else {
          keyRangeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder setKeyRange(
          io.vitess.proto.Topodata.KeyRange.Builder builderForValue) {
        if (keyRangeBuilder_ == null) {
          keyRange_ = builderForValue.build();
          onChanged();
        } else {
          keyRangeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder mergeKeyRange(io.vitess.proto.Topodata.KeyRange value) {
        if (keyRangeBuilder_ == null) {
          if (keyRange_ != null) {
            keyRange_ =
              io.vitess.proto.Topodata.KeyRange.newBuilder(keyRange_).mergeFrom(value).buildPartial();
          } else {
            keyRange_ = value;
          }
          onChanged();
        } else {
          keyRangeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder clearKeyRange() {
        if (keyRangeBuilder_ == null) {
          keyRange_ = null;
          onChanged();
        } else {
          keyRange_ = null;
          keyRangeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRange.Builder getKeyRangeBuilder() {
        
        onChanged();
        return getKeyRangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
        if (keyRangeBuilder_ != null) {
          return keyRangeBuilder_.getMessageOrBuilder();
        } else {
          return keyRange_ == null ?
              io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
        }
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> 
          getKeyRangeFieldBuilder() {
        if (keyRangeBuilder_ == null) {
          keyRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder>(
                  getKeyRange(),
                  getParentForChildren(),
                  isClean());
          keyRange_ = null;
        }
        return keyRangeBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.ShardReference)
    }

    // @@protoc_insertion_point(class_scope:topodata.ShardReference)
    private static final io.vitess.proto.Topodata.ShardReference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.ShardReference();
    }

    public static io.vitess.proto.Topodata.ShardReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ShardReference>
        PARSER = new com.google.protobuf.AbstractParser<ShardReference>() {
      public ShardReference parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ShardReference(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ShardReference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ShardReference> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.ShardReference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ShardTabletControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.ShardTabletControl)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Copied from Shard.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Copied from Shard.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    boolean hasKeyRange();
    /**
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    io.vitess.proto.Topodata.KeyRange getKeyRange();
    /**
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder();

    /**
     * <pre>
     * Disable query serving in this shard
     * </pre>
     *
     * <code>bool query_service_disabled = 3;</code>
     */
    boolean getQueryServiceDisabled();
  }
  /**
   * <pre>
   * ShardTabletControl is used as a pointer from a SrvKeyspace to a Shard
   * </pre>
   *
   * Protobuf type {@code topodata.ShardTabletControl}
   */
  public  static final class ShardTabletControl extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.ShardTabletControl)
      ShardTabletControlOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ShardTabletControl.newBuilder() to construct.
    private ShardTabletControl(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ShardTabletControl() {
      name_ = "";
      queryServiceDisabled_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ShardTabletControl(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              io.vitess.proto.Topodata.KeyRange.Builder subBuilder = null;
              if (keyRange_ != null) {
                subBuilder = keyRange_.toBuilder();
              }
              keyRange_ = input.readMessage(io.vitess.proto.Topodata.KeyRange.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keyRange_);
                keyRange_ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {

              queryServiceDisabled_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_ShardTabletControl_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_ShardTabletControl_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.ShardTabletControl.class, io.vitess.proto.Topodata.ShardTabletControl.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Copied from Shard.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Copied from Shard.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEY_RANGE_FIELD_NUMBER = 2;
    private io.vitess.proto.Topodata.KeyRange keyRange_;
    /**
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public boolean hasKeyRange() {
      return keyRange_ != null;
    }
    /**
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public io.vitess.proto.Topodata.KeyRange getKeyRange() {
      return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
    }
    /**
     * <code>.topodata.KeyRange key_range = 2;</code>
     */
    public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
      return getKeyRange();
    }

    public static final int QUERY_SERVICE_DISABLED_FIELD_NUMBER = 3;
    private boolean queryServiceDisabled_;
    /**
     * <pre>
     * Disable query serving in this shard
     * </pre>
     *
     * <code>bool query_service_disabled = 3;</code>
     */
    public boolean getQueryServiceDisabled() {
      return queryServiceDisabled_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (keyRange_ != null) {
        output.writeMessage(2, getKeyRange());
      }
      if (queryServiceDisabled_ != false) {
        output.writeBool(3, queryServiceDisabled_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (keyRange_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getKeyRange());
      }
      if (queryServiceDisabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, queryServiceDisabled_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.ShardTabletControl)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.ShardTabletControl other = (io.vitess.proto.Topodata.ShardTabletControl) obj;

      boolean result = true;
      result = result && getName()
          .equals(other.getName());
      result = result && (hasKeyRange() == other.hasKeyRange());
      if (hasKeyRange()) {
        result = result && getKeyRange()
            .equals(other.getKeyRange());
      }
      result = result && (getQueryServiceDisabled()
          == other.getQueryServiceDisabled());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasKeyRange()) {
        hash = (37 * hash) + KEY_RANGE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyRange().hashCode();
      }
      hash = (37 * hash) + QUERY_SERVICE_DISABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getQueryServiceDisabled());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.ShardTabletControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.ShardTabletControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ShardTabletControl is used as a pointer from a SrvKeyspace to a Shard
     * </pre>
     *
     * Protobuf type {@code topodata.ShardTabletControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.ShardTabletControl)
        io.vitess.proto.Topodata.ShardTabletControlOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardTabletControl_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardTabletControl_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.ShardTabletControl.class, io.vitess.proto.Topodata.ShardTabletControl.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.ShardTabletControl.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";

        if (keyRangeBuilder_ == null) {
          keyRange_ = null;
        } else {
          keyRange_ = null;
          keyRangeBuilder_ = null;
        }
        queryServiceDisabled_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_ShardTabletControl_descriptor;
      }

      public io.vitess.proto.Topodata.ShardTabletControl getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.ShardTabletControl.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.ShardTabletControl build() {
        io.vitess.proto.Topodata.ShardTabletControl result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.ShardTabletControl buildPartial() {
        io.vitess.proto.Topodata.ShardTabletControl result = new io.vitess.proto.Topodata.ShardTabletControl(this);
        result.name_ = name_;
        if (keyRangeBuilder_ == null) {
          result.keyRange_ = keyRange_;
        } else {
          result.keyRange_ = keyRangeBuilder_.build();
        }
        result.queryServiceDisabled_ = queryServiceDisabled_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.ShardTabletControl) {
          return mergeFrom((io.vitess.proto.Topodata.ShardTabletControl)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.ShardTabletControl other) {
        if (other == io.vitess.proto.Topodata.ShardTabletControl.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.hasKeyRange()) {
          mergeKeyRange(other.getKeyRange());
        }
        if (other.getQueryServiceDisabled() != false) {
          setQueryServiceDisabled(other.getQueryServiceDisabled());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.ShardTabletControl parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.ShardTabletControl) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Copied from Shard.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private io.vitess.proto.Topodata.KeyRange keyRange_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> keyRangeBuilder_;
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public boolean hasKeyRange() {
        return keyRangeBuilder_ != null || keyRange_ != null;
      }
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRange getKeyRange() {
        if (keyRangeBuilder_ == null) {
          return keyRange_ == null ? io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
        } else {
          return keyRangeBuilder_.getMessage();
        }
      }
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder setKeyRange(io.vitess.proto.Topodata.KeyRange value) {
        if (keyRangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyRange_ = value;
          onChanged();
        } else {
          keyRangeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder setKeyRange(
          io.vitess.proto.Topodata.KeyRange.Builder builderForValue) {
        if (keyRangeBuilder_ == null) {
          keyRange_ = builderForValue.build();
          onChanged();
        } else {
          keyRangeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder mergeKeyRange(io.vitess.proto.Topodata.KeyRange value) {
        if (keyRangeBuilder_ == null) {
          if (keyRange_ != null) {
            keyRange_ =
              io.vitess.proto.Topodata.KeyRange.newBuilder(keyRange_).mergeFrom(value).buildPartial();
          } else {
            keyRange_ = value;
          }
          onChanged();
        } else {
          keyRangeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public Builder clearKeyRange() {
        if (keyRangeBuilder_ == null) {
          keyRange_ = null;
          onChanged();
        } else {
          keyRange_ = null;
          keyRangeBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRange.Builder getKeyRangeBuilder() {
        
        onChanged();
        return getKeyRangeFieldBuilder().getBuilder();
      }
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      public io.vitess.proto.Topodata.KeyRangeOrBuilder getKeyRangeOrBuilder() {
        if (keyRangeBuilder_ != null) {
          return keyRangeBuilder_.getMessageOrBuilder();
        } else {
          return keyRange_ == null ?
              io.vitess.proto.Topodata.KeyRange.getDefaultInstance() : keyRange_;
        }
      }
      /**
       * <code>.topodata.KeyRange key_range = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder> 
          getKeyRangeFieldBuilder() {
        if (keyRangeBuilder_ == null) {
          keyRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.vitess.proto.Topodata.KeyRange, io.vitess.proto.Topodata.KeyRange.Builder, io.vitess.proto.Topodata.KeyRangeOrBuilder>(
                  getKeyRange(),
                  getParentForChildren(),
                  isClean());
          keyRange_ = null;
        }
        return keyRangeBuilder_;
      }

      private boolean queryServiceDisabled_ ;
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>bool query_service_disabled = 3;</code>
       */
      public boolean getQueryServiceDisabled() {
        return queryServiceDisabled_;
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>bool query_service_disabled = 3;</code>
       */
      public Builder setQueryServiceDisabled(boolean value) {
        
        queryServiceDisabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Disable query serving in this shard
       * </pre>
       *
       * <code>bool query_service_disabled = 3;</code>
       */
      public Builder clearQueryServiceDisabled() {
        
        queryServiceDisabled_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.ShardTabletControl)
    }

    // @@protoc_insertion_point(class_scope:topodata.ShardTabletControl)
    private static final io.vitess.proto.Topodata.ShardTabletControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.ShardTabletControl();
    }

    public static io.vitess.proto.Topodata.ShardTabletControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ShardTabletControl>
        PARSER = new com.google.protobuf.AbstractParser<ShardTabletControl>() {
      public ShardTabletControl parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ShardTabletControl(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ShardTabletControl> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ShardTabletControl> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.ShardTabletControl getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SrvKeyspaceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.SrvKeyspace)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    java.util.List<io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition> 
        getPartitionsList();
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition getPartitions(int index);
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    int getPartitionsCount();
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    java.util.List<? extends io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder> 
        getPartitionsOrBuilderList();
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder getPartitionsOrBuilder(
        int index);

    /**
     * <pre>
     * copied from Keyspace
     * </pre>
     *
     * <code>string sharding_column_name = 2;</code>
     */
    java.lang.String getShardingColumnName();
    /**
     * <pre>
     * copied from Keyspace
     * </pre>
     *
     * <code>string sharding_column_name = 2;</code>
     */
    com.google.protobuf.ByteString
        getShardingColumnNameBytes();

    /**
     * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
     */
    int getShardingColumnTypeValue();
    /**
     * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
     */
    io.vitess.proto.Topodata.KeyspaceIdType getShardingColumnType();

    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    java.util.List<io.vitess.proto.Topodata.SrvKeyspace.ServedFrom> 
        getServedFromList();
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    io.vitess.proto.Topodata.SrvKeyspace.ServedFrom getServedFrom(int index);
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    int getServedFromCount();
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    java.util.List<? extends io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder> 
        getServedFromOrBuilderList();
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder getServedFromOrBuilder(
        int index);
  }
  /**
   * <pre>
   * SrvKeyspace is a rollup node for the keyspace itself.
   * </pre>
   *
   * Protobuf type {@code topodata.SrvKeyspace}
   */
  public  static final class SrvKeyspace extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.SrvKeyspace)
      SrvKeyspaceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SrvKeyspace.newBuilder() to construct.
    private SrvKeyspace(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SrvKeyspace() {
      partitions_ = java.util.Collections.emptyList();
      shardingColumnName_ = "";
      shardingColumnType_ = 0;
      servedFrom_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SrvKeyspace(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                partitions_ = new java.util.ArrayList<io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition>();
                mutable_bitField0_ |= 0x00000001;
              }
              partitions_.add(
                  input.readMessage(io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              shardingColumnName_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              shardingColumnType_ = rawValue;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                servedFrom_ = new java.util.ArrayList<io.vitess.proto.Topodata.SrvKeyspace.ServedFrom>();
                mutable_bitField0_ |= 0x00000008;
              }
              servedFrom_.add(
                  input.readMessage(io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          partitions_ = java.util.Collections.unmodifiableList(partitions_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          servedFrom_ = java.util.Collections.unmodifiableList(servedFrom_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.SrvKeyspace.class, io.vitess.proto.Topodata.SrvKeyspace.Builder.class);
    }

    public interface KeyspacePartitionOrBuilder extends
        // @@protoc_insertion_point(interface_extends:topodata.SrvKeyspace.KeyspacePartition)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The type this partition applies to.
       * </pre>
       *
       * <code>.topodata.TabletType served_type = 1;</code>
       */
      int getServedTypeValue();
      /**
       * <pre>
       * The type this partition applies to.
       * </pre>
       *
       * <code>.topodata.TabletType served_type = 1;</code>
       */
      io.vitess.proto.Topodata.TabletType getServedType();

      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      java.util.List<io.vitess.proto.Topodata.ShardReference> 
          getShardReferencesList();
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      io.vitess.proto.Topodata.ShardReference getShardReferences(int index);
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      int getShardReferencesCount();
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      java.util.List<? extends io.vitess.proto.Topodata.ShardReferenceOrBuilder> 
          getShardReferencesOrBuilderList();
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      io.vitess.proto.Topodata.ShardReferenceOrBuilder getShardReferencesOrBuilder(
          int index);

      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      java.util.List<io.vitess.proto.Topodata.ShardTabletControl> 
          getShardTabletControlsList();
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      io.vitess.proto.Topodata.ShardTabletControl getShardTabletControls(int index);
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      int getShardTabletControlsCount();
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      java.util.List<? extends io.vitess.proto.Topodata.ShardTabletControlOrBuilder> 
          getShardTabletControlsOrBuilderList();
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      io.vitess.proto.Topodata.ShardTabletControlOrBuilder getShardTabletControlsOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code topodata.SrvKeyspace.KeyspacePartition}
     */
    public  static final class KeyspacePartition extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:topodata.SrvKeyspace.KeyspacePartition)
        KeyspacePartitionOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use KeyspacePartition.newBuilder() to construct.
      private KeyspacePartition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private KeyspacePartition() {
        servedType_ = 0;
        shardReferences_ = java.util.Collections.emptyList();
        shardTabletControls_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private KeyspacePartition(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();

                servedType_ = rawValue;
                break;
              }
              case 18: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  shardReferences_ = new java.util.ArrayList<io.vitess.proto.Topodata.ShardReference>();
                  mutable_bitField0_ |= 0x00000002;
                }
                shardReferences_.add(
                    input.readMessage(io.vitess.proto.Topodata.ShardReference.parser(), extensionRegistry));
                break;
              }
              case 26: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  shardTabletControls_ = new java.util.ArrayList<io.vitess.proto.Topodata.ShardTabletControl>();
                  mutable_bitField0_ |= 0x00000004;
                }
                shardTabletControls_.add(
                    input.readMessage(io.vitess.proto.Topodata.ShardTabletControl.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            shardReferences_ = java.util.Collections.unmodifiableList(shardReferences_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            shardTabletControls_ = java.util.Collections.unmodifiableList(shardTabletControls_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_KeyspacePartition_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_KeyspacePartition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.class, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder.class);
      }

      private int bitField0_;
      public static final int SERVED_TYPE_FIELD_NUMBER = 1;
      private int servedType_;
      /**
       * <pre>
       * The type this partition applies to.
       * </pre>
       *
       * <code>.topodata.TabletType served_type = 1;</code>
       */
      public int getServedTypeValue() {
        return servedType_;
      }
      /**
       * <pre>
       * The type this partition applies to.
       * </pre>
       *
       * <code>.topodata.TabletType served_type = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletType getServedType() {
        io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(servedType_);
        return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
      }

      public static final int SHARD_REFERENCES_FIELD_NUMBER = 2;
      private java.util.List<io.vitess.proto.Topodata.ShardReference> shardReferences_;
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.ShardReference> getShardReferencesList() {
        return shardReferences_;
      }
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.ShardReferenceOrBuilder> 
          getShardReferencesOrBuilderList() {
        return shardReferences_;
      }
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      public int getShardReferencesCount() {
        return shardReferences_.size();
      }
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      public io.vitess.proto.Topodata.ShardReference getShardReferences(int index) {
        return shardReferences_.get(index);
      }
      /**
       * <pre>
       * List of non-overlapping continuous shards sorted by range.
       * </pre>
       *
       * <code>repeated .topodata.ShardReference shard_references = 2;</code>
       */
      public io.vitess.proto.Topodata.ShardReferenceOrBuilder getShardReferencesOrBuilder(
          int index) {
        return shardReferences_.get(index);
      }

      public static final int SHARD_TABLET_CONTROLS_FIELD_NUMBER = 3;
      private java.util.List<io.vitess.proto.Topodata.ShardTabletControl> shardTabletControls_;
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.ShardTabletControl> getShardTabletControlsList() {
        return shardTabletControls_;
      }
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.ShardTabletControlOrBuilder> 
          getShardTabletControlsOrBuilderList() {
        return shardTabletControls_;
      }
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      public int getShardTabletControlsCount() {
        return shardTabletControls_.size();
      }
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      public io.vitess.proto.Topodata.ShardTabletControl getShardTabletControls(int index) {
        return shardTabletControls_.get(index);
      }
      /**
       * <pre>
       * List of shard tablet controls
       * </pre>
       *
       * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
       */
      public io.vitess.proto.Topodata.ShardTabletControlOrBuilder getShardTabletControlsOrBuilder(
          int index) {
        return shardTabletControls_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (servedType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          output.writeEnum(1, servedType_);
        }
        for (int i = 0; i < shardReferences_.size(); i++) {
          output.writeMessage(2, shardReferences_.get(i));
        }
        for (int i = 0; i < shardTabletControls_.size(); i++) {
          output.writeMessage(3, shardTabletControls_.get(i));
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (servedType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, servedType_);
        }
        for (int i = 0; i < shardReferences_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, shardReferences_.get(i));
        }
        for (int i = 0; i < shardTabletControls_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, shardTabletControls_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition)) {
          return super.equals(obj);
        }
        io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition other = (io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition) obj;

        boolean result = true;
        result = result && servedType_ == other.servedType_;
        result = result && getShardReferencesList()
            .equals(other.getShardReferencesList());
        result = result && getShardTabletControlsList()
            .equals(other.getShardTabletControlsList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + SERVED_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + servedType_;
        if (getShardReferencesCount() > 0) {
          hash = (37 * hash) + SHARD_REFERENCES_FIELD_NUMBER;
          hash = (53 * hash) + getShardReferencesList().hashCode();
        }
        if (getShardTabletControlsCount() > 0) {
          hash = (37 * hash) + SHARD_TABLET_CONTROLS_FIELD_NUMBER;
          hash = (53 * hash) + getShardTabletControlsList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code topodata.SrvKeyspace.KeyspacePartition}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:topodata.SrvKeyspace.KeyspacePartition)
          io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_KeyspacePartition_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_KeyspacePartition_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.class, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder.class);
        }

        // Construct using io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getShardReferencesFieldBuilder();
            getShardTabletControlsFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          servedType_ = 0;

          if (shardReferencesBuilder_ == null) {
            shardReferences_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            shardReferencesBuilder_.clear();
          }
          if (shardTabletControlsBuilder_ == null) {
            shardTabletControls_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            shardTabletControlsBuilder_.clear();
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_KeyspacePartition_descriptor;
        }

        public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition getDefaultInstanceForType() {
          return io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.getDefaultInstance();
        }

        public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition build() {
          io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition buildPartial() {
          io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition result = new io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.servedType_ = servedType_;
          if (shardReferencesBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
              shardReferences_ = java.util.Collections.unmodifiableList(shardReferences_);
              bitField0_ = (bitField0_ & ~0x00000002);
            }
            result.shardReferences_ = shardReferences_;
          } else {
            result.shardReferences_ = shardReferencesBuilder_.build();
          }
          if (shardTabletControlsBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              shardTabletControls_ = java.util.Collections.unmodifiableList(shardTabletControls_);
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.shardTabletControls_ = shardTabletControls_;
          } else {
            result.shardTabletControls_ = shardTabletControlsBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition) {
            return mergeFrom((io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition other) {
          if (other == io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.getDefaultInstance()) return this;
          if (other.servedType_ != 0) {
            setServedTypeValue(other.getServedTypeValue());
          }
          if (shardReferencesBuilder_ == null) {
            if (!other.shardReferences_.isEmpty()) {
              if (shardReferences_.isEmpty()) {
                shardReferences_ = other.shardReferences_;
                bitField0_ = (bitField0_ & ~0x00000002);
              } else {
                ensureShardReferencesIsMutable();
                shardReferences_.addAll(other.shardReferences_);
              }
              onChanged();
            }
          } else {
            if (!other.shardReferences_.isEmpty()) {
              if (shardReferencesBuilder_.isEmpty()) {
                shardReferencesBuilder_.dispose();
                shardReferencesBuilder_ = null;
                shardReferences_ = other.shardReferences_;
                bitField0_ = (bitField0_ & ~0x00000002);
                shardReferencesBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getShardReferencesFieldBuilder() : null;
              } else {
                shardReferencesBuilder_.addAllMessages(other.shardReferences_);
              }
            }
          }
          if (shardTabletControlsBuilder_ == null) {
            if (!other.shardTabletControls_.isEmpty()) {
              if (shardTabletControls_.isEmpty()) {
                shardTabletControls_ = other.shardTabletControls_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureShardTabletControlsIsMutable();
                shardTabletControls_.addAll(other.shardTabletControls_);
              }
              onChanged();
            }
          } else {
            if (!other.shardTabletControls_.isEmpty()) {
              if (shardTabletControlsBuilder_.isEmpty()) {
                shardTabletControlsBuilder_.dispose();
                shardTabletControlsBuilder_ = null;
                shardTabletControls_ = other.shardTabletControls_;
                bitField0_ = (bitField0_ & ~0x00000004);
                shardTabletControlsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getShardTabletControlsFieldBuilder() : null;
              } else {
                shardTabletControlsBuilder_.addAllMessages(other.shardTabletControls_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int servedType_ = 0;
        /**
         * <pre>
         * The type this partition applies to.
         * </pre>
         *
         * <code>.topodata.TabletType served_type = 1;</code>
         */
        public int getServedTypeValue() {
          return servedType_;
        }
        /**
         * <pre>
         * The type this partition applies to.
         * </pre>
         *
         * <code>.topodata.TabletType served_type = 1;</code>
         */
        public Builder setServedTypeValue(int value) {
          servedType_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The type this partition applies to.
         * </pre>
         *
         * <code>.topodata.TabletType served_type = 1;</code>
         */
        public io.vitess.proto.Topodata.TabletType getServedType() {
          io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(servedType_);
          return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * The type this partition applies to.
         * </pre>
         *
         * <code>.topodata.TabletType served_type = 1;</code>
         */
        public Builder setServedType(io.vitess.proto.Topodata.TabletType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          servedType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The type this partition applies to.
         * </pre>
         *
         * <code>.topodata.TabletType served_type = 1;</code>
         */
        public Builder clearServedType() {
          
          servedType_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<io.vitess.proto.Topodata.ShardReference> shardReferences_ =
          java.util.Collections.emptyList();
        private void ensureShardReferencesIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            shardReferences_ = new java.util.ArrayList<io.vitess.proto.Topodata.ShardReference>(shardReferences_);
            bitField0_ |= 0x00000002;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            io.vitess.proto.Topodata.ShardReference, io.vitess.proto.Topodata.ShardReference.Builder, io.vitess.proto.Topodata.ShardReferenceOrBuilder> shardReferencesBuilder_;

        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public java.util.List<io.vitess.proto.Topodata.ShardReference> getShardReferencesList() {
          if (shardReferencesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(shardReferences_);
          } else {
            return shardReferencesBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public int getShardReferencesCount() {
          if (shardReferencesBuilder_ == null) {
            return shardReferences_.size();
          } else {
            return shardReferencesBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public io.vitess.proto.Topodata.ShardReference getShardReferences(int index) {
          if (shardReferencesBuilder_ == null) {
            return shardReferences_.get(index);
          } else {
            return shardReferencesBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder setShardReferences(
            int index, io.vitess.proto.Topodata.ShardReference value) {
          if (shardReferencesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureShardReferencesIsMutable();
            shardReferences_.set(index, value);
            onChanged();
          } else {
            shardReferencesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder setShardReferences(
            int index, io.vitess.proto.Topodata.ShardReference.Builder builderForValue) {
          if (shardReferencesBuilder_ == null) {
            ensureShardReferencesIsMutable();
            shardReferences_.set(index, builderForValue.build());
            onChanged();
          } else {
            shardReferencesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder addShardReferences(io.vitess.proto.Topodata.ShardReference value) {
          if (shardReferencesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureShardReferencesIsMutable();
            shardReferences_.add(value);
            onChanged();
          } else {
            shardReferencesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder addShardReferences(
            int index, io.vitess.proto.Topodata.ShardReference value) {
          if (shardReferencesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureShardReferencesIsMutable();
            shardReferences_.add(index, value);
            onChanged();
          } else {
            shardReferencesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder addShardReferences(
            io.vitess.proto.Topodata.ShardReference.Builder builderForValue) {
          if (shardReferencesBuilder_ == null) {
            ensureShardReferencesIsMutable();
            shardReferences_.add(builderForValue.build());
            onChanged();
          } else {
            shardReferencesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder addShardReferences(
            int index, io.vitess.proto.Topodata.ShardReference.Builder builderForValue) {
          if (shardReferencesBuilder_ == null) {
            ensureShardReferencesIsMutable();
            shardReferences_.add(index, builderForValue.build());
            onChanged();
          } else {
            shardReferencesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder addAllShardReferences(
            java.lang.Iterable<? extends io.vitess.proto.Topodata.ShardReference> values) {
          if (shardReferencesBuilder_ == null) {
            ensureShardReferencesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, shardReferences_);
            onChanged();
          } else {
            shardReferencesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder clearShardReferences() {
          if (shardReferencesBuilder_ == null) {
            shardReferences_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000002);
            onChanged();
          } else {
            shardReferencesBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public Builder removeShardReferences(int index) {
          if (shardReferencesBuilder_ == null) {
            ensureShardReferencesIsMutable();
            shardReferences_.remove(index);
            onChanged();
          } else {
            shardReferencesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public io.vitess.proto.Topodata.ShardReference.Builder getShardReferencesBuilder(
            int index) {
          return getShardReferencesFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public io.vitess.proto.Topodata.ShardReferenceOrBuilder getShardReferencesOrBuilder(
            int index) {
          if (shardReferencesBuilder_ == null) {
            return shardReferences_.get(index);  } else {
            return shardReferencesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public java.util.List<? extends io.vitess.proto.Topodata.ShardReferenceOrBuilder> 
             getShardReferencesOrBuilderList() {
          if (shardReferencesBuilder_ != null) {
            return shardReferencesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(shardReferences_);
          }
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public io.vitess.proto.Topodata.ShardReference.Builder addShardReferencesBuilder() {
          return getShardReferencesFieldBuilder().addBuilder(
              io.vitess.proto.Topodata.ShardReference.getDefaultInstance());
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public io.vitess.proto.Topodata.ShardReference.Builder addShardReferencesBuilder(
            int index) {
          return getShardReferencesFieldBuilder().addBuilder(
              index, io.vitess.proto.Topodata.ShardReference.getDefaultInstance());
        }
        /**
         * <pre>
         * List of non-overlapping continuous shards sorted by range.
         * </pre>
         *
         * <code>repeated .topodata.ShardReference shard_references = 2;</code>
         */
        public java.util.List<io.vitess.proto.Topodata.ShardReference.Builder> 
             getShardReferencesBuilderList() {
          return getShardReferencesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            io.vitess.proto.Topodata.ShardReference, io.vitess.proto.Topodata.ShardReference.Builder, io.vitess.proto.Topodata.ShardReferenceOrBuilder> 
            getShardReferencesFieldBuilder() {
          if (shardReferencesBuilder_ == null) {
            shardReferencesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                io.vitess.proto.Topodata.ShardReference, io.vitess.proto.Topodata.ShardReference.Builder, io.vitess.proto.Topodata.ShardReferenceOrBuilder>(
                    shardReferences_,
                    ((bitField0_ & 0x00000002) == 0x00000002),
                    getParentForChildren(),
                    isClean());
            shardReferences_ = null;
          }
          return shardReferencesBuilder_;
        }

        private java.util.List<io.vitess.proto.Topodata.ShardTabletControl> shardTabletControls_ =
          java.util.Collections.emptyList();
        private void ensureShardTabletControlsIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            shardTabletControls_ = new java.util.ArrayList<io.vitess.proto.Topodata.ShardTabletControl>(shardTabletControls_);
            bitField0_ |= 0x00000004;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            io.vitess.proto.Topodata.ShardTabletControl, io.vitess.proto.Topodata.ShardTabletControl.Builder, io.vitess.proto.Topodata.ShardTabletControlOrBuilder> shardTabletControlsBuilder_;

        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public java.util.List<io.vitess.proto.Topodata.ShardTabletControl> getShardTabletControlsList() {
          if (shardTabletControlsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(shardTabletControls_);
          } else {
            return shardTabletControlsBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public int getShardTabletControlsCount() {
          if (shardTabletControlsBuilder_ == null) {
            return shardTabletControls_.size();
          } else {
            return shardTabletControlsBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public io.vitess.proto.Topodata.ShardTabletControl getShardTabletControls(int index) {
          if (shardTabletControlsBuilder_ == null) {
            return shardTabletControls_.get(index);
          } else {
            return shardTabletControlsBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder setShardTabletControls(
            int index, io.vitess.proto.Topodata.ShardTabletControl value) {
          if (shardTabletControlsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureShardTabletControlsIsMutable();
            shardTabletControls_.set(index, value);
            onChanged();
          } else {
            shardTabletControlsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder setShardTabletControls(
            int index, io.vitess.proto.Topodata.ShardTabletControl.Builder builderForValue) {
          if (shardTabletControlsBuilder_ == null) {
            ensureShardTabletControlsIsMutable();
            shardTabletControls_.set(index, builderForValue.build());
            onChanged();
          } else {
            shardTabletControlsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder addShardTabletControls(io.vitess.proto.Topodata.ShardTabletControl value) {
          if (shardTabletControlsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureShardTabletControlsIsMutable();
            shardTabletControls_.add(value);
            onChanged();
          } else {
            shardTabletControlsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder addShardTabletControls(
            int index, io.vitess.proto.Topodata.ShardTabletControl value) {
          if (shardTabletControlsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureShardTabletControlsIsMutable();
            shardTabletControls_.add(index, value);
            onChanged();
          } else {
            shardTabletControlsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder addShardTabletControls(
            io.vitess.proto.Topodata.ShardTabletControl.Builder builderForValue) {
          if (shardTabletControlsBuilder_ == null) {
            ensureShardTabletControlsIsMutable();
            shardTabletControls_.add(builderForValue.build());
            onChanged();
          } else {
            shardTabletControlsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder addShardTabletControls(
            int index, io.vitess.proto.Topodata.ShardTabletControl.Builder builderForValue) {
          if (shardTabletControlsBuilder_ == null) {
            ensureShardTabletControlsIsMutable();
            shardTabletControls_.add(index, builderForValue.build());
            onChanged();
          } else {
            shardTabletControlsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder addAllShardTabletControls(
            java.lang.Iterable<? extends io.vitess.proto.Topodata.ShardTabletControl> values) {
          if (shardTabletControlsBuilder_ == null) {
            ensureShardTabletControlsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, shardTabletControls_);
            onChanged();
          } else {
            shardTabletControlsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder clearShardTabletControls() {
          if (shardTabletControlsBuilder_ == null) {
            shardTabletControls_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
          } else {
            shardTabletControlsBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public Builder removeShardTabletControls(int index) {
          if (shardTabletControlsBuilder_ == null) {
            ensureShardTabletControlsIsMutable();
            shardTabletControls_.remove(index);
            onChanged();
          } else {
            shardTabletControlsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public io.vitess.proto.Topodata.ShardTabletControl.Builder getShardTabletControlsBuilder(
            int index) {
          return getShardTabletControlsFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public io.vitess.proto.Topodata.ShardTabletControlOrBuilder getShardTabletControlsOrBuilder(
            int index) {
          if (shardTabletControlsBuilder_ == null) {
            return shardTabletControls_.get(index);  } else {
            return shardTabletControlsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public java.util.List<? extends io.vitess.proto.Topodata.ShardTabletControlOrBuilder> 
             getShardTabletControlsOrBuilderList() {
          if (shardTabletControlsBuilder_ != null) {
            return shardTabletControlsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(shardTabletControls_);
          }
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public io.vitess.proto.Topodata.ShardTabletControl.Builder addShardTabletControlsBuilder() {
          return getShardTabletControlsFieldBuilder().addBuilder(
              io.vitess.proto.Topodata.ShardTabletControl.getDefaultInstance());
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public io.vitess.proto.Topodata.ShardTabletControl.Builder addShardTabletControlsBuilder(
            int index) {
          return getShardTabletControlsFieldBuilder().addBuilder(
              index, io.vitess.proto.Topodata.ShardTabletControl.getDefaultInstance());
        }
        /**
         * <pre>
         * List of shard tablet controls
         * </pre>
         *
         * <code>repeated .topodata.ShardTabletControl shard_tablet_controls = 3;</code>
         */
        public java.util.List<io.vitess.proto.Topodata.ShardTabletControl.Builder> 
             getShardTabletControlsBuilderList() {
          return getShardTabletControlsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            io.vitess.proto.Topodata.ShardTabletControl, io.vitess.proto.Topodata.ShardTabletControl.Builder, io.vitess.proto.Topodata.ShardTabletControlOrBuilder> 
            getShardTabletControlsFieldBuilder() {
          if (shardTabletControlsBuilder_ == null) {
            shardTabletControlsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                io.vitess.proto.Topodata.ShardTabletControl, io.vitess.proto.Topodata.ShardTabletControl.Builder, io.vitess.proto.Topodata.ShardTabletControlOrBuilder>(
                    shardTabletControls_,
                    ((bitField0_ & 0x00000004) == 0x00000004),
                    getParentForChildren(),
                    isClean());
            shardTabletControls_ = null;
          }
          return shardTabletControlsBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:topodata.SrvKeyspace.KeyspacePartition)
      }

      // @@protoc_insertion_point(class_scope:topodata.SrvKeyspace.KeyspacePartition)
      private static final io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition();
      }

      public static io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<KeyspacePartition>
          PARSER = new com.google.protobuf.AbstractParser<KeyspacePartition>() {
        public KeyspacePartition parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new KeyspacePartition(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<KeyspacePartition> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<KeyspacePartition> getParserForType() {
        return PARSER;
      }

      public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ServedFromOrBuilder extends
        // @@protoc_insertion_point(interface_extends:topodata.SrvKeyspace.ServedFrom)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * the tablet type
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      int getTabletTypeValue();
      /**
       * <pre>
       * the tablet type
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      io.vitess.proto.Topodata.TabletType getTabletType();

      /**
       * <pre>
       * the keyspace name that's serving it
       * </pre>
       *
       * <code>string keyspace = 2;</code>
       */
      java.lang.String getKeyspace();
      /**
       * <pre>
       * the keyspace name that's serving it
       * </pre>
       *
       * <code>string keyspace = 2;</code>
       */
      com.google.protobuf.ByteString
          getKeyspaceBytes();
    }
    /**
     * <pre>
     * ServedFrom indicates a relationship between a TabletType and the
     * keyspace name that's serving it.
     * </pre>
     *
     * Protobuf type {@code topodata.SrvKeyspace.ServedFrom}
     */
    public  static final class ServedFrom extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:topodata.SrvKeyspace.ServedFrom)
        ServedFromOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ServedFrom.newBuilder() to construct.
      private ServedFrom(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ServedFrom() {
        tabletType_ = 0;
        keyspace_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ServedFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();

                tabletType_ = rawValue;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                keyspace_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_ServedFrom_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_ServedFrom_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.class, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder.class);
      }

      public static final int TABLET_TYPE_FIELD_NUMBER = 1;
      private int tabletType_;
      /**
       * <pre>
       * the tablet type
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      public int getTabletTypeValue() {
        return tabletType_;
      }
      /**
       * <pre>
       * the tablet type
       * </pre>
       *
       * <code>.topodata.TabletType tablet_type = 1;</code>
       */
      public io.vitess.proto.Topodata.TabletType getTabletType() {
        io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(tabletType_);
        return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
      }

      public static final int KEYSPACE_FIELD_NUMBER = 2;
      private volatile java.lang.Object keyspace_;
      /**
       * <pre>
       * the keyspace name that's serving it
       * </pre>
       *
       * <code>string keyspace = 2;</code>
       */
      public java.lang.String getKeyspace() {
        java.lang.Object ref = keyspace_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          keyspace_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * the keyspace name that's serving it
       * </pre>
       *
       * <code>string keyspace = 2;</code>
       */
      public com.google.protobuf.ByteString
          getKeyspaceBytes() {
        java.lang.Object ref = keyspace_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          keyspace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (tabletType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          output.writeEnum(1, tabletType_);
        }
        if (!getKeyspaceBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, keyspace_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (tabletType_ != io.vitess.proto.Topodata.TabletType.UNKNOWN.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, tabletType_);
        }
        if (!getKeyspaceBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, keyspace_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.vitess.proto.Topodata.SrvKeyspace.ServedFrom)) {
          return super.equals(obj);
        }
        io.vitess.proto.Topodata.SrvKeyspace.ServedFrom other = (io.vitess.proto.Topodata.SrvKeyspace.ServedFrom) obj;

        boolean result = true;
        result = result && tabletType_ == other.tabletType_;
        result = result && getKeyspace()
            .equals(other.getKeyspace());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TABLET_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + tabletType_;
        hash = (37 * hash) + KEYSPACE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyspace().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.vitess.proto.Topodata.SrvKeyspace.ServedFrom prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * ServedFrom indicates a relationship between a TabletType and the
       * keyspace name that's serving it.
       * </pre>
       *
       * Protobuf type {@code topodata.SrvKeyspace.ServedFrom}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:topodata.SrvKeyspace.ServedFrom)
          io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_ServedFrom_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_ServedFrom_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.class, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder.class);
        }

        // Construct using io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          tabletType_ = 0;

          keyspace_ = "";

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_ServedFrom_descriptor;
        }

        public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom getDefaultInstanceForType() {
          return io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.getDefaultInstance();
        }

        public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom build() {
          io.vitess.proto.Topodata.SrvKeyspace.ServedFrom result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom buildPartial() {
          io.vitess.proto.Topodata.SrvKeyspace.ServedFrom result = new io.vitess.proto.Topodata.SrvKeyspace.ServedFrom(this);
          result.tabletType_ = tabletType_;
          result.keyspace_ = keyspace_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.vitess.proto.Topodata.SrvKeyspace.ServedFrom) {
            return mergeFrom((io.vitess.proto.Topodata.SrvKeyspace.ServedFrom)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.vitess.proto.Topodata.SrvKeyspace.ServedFrom other) {
          if (other == io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.getDefaultInstance()) return this;
          if (other.tabletType_ != 0) {
            setTabletTypeValue(other.getTabletTypeValue());
          }
          if (!other.getKeyspace().isEmpty()) {
            keyspace_ = other.keyspace_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.vitess.proto.Topodata.SrvKeyspace.ServedFrom parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.vitess.proto.Topodata.SrvKeyspace.ServedFrom) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int tabletType_ = 0;
        /**
         * <pre>
         * the tablet type
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public int getTabletTypeValue() {
          return tabletType_;
        }
        /**
         * <pre>
         * the tablet type
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder setTabletTypeValue(int value) {
          tabletType_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the tablet type
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public io.vitess.proto.Topodata.TabletType getTabletType() {
          io.vitess.proto.Topodata.TabletType result = io.vitess.proto.Topodata.TabletType.valueOf(tabletType_);
          return result == null ? io.vitess.proto.Topodata.TabletType.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * the tablet type
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder setTabletType(io.vitess.proto.Topodata.TabletType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          tabletType_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the tablet type
         * </pre>
         *
         * <code>.topodata.TabletType tablet_type = 1;</code>
         */
        public Builder clearTabletType() {
          
          tabletType_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object keyspace_ = "";
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public java.lang.String getKeyspace() {
          java.lang.Object ref = keyspace_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            keyspace_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public com.google.protobuf.ByteString
            getKeyspaceBytes() {
          java.lang.Object ref = keyspace_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            keyspace_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public Builder setKeyspace(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          keyspace_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public Builder clearKeyspace() {
          
          keyspace_ = getDefaultInstance().getKeyspace();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * the keyspace name that's serving it
         * </pre>
         *
         * <code>string keyspace = 2;</code>
         */
        public Builder setKeyspaceBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          keyspace_ = value;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:topodata.SrvKeyspace.ServedFrom)
      }

      // @@protoc_insertion_point(class_scope:topodata.SrvKeyspace.ServedFrom)
      private static final io.vitess.proto.Topodata.SrvKeyspace.ServedFrom DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.vitess.proto.Topodata.SrvKeyspace.ServedFrom();
      }

      public static io.vitess.proto.Topodata.SrvKeyspace.ServedFrom getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ServedFrom>
          PARSER = new com.google.protobuf.AbstractParser<ServedFrom>() {
        public ServedFrom parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ServedFrom(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ServedFrom> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ServedFrom> getParserForType() {
        return PARSER;
      }

      public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int PARTITIONS_FIELD_NUMBER = 1;
    private java.util.List<io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition> partitions_;
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    public java.util.List<io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition> getPartitionsList() {
      return partitions_;
    }
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    public java.util.List<? extends io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder> 
        getPartitionsOrBuilderList() {
      return partitions_;
    }
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    public int getPartitionsCount() {
      return partitions_.size();
    }
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition getPartitions(int index) {
      return partitions_.get(index);
    }
    /**
     * <pre>
     * The partitions this keyspace is serving, per tablet type.
     * </pre>
     *
     * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
     */
    public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder getPartitionsOrBuilder(
        int index) {
      return partitions_.get(index);
    }

    public static final int SHARDING_COLUMN_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object shardingColumnName_;
    /**
     * <pre>
     * copied from Keyspace
     * </pre>
     *
     * <code>string sharding_column_name = 2;</code>
     */
    public java.lang.String getShardingColumnName() {
      java.lang.Object ref = shardingColumnName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shardingColumnName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * copied from Keyspace
     * </pre>
     *
     * <code>string sharding_column_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getShardingColumnNameBytes() {
      java.lang.Object ref = shardingColumnName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shardingColumnName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHARDING_COLUMN_TYPE_FIELD_NUMBER = 3;
    private int shardingColumnType_;
    /**
     * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
     */
    public int getShardingColumnTypeValue() {
      return shardingColumnType_;
    }
    /**
     * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
     */
    public io.vitess.proto.Topodata.KeyspaceIdType getShardingColumnType() {
      io.vitess.proto.Topodata.KeyspaceIdType result = io.vitess.proto.Topodata.KeyspaceIdType.valueOf(shardingColumnType_);
      return result == null ? io.vitess.proto.Topodata.KeyspaceIdType.UNRECOGNIZED : result;
    }

    public static final int SERVED_FROM_FIELD_NUMBER = 4;
    private java.util.List<io.vitess.proto.Topodata.SrvKeyspace.ServedFrom> servedFrom_;
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    public java.util.List<io.vitess.proto.Topodata.SrvKeyspace.ServedFrom> getServedFromList() {
      return servedFrom_;
    }
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    public java.util.List<? extends io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder> 
        getServedFromOrBuilderList() {
      return servedFrom_;
    }
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    public int getServedFromCount() {
      return servedFrom_.size();
    }
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom getServedFrom(int index) {
      return servedFrom_.get(index);
    }
    /**
     * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
     */
    public io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder getServedFromOrBuilder(
        int index) {
      return servedFrom_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < partitions_.size(); i++) {
        output.writeMessage(1, partitions_.get(i));
      }
      if (!getShardingColumnNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, shardingColumnName_);
      }
      if (shardingColumnType_ != io.vitess.proto.Topodata.KeyspaceIdType.UNSET.getNumber()) {
        output.writeEnum(3, shardingColumnType_);
      }
      for (int i = 0; i < servedFrom_.size(); i++) {
        output.writeMessage(4, servedFrom_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < partitions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, partitions_.get(i));
      }
      if (!getShardingColumnNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, shardingColumnName_);
      }
      if (shardingColumnType_ != io.vitess.proto.Topodata.KeyspaceIdType.UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, shardingColumnType_);
      }
      for (int i = 0; i < servedFrom_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, servedFrom_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.SrvKeyspace)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.SrvKeyspace other = (io.vitess.proto.Topodata.SrvKeyspace) obj;

      boolean result = true;
      result = result && getPartitionsList()
          .equals(other.getPartitionsList());
      result = result && getShardingColumnName()
          .equals(other.getShardingColumnName());
      result = result && shardingColumnType_ == other.shardingColumnType_;
      result = result && getServedFromList()
          .equals(other.getServedFromList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getPartitionsCount() > 0) {
        hash = (37 * hash) + PARTITIONS_FIELD_NUMBER;
        hash = (53 * hash) + getPartitionsList().hashCode();
      }
      hash = (37 * hash) + SHARDING_COLUMN_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getShardingColumnName().hashCode();
      hash = (37 * hash) + SHARDING_COLUMN_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + shardingColumnType_;
      if (getServedFromCount() > 0) {
        hash = (37 * hash) + SERVED_FROM_FIELD_NUMBER;
        hash = (53 * hash) + getServedFromList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.SrvKeyspace parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.SrvKeyspace prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SrvKeyspace is a rollup node for the keyspace itself.
     * </pre>
     *
     * Protobuf type {@code topodata.SrvKeyspace}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.SrvKeyspace)
        io.vitess.proto.Topodata.SrvKeyspaceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.SrvKeyspace.class, io.vitess.proto.Topodata.SrvKeyspace.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.SrvKeyspace.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPartitionsFieldBuilder();
          getServedFromFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (partitionsBuilder_ == null) {
          partitions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          partitionsBuilder_.clear();
        }
        shardingColumnName_ = "";

        shardingColumnType_ = 0;

        if (servedFromBuilder_ == null) {
          servedFrom_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          servedFromBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_SrvKeyspace_descriptor;
      }

      public io.vitess.proto.Topodata.SrvKeyspace getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.SrvKeyspace.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.SrvKeyspace build() {
        io.vitess.proto.Topodata.SrvKeyspace result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.SrvKeyspace buildPartial() {
        io.vitess.proto.Topodata.SrvKeyspace result = new io.vitess.proto.Topodata.SrvKeyspace(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (partitionsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            partitions_ = java.util.Collections.unmodifiableList(partitions_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.partitions_ = partitions_;
        } else {
          result.partitions_ = partitionsBuilder_.build();
        }
        result.shardingColumnName_ = shardingColumnName_;
        result.shardingColumnType_ = shardingColumnType_;
        if (servedFromBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            servedFrom_ = java.util.Collections.unmodifiableList(servedFrom_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.servedFrom_ = servedFrom_;
        } else {
          result.servedFrom_ = servedFromBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.SrvKeyspace) {
          return mergeFrom((io.vitess.proto.Topodata.SrvKeyspace)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.SrvKeyspace other) {
        if (other == io.vitess.proto.Topodata.SrvKeyspace.getDefaultInstance()) return this;
        if (partitionsBuilder_ == null) {
          if (!other.partitions_.isEmpty()) {
            if (partitions_.isEmpty()) {
              partitions_ = other.partitions_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePartitionsIsMutable();
              partitions_.addAll(other.partitions_);
            }
            onChanged();
          }
        } else {
          if (!other.partitions_.isEmpty()) {
            if (partitionsBuilder_.isEmpty()) {
              partitionsBuilder_.dispose();
              partitionsBuilder_ = null;
              partitions_ = other.partitions_;
              bitField0_ = (bitField0_ & ~0x00000001);
              partitionsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPartitionsFieldBuilder() : null;
            } else {
              partitionsBuilder_.addAllMessages(other.partitions_);
            }
          }
        }
        if (!other.getShardingColumnName().isEmpty()) {
          shardingColumnName_ = other.shardingColumnName_;
          onChanged();
        }
        if (other.shardingColumnType_ != 0) {
          setShardingColumnTypeValue(other.getShardingColumnTypeValue());
        }
        if (servedFromBuilder_ == null) {
          if (!other.servedFrom_.isEmpty()) {
            if (servedFrom_.isEmpty()) {
              servedFrom_ = other.servedFrom_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureServedFromIsMutable();
              servedFrom_.addAll(other.servedFrom_);
            }
            onChanged();
          }
        } else {
          if (!other.servedFrom_.isEmpty()) {
            if (servedFromBuilder_.isEmpty()) {
              servedFromBuilder_.dispose();
              servedFromBuilder_ = null;
              servedFrom_ = other.servedFrom_;
              bitField0_ = (bitField0_ & ~0x00000008);
              servedFromBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getServedFromFieldBuilder() : null;
            } else {
              servedFromBuilder_.addAllMessages(other.servedFrom_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.SrvKeyspace parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.SrvKeyspace) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition> partitions_ =
        java.util.Collections.emptyList();
      private void ensurePartitionsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          partitions_ = new java.util.ArrayList<io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition>(partitions_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder> partitionsBuilder_;

      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition> getPartitionsList() {
        if (partitionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(partitions_);
        } else {
          return partitionsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public int getPartitionsCount() {
        if (partitionsBuilder_ == null) {
          return partitions_.size();
        } else {
          return partitionsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition getPartitions(int index) {
        if (partitionsBuilder_ == null) {
          return partitions_.get(index);
        } else {
          return partitionsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder setPartitions(
          int index, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition value) {
        if (partitionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartitionsIsMutable();
          partitions_.set(index, value);
          onChanged();
        } else {
          partitionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder setPartitions(
          int index, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder builderForValue) {
        if (partitionsBuilder_ == null) {
          ensurePartitionsIsMutable();
          partitions_.set(index, builderForValue.build());
          onChanged();
        } else {
          partitionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder addPartitions(io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition value) {
        if (partitionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartitionsIsMutable();
          partitions_.add(value);
          onChanged();
        } else {
          partitionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder addPartitions(
          int index, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition value) {
        if (partitionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartitionsIsMutable();
          partitions_.add(index, value);
          onChanged();
        } else {
          partitionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder addPartitions(
          io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder builderForValue) {
        if (partitionsBuilder_ == null) {
          ensurePartitionsIsMutable();
          partitions_.add(builderForValue.build());
          onChanged();
        } else {
          partitionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder addPartitions(
          int index, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder builderForValue) {
        if (partitionsBuilder_ == null) {
          ensurePartitionsIsMutable();
          partitions_.add(index, builderForValue.build());
          onChanged();
        } else {
          partitionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder addAllPartitions(
          java.lang.Iterable<? extends io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition> values) {
        if (partitionsBuilder_ == null) {
          ensurePartitionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, partitions_);
          onChanged();
        } else {
          partitionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder clearPartitions() {
        if (partitionsBuilder_ == null) {
          partitions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          partitionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public Builder removePartitions(int index) {
        if (partitionsBuilder_ == null) {
          ensurePartitionsIsMutable();
          partitions_.remove(index);
          onChanged();
        } else {
          partitionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder getPartitionsBuilder(
          int index) {
        return getPartitionsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder getPartitionsOrBuilder(
          int index) {
        if (partitionsBuilder_ == null) {
          return partitions_.get(index);  } else {
          return partitionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder> 
           getPartitionsOrBuilderList() {
        if (partitionsBuilder_ != null) {
          return partitionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(partitions_);
        }
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder addPartitionsBuilder() {
        return getPartitionsFieldBuilder().addBuilder(
            io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.getDefaultInstance());
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder addPartitionsBuilder(
          int index) {
        return getPartitionsFieldBuilder().addBuilder(
            index, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.getDefaultInstance());
      }
      /**
       * <pre>
       * The partitions this keyspace is serving, per tablet type.
       * </pre>
       *
       * <code>repeated .topodata.SrvKeyspace.KeyspacePartition partitions = 1;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder> 
           getPartitionsBuilderList() {
        return getPartitionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder> 
          getPartitionsFieldBuilder() {
        if (partitionsBuilder_ == null) {
          partitionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartition.Builder, io.vitess.proto.Topodata.SrvKeyspace.KeyspacePartitionOrBuilder>(
                  partitions_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          partitions_ = null;
        }
        return partitionsBuilder_;
      }

      private java.lang.Object shardingColumnName_ = "";
      /**
       * <pre>
       * copied from Keyspace
       * </pre>
       *
       * <code>string sharding_column_name = 2;</code>
       */
      public java.lang.String getShardingColumnName() {
        java.lang.Object ref = shardingColumnName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          shardingColumnName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * copied from Keyspace
       * </pre>
       *
       * <code>string sharding_column_name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getShardingColumnNameBytes() {
        java.lang.Object ref = shardingColumnName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          shardingColumnName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * copied from Keyspace
       * </pre>
       *
       * <code>string sharding_column_name = 2;</code>
       */
      public Builder setShardingColumnName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        shardingColumnName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * copied from Keyspace
       * </pre>
       *
       * <code>string sharding_column_name = 2;</code>
       */
      public Builder clearShardingColumnName() {
        
        shardingColumnName_ = getDefaultInstance().getShardingColumnName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * copied from Keyspace
       * </pre>
       *
       * <code>string sharding_column_name = 2;</code>
       */
      public Builder setShardingColumnNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        shardingColumnName_ = value;
        onChanged();
        return this;
      }

      private int shardingColumnType_ = 0;
      /**
       * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
       */
      public int getShardingColumnTypeValue() {
        return shardingColumnType_;
      }
      /**
       * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
       */
      public Builder setShardingColumnTypeValue(int value) {
        shardingColumnType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
       */
      public io.vitess.proto.Topodata.KeyspaceIdType getShardingColumnType() {
        io.vitess.proto.Topodata.KeyspaceIdType result = io.vitess.proto.Topodata.KeyspaceIdType.valueOf(shardingColumnType_);
        return result == null ? io.vitess.proto.Topodata.KeyspaceIdType.UNRECOGNIZED : result;
      }
      /**
       * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
       */
      public Builder setShardingColumnType(io.vitess.proto.Topodata.KeyspaceIdType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        shardingColumnType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.topodata.KeyspaceIdType sharding_column_type = 3;</code>
       */
      public Builder clearShardingColumnType() {
        
        shardingColumnType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<io.vitess.proto.Topodata.SrvKeyspace.ServedFrom> servedFrom_ =
        java.util.Collections.emptyList();
      private void ensureServedFromIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          servedFrom_ = new java.util.ArrayList<io.vitess.proto.Topodata.SrvKeyspace.ServedFrom>(servedFrom_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.SrvKeyspace.ServedFrom, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder, io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder> servedFromBuilder_;

      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.SrvKeyspace.ServedFrom> getServedFromList() {
        if (servedFromBuilder_ == null) {
          return java.util.Collections.unmodifiableList(servedFrom_);
        } else {
          return servedFromBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public int getServedFromCount() {
        if (servedFromBuilder_ == null) {
          return servedFrom_.size();
        } else {
          return servedFromBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom getServedFrom(int index) {
        if (servedFromBuilder_ == null) {
          return servedFrom_.get(index);
        } else {
          return servedFromBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder setServedFrom(
          int index, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom value) {
        if (servedFromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedFromIsMutable();
          servedFrom_.set(index, value);
          onChanged();
        } else {
          servedFromBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder setServedFrom(
          int index, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder builderForValue) {
        if (servedFromBuilder_ == null) {
          ensureServedFromIsMutable();
          servedFrom_.set(index, builderForValue.build());
          onChanged();
        } else {
          servedFromBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder addServedFrom(io.vitess.proto.Topodata.SrvKeyspace.ServedFrom value) {
        if (servedFromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedFromIsMutable();
          servedFrom_.add(value);
          onChanged();
        } else {
          servedFromBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder addServedFrom(
          int index, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom value) {
        if (servedFromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServedFromIsMutable();
          servedFrom_.add(index, value);
          onChanged();
        } else {
          servedFromBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder addServedFrom(
          io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder builderForValue) {
        if (servedFromBuilder_ == null) {
          ensureServedFromIsMutable();
          servedFrom_.add(builderForValue.build());
          onChanged();
        } else {
          servedFromBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder addServedFrom(
          int index, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder builderForValue) {
        if (servedFromBuilder_ == null) {
          ensureServedFromIsMutable();
          servedFrom_.add(index, builderForValue.build());
          onChanged();
        } else {
          servedFromBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder addAllServedFrom(
          java.lang.Iterable<? extends io.vitess.proto.Topodata.SrvKeyspace.ServedFrom> values) {
        if (servedFromBuilder_ == null) {
          ensureServedFromIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, servedFrom_);
          onChanged();
        } else {
          servedFromBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder clearServedFrom() {
        if (servedFromBuilder_ == null) {
          servedFrom_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          servedFromBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public Builder removeServedFrom(int index) {
        if (servedFromBuilder_ == null) {
          ensureServedFromIsMutable();
          servedFrom_.remove(index);
          onChanged();
        } else {
          servedFromBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder getServedFromBuilder(
          int index) {
        return getServedFromFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder getServedFromOrBuilder(
          int index) {
        if (servedFromBuilder_ == null) {
          return servedFrom_.get(index);  } else {
          return servedFromBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public java.util.List<? extends io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder> 
           getServedFromOrBuilderList() {
        if (servedFromBuilder_ != null) {
          return servedFromBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(servedFrom_);
        }
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder addServedFromBuilder() {
        return getServedFromFieldBuilder().addBuilder(
            io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.getDefaultInstance());
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder addServedFromBuilder(
          int index) {
        return getServedFromFieldBuilder().addBuilder(
            index, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.getDefaultInstance());
      }
      /**
       * <code>repeated .topodata.SrvKeyspace.ServedFrom served_from = 4;</code>
       */
      public java.util.List<io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder> 
           getServedFromBuilderList() {
        return getServedFromFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.vitess.proto.Topodata.SrvKeyspace.ServedFrom, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder, io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder> 
          getServedFromFieldBuilder() {
        if (servedFromBuilder_ == null) {
          servedFromBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.vitess.proto.Topodata.SrvKeyspace.ServedFrom, io.vitess.proto.Topodata.SrvKeyspace.ServedFrom.Builder, io.vitess.proto.Topodata.SrvKeyspace.ServedFromOrBuilder>(
                  servedFrom_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          servedFrom_ = null;
        }
        return servedFromBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.SrvKeyspace)
    }

    // @@protoc_insertion_point(class_scope:topodata.SrvKeyspace)
    private static final io.vitess.proto.Topodata.SrvKeyspace DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.SrvKeyspace();
    }

    public static io.vitess.proto.Topodata.SrvKeyspace getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SrvKeyspace>
        PARSER = new com.google.protobuf.AbstractParser<SrvKeyspace>() {
      public SrvKeyspace parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SrvKeyspace(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SrvKeyspace> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SrvKeyspace> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.SrvKeyspace getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CellInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.CellInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ServerAddress contains the address of the server for the cell.
     * The syntax of this field is topology implementation specific.
     * For instance, for Zookeeper, it is a comma-separated list of
     * server addresses.
     * </pre>
     *
     * <code>string server_address = 1;</code>
     */
    java.lang.String getServerAddress();
    /**
     * <pre>
     * ServerAddress contains the address of the server for the cell.
     * The syntax of this field is topology implementation specific.
     * For instance, for Zookeeper, it is a comma-separated list of
     * server addresses.
     * </pre>
     *
     * <code>string server_address = 1;</code>
     */
    com.google.protobuf.ByteString
        getServerAddressBytes();

    /**
     * <pre>
     * Root is the path to store data in. It is only used when talking
     * to server_address.
     * </pre>
     *
     * <code>string root = 2;</code>
     */
    java.lang.String getRoot();
    /**
     * <pre>
     * Root is the path to store data in. It is only used when talking
     * to server_address.
     * </pre>
     *
     * <code>string root = 2;</code>
     */
    com.google.protobuf.ByteString
        getRootBytes();

    /**
     * <pre>
     * ProxyAddress contains the address of the proxy server for the cell.
     * The syntax of this field is topology implementation specific.
     * For instance, for Zookeeper, it is a comma-separated list of
     * proxy addresses.
     * </pre>
     *
     * <code>string proxy_address = 4;</code>
     */
    java.lang.String getProxyAddress();
    /**
     * <pre>
     * ProxyAddress contains the address of the proxy server for the cell.
     * The syntax of this field is topology implementation specific.
     * For instance, for Zookeeper, it is a comma-separated list of
     * proxy addresses.
     * </pre>
     *
     * <code>string proxy_address = 4;</code>
     */
    com.google.protobuf.ByteString
        getProxyAddressBytes();
  }
  /**
   * <pre>
   * CellInfo contains information about a cell. CellInfo objects are
   * stored in the global topology server, and describe how to reach
   * local topology servers.
   * </pre>
   *
   * Protobuf type {@code topodata.CellInfo}
   */
  public  static final class CellInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.CellInfo)
      CellInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CellInfo.newBuilder() to construct.
    private CellInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CellInfo() {
      serverAddress_ = "";
      root_ = "";
      proxyAddress_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CellInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              serverAddress_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              root_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              proxyAddress_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_CellInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_CellInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.CellInfo.class, io.vitess.proto.Topodata.CellInfo.Builder.class);
    }

    public static final int SERVER_ADDRESS_FIELD_NUMBER = 1;
    private volatile java.lang.Object serverAddress_;
    /**
     * <pre>
     * ServerAddress contains the address of the server for the cell.
     * The syntax of this field is topology implementation specific.
     * For instance, for Zookeeper, it is a comma-separated list of
     * server addresses.
     * </pre>
     *
     * <code>string server_address = 1;</code>
     */
    public java.lang.String getServerAddress() {
      java.lang.Object ref = serverAddress_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        serverAddress_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ServerAddress contains the address of the server for the cell.
     * The syntax of this field is topology implementation specific.
     * For instance, for Zookeeper, it is a comma-separated list of
     * server addresses.
     * </pre>
     *
     * <code>string server_address = 1;</code>
     */
    public com.google.protobuf.ByteString
        getServerAddressBytes() {
      java.lang.Object ref = serverAddress_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        serverAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROOT_FIELD_NUMBER = 2;
    private volatile java.lang.Object root_;
    /**
     * <pre>
     * Root is the path to store data in. It is only used when talking
     * to server_address.
     * </pre>
     *
     * <code>string root = 2;</code>
     */
    public java.lang.String getRoot() {
      java.lang.Object ref = root_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        root_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Root is the path to store data in. It is only used when talking
     * to server_address.
     * </pre>
     *
     * <code>string root = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRootBytes() {
      java.lang.Object ref = root_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        root_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PROXY_ADDRESS_FIELD_NUMBER = 4;
    private volatile java.lang.Object proxyAddress_;
    /**
     * <pre>
     * ProxyAddress contains the address of the proxy server for the cell.
     * The syntax of this field is topology implementation specific.
     * For instance, for Zookeeper, it is a comma-separated list of
     * proxy addresses.
     * </pre>
     *
     * <code>string proxy_address = 4;</code>
     */
    public java.lang.String getProxyAddress() {
      java.lang.Object ref = proxyAddress_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        proxyAddress_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ProxyAddress contains the address of the proxy server for the cell.
     * The syntax of this field is topology implementation specific.
     * For instance, for Zookeeper, it is a comma-separated list of
     * proxy addresses.
     * </pre>
     *
     * <code>string proxy_address = 4;</code>
     */
    public com.google.protobuf.ByteString
        getProxyAddressBytes() {
      java.lang.Object ref = proxyAddress_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        proxyAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getServerAddressBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, serverAddress_);
      }
      if (!getRootBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, root_);
      }
      if (!getProxyAddressBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, proxyAddress_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getServerAddressBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, serverAddress_);
      }
      if (!getRootBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, root_);
      }
      if (!getProxyAddressBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, proxyAddress_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.CellInfo)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.CellInfo other = (io.vitess.proto.Topodata.CellInfo) obj;

      boolean result = true;
      result = result && getServerAddress()
          .equals(other.getServerAddress());
      result = result && getRoot()
          .equals(other.getRoot());
      result = result && getProxyAddress()
          .equals(other.getProxyAddress());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SERVER_ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getServerAddress().hashCode();
      hash = (37 * hash) + ROOT_FIELD_NUMBER;
      hash = (53 * hash) + getRoot().hashCode();
      hash = (37 * hash) + PROXY_ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getProxyAddress().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.CellInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.CellInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.CellInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.CellInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * CellInfo contains information about a cell. CellInfo objects are
     * stored in the global topology server, and describe how to reach
     * local topology servers.
     * </pre>
     *
     * Protobuf type {@code topodata.CellInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.CellInfo)
        io.vitess.proto.Topodata.CellInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_CellInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_CellInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.CellInfo.class, io.vitess.proto.Topodata.CellInfo.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.CellInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        serverAddress_ = "";

        root_ = "";

        proxyAddress_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_CellInfo_descriptor;
      }

      public io.vitess.proto.Topodata.CellInfo getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.CellInfo.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.CellInfo build() {
        io.vitess.proto.Topodata.CellInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.CellInfo buildPartial() {
        io.vitess.proto.Topodata.CellInfo result = new io.vitess.proto.Topodata.CellInfo(this);
        result.serverAddress_ = serverAddress_;
        result.root_ = root_;
        result.proxyAddress_ = proxyAddress_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.CellInfo) {
          return mergeFrom((io.vitess.proto.Topodata.CellInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.CellInfo other) {
        if (other == io.vitess.proto.Topodata.CellInfo.getDefaultInstance()) return this;
        if (!other.getServerAddress().isEmpty()) {
          serverAddress_ = other.serverAddress_;
          onChanged();
        }
        if (!other.getRoot().isEmpty()) {
          root_ = other.root_;
          onChanged();
        }
        if (!other.getProxyAddress().isEmpty()) {
          proxyAddress_ = other.proxyAddress_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.CellInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.CellInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object serverAddress_ = "";
      /**
       * <pre>
       * ServerAddress contains the address of the server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * server addresses.
       * </pre>
       *
       * <code>string server_address = 1;</code>
       */
      public java.lang.String getServerAddress() {
        java.lang.Object ref = serverAddress_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          serverAddress_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ServerAddress contains the address of the server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * server addresses.
       * </pre>
       *
       * <code>string server_address = 1;</code>
       */
      public com.google.protobuf.ByteString
          getServerAddressBytes() {
        java.lang.Object ref = serverAddress_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          serverAddress_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ServerAddress contains the address of the server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * server addresses.
       * </pre>
       *
       * <code>string server_address = 1;</code>
       */
      public Builder setServerAddress(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        serverAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ServerAddress contains the address of the server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * server addresses.
       * </pre>
       *
       * <code>string server_address = 1;</code>
       */
      public Builder clearServerAddress() {
        
        serverAddress_ = getDefaultInstance().getServerAddress();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ServerAddress contains the address of the server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * server addresses.
       * </pre>
       *
       * <code>string server_address = 1;</code>
       */
      public Builder setServerAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        serverAddress_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object root_ = "";
      /**
       * <pre>
       * Root is the path to store data in. It is only used when talking
       * to server_address.
       * </pre>
       *
       * <code>string root = 2;</code>
       */
      public java.lang.String getRoot() {
        java.lang.Object ref = root_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          root_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Root is the path to store data in. It is only used when talking
       * to server_address.
       * </pre>
       *
       * <code>string root = 2;</code>
       */
      public com.google.protobuf.ByteString
          getRootBytes() {
        java.lang.Object ref = root_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          root_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Root is the path to store data in. It is only used when talking
       * to server_address.
       * </pre>
       *
       * <code>string root = 2;</code>
       */
      public Builder setRoot(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        root_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Root is the path to store data in. It is only used when talking
       * to server_address.
       * </pre>
       *
       * <code>string root = 2;</code>
       */
      public Builder clearRoot() {
        
        root_ = getDefaultInstance().getRoot();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Root is the path to store data in. It is only used when talking
       * to server_address.
       * </pre>
       *
       * <code>string root = 2;</code>
       */
      public Builder setRootBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        root_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object proxyAddress_ = "";
      /**
       * <pre>
       * ProxyAddress contains the address of the proxy server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * proxy addresses.
       * </pre>
       *
       * <code>string proxy_address = 4;</code>
       */
      public java.lang.String getProxyAddress() {
        java.lang.Object ref = proxyAddress_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          proxyAddress_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ProxyAddress contains the address of the proxy server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * proxy addresses.
       * </pre>
       *
       * <code>string proxy_address = 4;</code>
       */
      public com.google.protobuf.ByteString
          getProxyAddressBytes() {
        java.lang.Object ref = proxyAddress_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          proxyAddress_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ProxyAddress contains the address of the proxy server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * proxy addresses.
       * </pre>
       *
       * <code>string proxy_address = 4;</code>
       */
      public Builder setProxyAddress(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        proxyAddress_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ProxyAddress contains the address of the proxy server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * proxy addresses.
       * </pre>
       *
       * <code>string proxy_address = 4;</code>
       */
      public Builder clearProxyAddress() {
        
        proxyAddress_ = getDefaultInstance().getProxyAddress();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ProxyAddress contains the address of the proxy server for the cell.
       * The syntax of this field is topology implementation specific.
       * For instance, for Zookeeper, it is a comma-separated list of
       * proxy addresses.
       * </pre>
       *
       * <code>string proxy_address = 4;</code>
       */
      public Builder setProxyAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        proxyAddress_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.CellInfo)
    }

    // @@protoc_insertion_point(class_scope:topodata.CellInfo)
    private static final io.vitess.proto.Topodata.CellInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.CellInfo();
    }

    public static io.vitess.proto.Topodata.CellInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CellInfo>
        PARSER = new com.google.protobuf.AbstractParser<CellInfo>() {
      public CellInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CellInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CellInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CellInfo> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.CellInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CellsAliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:topodata.CellsAlias)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Cells that map to this alias
     * </pre>
     *
     * <code>repeated string cells = 2;</code>
     */
    java.util.List<java.lang.String>
        getCellsList();
    /**
     * <pre>
     * Cells that map to this alias
     * </pre>
     *
     * <code>repeated string cells = 2;</code>
     */
    int getCellsCount();
    /**
     * <pre>
     * Cells that map to this alias
     * </pre>
     *
     * <code>repeated string cells = 2;</code>
     */
    java.lang.String getCells(int index);
    /**
     * <pre>
     * Cells that map to this alias
     * </pre>
     *
     * <code>repeated string cells = 2;</code>
     */
    com.google.protobuf.ByteString
        getCellsBytes(int index);
  }
  /**
   * <pre>
   * CellsAlias 
   * </pre>
   *
   * Protobuf type {@code topodata.CellsAlias}
   */
  public  static final class CellsAlias extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:topodata.CellsAlias)
      CellsAliasOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CellsAlias.newBuilder() to construct.
    private CellsAlias(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CellsAlias() {
      cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CellsAlias(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cells_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              cells_.add(s);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cells_ = cells_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Topodata.internal_static_topodata_CellsAlias_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Topodata.internal_static_topodata_CellsAlias_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Topodata.CellsAlias.class, io.vitess.proto.Topodata.CellsAlias.Builder.class);
    }

    public static final int CELLS_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList cells_;
    /**
     * <pre>
     * Cells that map to this alias
     * </pre>
     *
     * <code>repeated string cells = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCellsList() {
      return cells_;
    }
    /**
     * <pre>
     * Cells that map to this alias
     * </pre>
     *
     * <code>repeated string cells = 2;</code>
     */
    public int getCellsCount() {
      return cells_.size();
    }
    /**
     * <pre>
     * Cells that map to this alias
     * </pre>
     *
     * <code>repeated string cells = 2;</code>
     */
    public java.lang.String getCells(int index) {
      return cells_.get(index);
    }
    /**
     * <pre>
     * Cells that map to this alias
     * </pre>
     *
     * <code>repeated string cells = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCellsBytes(int index) {
      return cells_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < cells_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, cells_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cells_.size(); i++) {
          dataSize += computeStringSizeNoTag(cells_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getCellsList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Topodata.CellsAlias)) {
        return super.equals(obj);
      }
      io.vitess.proto.Topodata.CellsAlias other = (io.vitess.proto.Topodata.CellsAlias) obj;

      boolean result = true;
      result = result && getCellsList()
          .equals(other.getCellsList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCellsCount() > 0) {
        hash = (37 * hash) + CELLS_FIELD_NUMBER;
        hash = (53 * hash) + getCellsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Topodata.CellsAlias parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Topodata.CellsAlias parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Topodata.CellsAlias prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * CellsAlias 
     * </pre>
     *
     * Protobuf type {@code topodata.CellsAlias}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:topodata.CellsAlias)
        io.vitess.proto.Topodata.CellsAliasOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Topodata.internal_static_topodata_CellsAlias_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Topodata.internal_static_topodata_CellsAlias_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Topodata.CellsAlias.class, io.vitess.proto.Topodata.CellsAlias.Builder.class);
      }

      // Construct using io.vitess.proto.Topodata.CellsAlias.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Topodata.internal_static_topodata_CellsAlias_descriptor;
      }

      public io.vitess.proto.Topodata.CellsAlias getDefaultInstanceForType() {
        return io.vitess.proto.Topodata.CellsAlias.getDefaultInstance();
      }

      public io.vitess.proto.Topodata.CellsAlias build() {
        io.vitess.proto.Topodata.CellsAlias result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Topodata.CellsAlias buildPartial() {
        io.vitess.proto.Topodata.CellsAlias result = new io.vitess.proto.Topodata.CellsAlias(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cells_ = cells_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cells_ = cells_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Topodata.CellsAlias) {
          return mergeFrom((io.vitess.proto.Topodata.CellsAlias)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Topodata.CellsAlias other) {
        if (other == io.vitess.proto.Topodata.CellsAlias.getDefaultInstance()) return this;
        if (!other.cells_.isEmpty()) {
          if (cells_.isEmpty()) {
            cells_ = other.cells_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCellsIsMutable();
            cells_.addAll(other.cells_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Topodata.CellsAlias parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Topodata.CellsAlias) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCellsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cells_ = new com.google.protobuf.LazyStringArrayList(cells_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCellsList() {
        return cells_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public int getCellsCount() {
        return cells_.size();
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public java.lang.String getCells(int index) {
        return cells_.get(index);
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCellsBytes(int index) {
        return cells_.getByteString(index);
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public Builder setCells(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCellsIsMutable();
        cells_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public Builder addCells(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCellsIsMutable();
        cells_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public Builder addAllCells(
          java.lang.Iterable<java.lang.String> values) {
        ensureCellsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, cells_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public Builder clearCells() {
        cells_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cells that map to this alias
       * </pre>
       *
       * <code>repeated string cells = 2;</code>
       */
      public Builder addCellsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureCellsIsMutable();
        cells_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:topodata.CellsAlias)
    }

    // @@protoc_insertion_point(class_scope:topodata.CellsAlias)
    private static final io.vitess.proto.Topodata.CellsAlias DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Topodata.CellsAlias();
    }

    public static io.vitess.proto.Topodata.CellsAlias getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CellsAlias>
        PARSER = new com.google.protobuf.AbstractParser<CellsAlias>() {
      public CellsAlias parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CellsAlias(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CellsAlias> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CellsAlias> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Topodata.CellsAlias getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_KeyRange_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_KeyRange_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_TabletAlias_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_TabletAlias_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Tablet_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Tablet_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Tablet_PortMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Tablet_PortMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Tablet_TagsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Tablet_TagsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Shard_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Shard_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Shard_ServedType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Shard_ServedType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Shard_SourceShard_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Shard_SourceShard_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Shard_TabletControl_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Shard_TabletControl_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Keyspace_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Keyspace_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_Keyspace_ServedFrom_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_Keyspace_ServedFrom_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_ShardReplication_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_ShardReplication_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_ShardReplication_Node_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_ShardReplication_Node_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_ShardReference_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_ShardReference_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_ShardTabletControl_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_ShardTabletControl_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_SrvKeyspace_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_SrvKeyspace_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_SrvKeyspace_KeyspacePartition_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_SrvKeyspace_KeyspacePartition_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_SrvKeyspace_ServedFrom_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_SrvKeyspace_ServedFrom_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_CellInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_CellInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_topodata_CellsAlias_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_topodata_CellsAlias_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016topodata.proto\022\010topodata\032\014vttime.proto" +
      "\"&\n\010KeyRange\022\r\n\005start\030\001 \001(\014\022\013\n\003end\030\002 \001(\014" +
      "\"(\n\013TabletAlias\022\014\n\004cell\030\001 \001(\t\022\013\n\003uid\030\002 \001" +
      "(\004\"\344\003\n\006Tablet\022$\n\005alias\030\001 \001(\0132\025.topodata." +
      "TabletAlias\022\020\n\010hostname\030\002 \001(\t\022/\n\010port_ma" +
      "p\030\004 \003(\0132\035.topodata.Tablet.PortMapEntry\022\020" +
      "\n\010keyspace\030\005 \001(\t\022\r\n\005shard\030\006 \001(\t\022%\n\tkey_r" +
      "ange\030\007 \001(\0132\022.topodata.KeyRange\022\"\n\004type\030\010" +
      " \001(\0162\024.topodata.TabletType\022\030\n\020db_name_ov" +
      "erride\030\t \001(\t\022(\n\004tags\030\n \003(\0132\032.topodata.Ta" +
      "blet.TagsEntry\022\026\n\016mysql_hostname\030\014 \001(\t\022\022" +
      "\n\nmysql_port\030\r \001(\005\022,\n\026master_term_start_" +
      "time\030\016 \001(\0132\014.vttime.Time\032.\n\014PortMapEntry" +
      "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\032+\n\tTags" +
      "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001J\004\010" +
      "\003\020\004J\004\010\013\020\014\"\201\005\n\005Shard\022+\n\014master_alias\030\001 \001(" +
      "\0132\025.topodata.TabletAlias\022,\n\026master_term_" +
      "start_time\030\010 \001(\0132\014.vttime.Time\022%\n\tkey_ra" +
      "nge\030\002 \001(\0132\022.topodata.KeyRange\0220\n\014served_" +
      "types\030\003 \003(\0132\032.topodata.Shard.ServedType\022" +
      "2\n\rsource_shards\030\004 \003(\0132\033.topodata.Shard." +
      "SourceShard\0226\n\017tablet_controls\030\006 \003(\0132\035.t" +
      "opodata.Shard.TabletControl\022\031\n\021is_master" +
      "_serving\030\007 \001(\010\032F\n\nServedType\022)\n\013tablet_t" +
      "ype\030\001 \001(\0162\024.topodata.TabletType\022\r\n\005cells" +
      "\030\002 \003(\t\032r\n\013SourceShard\022\013\n\003uid\030\001 \001(\r\022\020\n\010ke" +
      "yspace\030\002 \001(\t\022\r\n\005shard\030\003 \001(\t\022%\n\tkey_range" +
      "\030\004 \001(\0132\022.topodata.KeyRange\022\016\n\006tables\030\005 \003" +
      "(\t\032{\n\rTabletControl\022)\n\013tablet_type\030\001 \001(\016" +
      "2\024.topodata.TabletType\022\r\n\005cells\030\002 \003(\t\022\032\n" +
      "\022blacklisted_tables\030\004 \003(\t\022\016\n\006frozen\030\005 \001(" +
      "\010J\004\010\003\020\004J\004\010\005\020\006\"\340\002\n\010Keyspace\022\034\n\024sharding_c" +
      "olumn_name\030\001 \001(\t\0226\n\024sharding_column_type" +
      "\030\002 \001(\0162\030.topodata.KeyspaceIdType\0223\n\014serv" +
      "ed_froms\030\004 \003(\0132\035.topodata.Keyspace.Serve" +
      "dFrom\022-\n\rkeyspace_type\030\005 \001(\0162\026.topodata." +
      "KeyspaceType\022\025\n\rbase_keyspace\030\006 \001(\t\022#\n\rs" +
      "napshot_time\030\007 \001(\0132\014.vttime.Time\032X\n\nServ" +
      "edFrom\022)\n\013tablet_type\030\001 \001(\0162\024.topodata.T" +
      "abletType\022\r\n\005cells\030\002 \003(\t\022\020\n\010keyspace\030\003 \001" +
      "(\tJ\004\010\003\020\004\"w\n\020ShardReplication\022.\n\005nodes\030\001 " +
      "\003(\0132\037.topodata.ShardReplication.Node\0323\n\004" +
      "Node\022+\n\014tablet_alias\030\001 \001(\0132\025.topodata.Ta" +
      "bletAlias\"E\n\016ShardReference\022\014\n\004name\030\001 \001(" +
      "\t\022%\n\tkey_range\030\002 \001(\0132\022.topodata.KeyRange" +
      "\"i\n\022ShardTabletControl\022\014\n\004name\030\001 \001(\t\022%\n\t" +
      "key_range\030\002 \001(\0132\022.topodata.KeyRange\022\036\n\026q" +
      "uery_service_disabled\030\003 \001(\010\"\332\003\n\013SrvKeysp" +
      "ace\022;\n\npartitions\030\001 \003(\0132\'.topodata.SrvKe" +
      "yspace.KeyspacePartition\022\034\n\024sharding_col" +
      "umn_name\030\002 \001(\t\0226\n\024sharding_column_type\030\003" +
      " \001(\0162\030.topodata.KeyspaceIdType\0225\n\013served" +
      "_from\030\004 \003(\0132 .topodata.SrvKeyspace.Serve" +
      "dFrom\032\257\001\n\021KeyspacePartition\022)\n\013served_ty" +
      "pe\030\001 \001(\0162\024.topodata.TabletType\0222\n\020shard_" +
      "references\030\002 \003(\0132\030.topodata.ShardReferen" +
      "ce\022;\n\025shard_tablet_controls\030\003 \003(\0132\034.topo" +
      "data.ShardTabletControl\032I\n\nServedFrom\022)\n" +
      "\013tablet_type\030\001 \001(\0162\024.topodata.TabletType" +
      "\022\020\n\010keyspace\030\002 \001(\tJ\004\010\005\020\006\"M\n\010CellInfo\022\026\n\016" +
      "server_address\030\001 \001(\t\022\014\n\004root\030\002 \001(\t\022\025\n\rpr" +
      "oxy_address\030\004 \001(\tJ\004\010\003\020\004\"\033\n\nCellsAlias\022\r\n" +
      "\005cells\030\002 \003(\t*(\n\014KeyspaceType\022\n\n\006NORMAL\020\000" +
      "\022\014\n\010SNAPSHOT\020\001*2\n\016KeyspaceIdType\022\t\n\005UNSE" +
      "T\020\000\022\n\n\006UINT64\020\001\022\t\n\005BYTES\020\002*\220\001\n\nTabletTyp" +
      "e\022\013\n\007UNKNOWN\020\000\022\n\n\006MASTER\020\001\022\013\n\007REPLICA\020\002\022" +
      "\n\n\006RDONLY\020\003\022\t\n\005BATCH\020\003\022\t\n\005SPARE\020\004\022\020\n\014EXP" +
      "ERIMENTAL\020\005\022\n\n\006BACKUP\020\006\022\013\n\007RESTORE\020\007\022\013\n\007" +
      "DRAINED\020\010\032\002\020\001B8\n\017io.vitess.protoZ%vitess" +
      ".io/vitess/go/vt/proto/topodatab\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          vttime.Vttime.getDescriptor(),
        }, assigner);
    internal_static_topodata_KeyRange_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_topodata_KeyRange_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_KeyRange_descriptor,
        new java.lang.String[] { "Start", "End", });
    internal_static_topodata_TabletAlias_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_topodata_TabletAlias_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_TabletAlias_descriptor,
        new java.lang.String[] { "Cell", "Uid", });
    internal_static_topodata_Tablet_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_topodata_Tablet_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Tablet_descriptor,
        new java.lang.String[] { "Alias", "Hostname", "PortMap", "Keyspace", "Shard", "KeyRange", "Type", "DbNameOverride", "Tags", "MysqlHostname", "MysqlPort", "MasterTermStartTime", });
    internal_static_topodata_Tablet_PortMapEntry_descriptor =
      internal_static_topodata_Tablet_descriptor.getNestedTypes().get(0);
    internal_static_topodata_Tablet_PortMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Tablet_PortMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_topodata_Tablet_TagsEntry_descriptor =
      internal_static_topodata_Tablet_descriptor.getNestedTypes().get(1);
    internal_static_topodata_Tablet_TagsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Tablet_TagsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_topodata_Shard_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_topodata_Shard_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Shard_descriptor,
        new java.lang.String[] { "MasterAlias", "MasterTermStartTime", "KeyRange", "ServedTypes", "SourceShards", "TabletControls", "IsMasterServing", });
    internal_static_topodata_Shard_ServedType_descriptor =
      internal_static_topodata_Shard_descriptor.getNestedTypes().get(0);
    internal_static_topodata_Shard_ServedType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Shard_ServedType_descriptor,
        new java.lang.String[] { "TabletType", "Cells", });
    internal_static_topodata_Shard_SourceShard_descriptor =
      internal_static_topodata_Shard_descriptor.getNestedTypes().get(1);
    internal_static_topodata_Shard_SourceShard_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Shard_SourceShard_descriptor,
        new java.lang.String[] { "Uid", "Keyspace", "Shard", "KeyRange", "Tables", });
    internal_static_topodata_Shard_TabletControl_descriptor =
      internal_static_topodata_Shard_descriptor.getNestedTypes().get(2);
    internal_static_topodata_Shard_TabletControl_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Shard_TabletControl_descriptor,
        new java.lang.String[] { "TabletType", "Cells", "BlacklistedTables", "Frozen", });
    internal_static_topodata_Keyspace_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_topodata_Keyspace_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Keyspace_descriptor,
        new java.lang.String[] { "ShardingColumnName", "ShardingColumnType", "ServedFroms", "KeyspaceType", "BaseKeyspace", "SnapshotTime", });
    internal_static_topodata_Keyspace_ServedFrom_descriptor =
      internal_static_topodata_Keyspace_descriptor.getNestedTypes().get(0);
    internal_static_topodata_Keyspace_ServedFrom_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_Keyspace_ServedFrom_descriptor,
        new java.lang.String[] { "TabletType", "Cells", "Keyspace", });
    internal_static_topodata_ShardReplication_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_topodata_ShardReplication_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_ShardReplication_descriptor,
        new java.lang.String[] { "Nodes", });
    internal_static_topodata_ShardReplication_Node_descriptor =
      internal_static_topodata_ShardReplication_descriptor.getNestedTypes().get(0);
    internal_static_topodata_ShardReplication_Node_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_ShardReplication_Node_descriptor,
        new java.lang.String[] { "TabletAlias", });
    internal_static_topodata_ShardReference_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_topodata_ShardReference_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_ShardReference_descriptor,
        new java.lang.String[] { "Name", "KeyRange", });
    internal_static_topodata_ShardTabletControl_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_topodata_ShardTabletControl_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_ShardTabletControl_descriptor,
        new java.lang.String[] { "Name", "KeyRange", "QueryServiceDisabled", });
    internal_static_topodata_SrvKeyspace_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_topodata_SrvKeyspace_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_SrvKeyspace_descriptor,
        new java.lang.String[] { "Partitions", "ShardingColumnName", "ShardingColumnType", "ServedFrom", });
    internal_static_topodata_SrvKeyspace_KeyspacePartition_descriptor =
      internal_static_topodata_SrvKeyspace_descriptor.getNestedTypes().get(0);
    internal_static_topodata_SrvKeyspace_KeyspacePartition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_SrvKeyspace_KeyspacePartition_descriptor,
        new java.lang.String[] { "ServedType", "ShardReferences", "ShardTabletControls", });
    internal_static_topodata_SrvKeyspace_ServedFrom_descriptor =
      internal_static_topodata_SrvKeyspace_descriptor.getNestedTypes().get(1);
    internal_static_topodata_SrvKeyspace_ServedFrom_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_SrvKeyspace_ServedFrom_descriptor,
        new java.lang.String[] { "TabletType", "Keyspace", });
    internal_static_topodata_CellInfo_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_topodata_CellInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_CellInfo_descriptor,
        new java.lang.String[] { "ServerAddress", "Root", "ProxyAddress", });
    internal_static_topodata_CellsAlias_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_topodata_CellsAlias_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_topodata_CellsAlias_descriptor,
        new java.lang.String[] { "Cells", });
    vttime.Vttime.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
