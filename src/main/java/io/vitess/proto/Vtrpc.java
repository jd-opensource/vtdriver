// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vtrpc.proto

package io.vitess.proto;

public final class Vtrpc {
  private Vtrpc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Code represents canonical error codes. The names, numbers and comments
   * must match the ones defined by grpc:
   * https://godoc.org/google.golang.org/grpc/codes.
   * </pre>
   *
   * Protobuf enum {@code vtrpc.Code}
   */
  public enum Code
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * OK is returned on success.
     * </pre>
     *
     * <code>OK = 0;</code>
     */
    OK(0),
    /**
     * <pre>
     * CANCELED indicates the operation was cancelled (typically by the caller).
     * </pre>
     *
     * <code>CANCELED = 1;</code>
     */
    CANCELED(1),
    /**
     * <pre>
     * UNKNOWN error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     * </pre>
     *
     * <code>UNKNOWN = 2;</code>
     */
    UNKNOWN(2),
    /**
     * <pre>
     * INVALID_ARGUMENT indicates client specified an invalid argument.
     * Note that this differs from FAILED_PRECONDITION. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     * </pre>
     *
     * <code>INVALID_ARGUMENT = 3;</code>
     */
    INVALID_ARGUMENT(3),
    /**
     * <pre>
     * DEADLINE_EXCEEDED means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     * </pre>
     *
     * <code>DEADLINE_EXCEEDED = 4;</code>
     */
    DEADLINE_EXCEEDED(4),
    /**
     * <pre>
     * NOT_FOUND means some requested entity (e.g., file or directory) was
     * not found.
     * </pre>
     *
     * <code>NOT_FOUND = 5;</code>
     */
    NOT_FOUND(5),
    /**
     * <pre>
     * ALREADY_EXISTS means an attempt to create an entity failed because one
     * already exists.
     * </pre>
     *
     * <code>ALREADY_EXISTS = 6;</code>
     */
    ALREADY_EXISTS(6),
    /**
     * <pre>
     * PERMISSION_DENIED indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use RESOURCE_EXHAUSTED
     * instead for those errors).  It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     * </pre>
     *
     * <code>PERMISSION_DENIED = 7;</code>
     */
    PERMISSION_DENIED(7),
    /**
     * <pre>
     * UNAUTHENTICATED indicates the request does not have valid
     * authentication credentials for the operation.
     * </pre>
     *
     * <code>UNAUTHENTICATED = 16;</code>
     */
    UNAUTHENTICATED(16),
    /**
     * <pre>
     * RESOURCE_EXHAUSTED indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     * </pre>
     *
     * <code>RESOURCE_EXHAUSTED = 8;</code>
     */
    RESOURCE_EXHAUSTED(8),
    /**
     * <pre>
     * FAILED_PRECONDITION indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed.  E.g., if an "rmdir"
     *      fails because the directory is non-empty, FAILED_PRECONDITION
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FAILED_PRECONDITION if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     * </pre>
     *
     * <code>FAILED_PRECONDITION = 9;</code>
     */
    FAILED_PRECONDITION(9),
    /**
     * <pre>
     * ABORTED indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     * </pre>
     *
     * <code>ABORTED = 10;</code>
     */
    ABORTED(10),
    /**
     * <pre>
     * OUT_OF_RANGE means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate INVALID_ARGUMENT if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OUT_OF_RANGE if asked to read from an offset past the current
     * file size.
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OUT_OF_RANGE error to detect when
     * they are done.
     * </pre>
     *
     * <code>OUT_OF_RANGE = 11;</code>
     */
    OUT_OF_RANGE(11),
    /**
     * <pre>
     * UNIMPLEMENTED indicates operation is not implemented or not
     * supported/enabled in this service.
     * </pre>
     *
     * <code>UNIMPLEMENTED = 12;</code>
     */
    UNIMPLEMENTED(12),
    /**
     * <pre>
     * INTERNAL errors. Means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     * </pre>
     *
     * <code>INTERNAL = 13;</code>
     */
    INTERNAL(13),
    /**
     * <pre>
     * UNAVAILABLE indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff.
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     * </pre>
     *
     * <code>UNAVAILABLE = 14;</code>
     */
    UNAVAILABLE(14),
    /**
     * <pre>
     * DATA_LOSS indicates unrecoverable data loss or corruption.
     * </pre>
     *
     * <code>DATA_LOSS = 15;</code>
     */
    DATA_LOSS(15),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * OK is returned on success.
     * </pre>
     *
     * <code>OK = 0;</code>
     */
    public static final int OK_VALUE = 0;
    /**
     * <pre>
     * CANCELED indicates the operation was cancelled (typically by the caller).
     * </pre>
     *
     * <code>CANCELED = 1;</code>
     */
    public static final int CANCELED_VALUE = 1;
    /**
     * <pre>
     * UNKNOWN error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     * </pre>
     *
     * <code>UNKNOWN = 2;</code>
     */
    public static final int UNKNOWN_VALUE = 2;
    /**
     * <pre>
     * INVALID_ARGUMENT indicates client specified an invalid argument.
     * Note that this differs from FAILED_PRECONDITION. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     * </pre>
     *
     * <code>INVALID_ARGUMENT = 3;</code>
     */
    public static final int INVALID_ARGUMENT_VALUE = 3;
    /**
     * <pre>
     * DEADLINE_EXCEEDED means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     * </pre>
     *
     * <code>DEADLINE_EXCEEDED = 4;</code>
     */
    public static final int DEADLINE_EXCEEDED_VALUE = 4;
    /**
     * <pre>
     * NOT_FOUND means some requested entity (e.g., file or directory) was
     * not found.
     * </pre>
     *
     * <code>NOT_FOUND = 5;</code>
     */
    public static final int NOT_FOUND_VALUE = 5;
    /**
     * <pre>
     * ALREADY_EXISTS means an attempt to create an entity failed because one
     * already exists.
     * </pre>
     *
     * <code>ALREADY_EXISTS = 6;</code>
     */
    public static final int ALREADY_EXISTS_VALUE = 6;
    /**
     * <pre>
     * PERMISSION_DENIED indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use RESOURCE_EXHAUSTED
     * instead for those errors).  It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     * </pre>
     *
     * <code>PERMISSION_DENIED = 7;</code>
     */
    public static final int PERMISSION_DENIED_VALUE = 7;
    /**
     * <pre>
     * UNAUTHENTICATED indicates the request does not have valid
     * authentication credentials for the operation.
     * </pre>
     *
     * <code>UNAUTHENTICATED = 16;</code>
     */
    public static final int UNAUTHENTICATED_VALUE = 16;
    /**
     * <pre>
     * RESOURCE_EXHAUSTED indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     * </pre>
     *
     * <code>RESOURCE_EXHAUSTED = 8;</code>
     */
    public static final int RESOURCE_EXHAUSTED_VALUE = 8;
    /**
     * <pre>
     * FAILED_PRECONDITION indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed.  E.g., if an "rmdir"
     *      fails because the directory is non-empty, FAILED_PRECONDITION
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FAILED_PRECONDITION if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     * </pre>
     *
     * <code>FAILED_PRECONDITION = 9;</code>
     */
    public static final int FAILED_PRECONDITION_VALUE = 9;
    /**
     * <pre>
     * ABORTED indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     * </pre>
     *
     * <code>ABORTED = 10;</code>
     */
    public static final int ABORTED_VALUE = 10;
    /**
     * <pre>
     * OUT_OF_RANGE means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate INVALID_ARGUMENT if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OUT_OF_RANGE if asked to read from an offset past the current
     * file size.
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OUT_OF_RANGE error to detect when
     * they are done.
     * </pre>
     *
     * <code>OUT_OF_RANGE = 11;</code>
     */
    public static final int OUT_OF_RANGE_VALUE = 11;
    /**
     * <pre>
     * UNIMPLEMENTED indicates operation is not implemented or not
     * supported/enabled in this service.
     * </pre>
     *
     * <code>UNIMPLEMENTED = 12;</code>
     */
    public static final int UNIMPLEMENTED_VALUE = 12;
    /**
     * <pre>
     * INTERNAL errors. Means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     * </pre>
     *
     * <code>INTERNAL = 13;</code>
     */
    public static final int INTERNAL_VALUE = 13;
    /**
     * <pre>
     * UNAVAILABLE indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff.
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     * </pre>
     *
     * <code>UNAVAILABLE = 14;</code>
     */
    public static final int UNAVAILABLE_VALUE = 14;
    /**
     * <pre>
     * DATA_LOSS indicates unrecoverable data loss or corruption.
     * </pre>
     *
     * <code>DATA_LOSS = 15;</code>
     */
    public static final int DATA_LOSS_VALUE = 15;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Code valueOf(int value) {
      return forNumber(value);
    }

    public static Code forNumber(int value) {
      switch (value) {
        case 0: return OK;
        case 1: return CANCELED;
        case 2: return UNKNOWN;
        case 3: return INVALID_ARGUMENT;
        case 4: return DEADLINE_EXCEEDED;
        case 5: return NOT_FOUND;
        case 6: return ALREADY_EXISTS;
        case 7: return PERMISSION_DENIED;
        case 16: return UNAUTHENTICATED;
        case 8: return RESOURCE_EXHAUSTED;
        case 9: return FAILED_PRECONDITION;
        case 10: return ABORTED;
        case 11: return OUT_OF_RANGE;
        case 12: return UNIMPLEMENTED;
        case 13: return INTERNAL;
        case 14: return UNAVAILABLE;
        case 15: return DATA_LOSS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Code>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Code> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Code>() {
            public Code findValueByNumber(int number) {
              return Code.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.vitess.proto.Vtrpc.getDescriptor().getEnumTypes().get(0);
    }

    private static final Code[] VALUES = values();

    public static Code valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Code(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:vtrpc.Code)
  }

  /**
   * <pre>
   * LegacyErrorCode is the enum values for Errors. This type is deprecated.
   * Use Code instead. Background: In the initial design, we thought
   * that we may end up with a different list of canonical error codes
   * than the ones defined by grpc. In hindsight, we realize that
   * the grpc error codes are fairly generic and mostly sufficient.
   * In order to avoid confusion, this type will be deprecated in
   * favor of the new Code that matches exactly what grpc defines.
   * Some names below have a _LEGACY suffix. This is to prevent
   * name collisions with Code.
   * </pre>
   *
   * Protobuf enum {@code vtrpc.LegacyErrorCode}
   */
  public enum LegacyErrorCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * SUCCESS_LEGACY is returned from a successful call.
     * </pre>
     *
     * <code>SUCCESS_LEGACY = 0;</code>
     */
    SUCCESS_LEGACY(0),
    /**
     * <pre>
     * CANCELLED_LEGACY means that the context was cancelled (and noticed in the app layer,
     * as opposed to the RPC layer).
     * </pre>
     *
     * <code>CANCELLED_LEGACY = 1;</code>
     */
    CANCELLED_LEGACY(1),
    /**
     * <pre>
     * UNKNOWN_ERROR_LEGACY includes:
     * 1. MySQL error codes that we don't explicitly handle.
     * 2. MySQL response that wasn't as expected. For example, we might expect a MySQL
     *  timestamp to be returned in a particular way, but it wasn't.
     * 3. Anything else that doesn't fall into a different bucket.
     * </pre>
     *
     * <code>UNKNOWN_ERROR_LEGACY = 2;</code>
     */
    UNKNOWN_ERROR_LEGACY(2),
    /**
     * <pre>
     * BAD_INPUT_LEGACY is returned when an end-user either sends SQL that couldn't be parsed correctly,
     * or tries a query that isn't supported by Vitess.
     * </pre>
     *
     * <code>BAD_INPUT_LEGACY = 3;</code>
     */
    BAD_INPUT_LEGACY(3),
    /**
     * <pre>
     * DEADLINE_EXCEEDED_LEGACY is returned when an action is taking longer than a given timeout.
     * </pre>
     *
     * <code>DEADLINE_EXCEEDED_LEGACY = 4;</code>
     */
    DEADLINE_EXCEEDED_LEGACY(4),
    /**
     * <pre>
     * INTEGRITY_ERROR_LEGACY is returned on integrity error from MySQL, usually due to
     * duplicate primary keys.
     * </pre>
     *
     * <code>INTEGRITY_ERROR_LEGACY = 5;</code>
     */
    INTEGRITY_ERROR_LEGACY(5),
    /**
     * <pre>
     * PERMISSION_DENIED_LEGACY errors are returned when a user requests access to something
     * that they don't have permissions for.
     * </pre>
     *
     * <code>PERMISSION_DENIED_LEGACY = 6;</code>
     */
    PERMISSION_DENIED_LEGACY(6),
    /**
     * <pre>
     * RESOURCE_EXHAUSTED_LEGACY is returned when a query exceeds its quota in some dimension
     * and can't be completed due to that. Queries that return RESOURCE_EXHAUSTED
     * should not be retried, as it could be detrimental to the server's health.
     * Examples of errors that will cause the RESOURCE_EXHAUSTED code:
     * 1. TxPoolFull: this is retried server-side, and is only returned as an error
     *  if the server-side retries failed.
     * 2. Query is killed due to it taking too long.
     * </pre>
     *
     * <code>RESOURCE_EXHAUSTED_LEGACY = 7;</code>
     */
    RESOURCE_EXHAUSTED_LEGACY(7),
    /**
     * <pre>
     * QUERY_NOT_SERVED_LEGACY means that a query could not be served right now.
     * Client can interpret it as: "the tablet that you sent this query to cannot
     * serve the query right now, try a different tablet or try again later."
     * This could be due to various reasons: QueryService is not serving, should
     * not be serving, wrong shard, wrong tablet type, blacklisted table, etc.
     * Clients that receive this error should usually retry the query, but after taking
     * the appropriate steps to make sure that the query will get sent to the correct
     * tablet.
     * </pre>
     *
     * <code>QUERY_NOT_SERVED_LEGACY = 8;</code>
     */
    QUERY_NOT_SERVED_LEGACY(8),
    /**
     * <pre>
     * NOT_IN_TX_LEGACY means that we're not currently in a transaction, but we should be.
     * </pre>
     *
     * <code>NOT_IN_TX_LEGACY = 9;</code>
     */
    NOT_IN_TX_LEGACY(9),
    /**
     * <pre>
     * INTERNAL_ERROR_LEGACY means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     * </pre>
     *
     * <code>INTERNAL_ERROR_LEGACY = 10;</code>
     */
    INTERNAL_ERROR_LEGACY(10),
    /**
     * <pre>
     * TRANSIENT_ERROR_LEGACY is used for when there is some error that we expect we can
     * recover from automatically - often due to a resource limit temporarily being
     * reached. Retrying this error, with an exponential backoff, should succeed.
     * Clients should be able to successfully retry the query on the same backends.
     * Examples of things that can trigger this error:
     * 1. Query has been throttled
     * 2. VtGate could have request backlog
     * </pre>
     *
     * <code>TRANSIENT_ERROR_LEGACY = 11;</code>
     */
    TRANSIENT_ERROR_LEGACY(11),
    /**
     * <pre>
     * UNAUTHENTICATED_LEGACY errors are returned when a user requests access to something,
     * and we're unable to verify the user's authentication.
     * </pre>
     *
     * <code>UNAUTHENTICATED_LEGACY = 12;</code>
     */
    UNAUTHENTICATED_LEGACY(12),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * SUCCESS_LEGACY is returned from a successful call.
     * </pre>
     *
     * <code>SUCCESS_LEGACY = 0;</code>
     */
    public static final int SUCCESS_LEGACY_VALUE = 0;
    /**
     * <pre>
     * CANCELLED_LEGACY means that the context was cancelled (and noticed in the app layer,
     * as opposed to the RPC layer).
     * </pre>
     *
     * <code>CANCELLED_LEGACY = 1;</code>
     */
    public static final int CANCELLED_LEGACY_VALUE = 1;
    /**
     * <pre>
     * UNKNOWN_ERROR_LEGACY includes:
     * 1. MySQL error codes that we don't explicitly handle.
     * 2. MySQL response that wasn't as expected. For example, we might expect a MySQL
     *  timestamp to be returned in a particular way, but it wasn't.
     * 3. Anything else that doesn't fall into a different bucket.
     * </pre>
     *
     * <code>UNKNOWN_ERROR_LEGACY = 2;</code>
     */
    public static final int UNKNOWN_ERROR_LEGACY_VALUE = 2;
    /**
     * <pre>
     * BAD_INPUT_LEGACY is returned when an end-user either sends SQL that couldn't be parsed correctly,
     * or tries a query that isn't supported by Vitess.
     * </pre>
     *
     * <code>BAD_INPUT_LEGACY = 3;</code>
     */
    public static final int BAD_INPUT_LEGACY_VALUE = 3;
    /**
     * <pre>
     * DEADLINE_EXCEEDED_LEGACY is returned when an action is taking longer than a given timeout.
     * </pre>
     *
     * <code>DEADLINE_EXCEEDED_LEGACY = 4;</code>
     */
    public static final int DEADLINE_EXCEEDED_LEGACY_VALUE = 4;
    /**
     * <pre>
     * INTEGRITY_ERROR_LEGACY is returned on integrity error from MySQL, usually due to
     * duplicate primary keys.
     * </pre>
     *
     * <code>INTEGRITY_ERROR_LEGACY = 5;</code>
     */
    public static final int INTEGRITY_ERROR_LEGACY_VALUE = 5;
    /**
     * <pre>
     * PERMISSION_DENIED_LEGACY errors are returned when a user requests access to something
     * that they don't have permissions for.
     * </pre>
     *
     * <code>PERMISSION_DENIED_LEGACY = 6;</code>
     */
    public static final int PERMISSION_DENIED_LEGACY_VALUE = 6;
    /**
     * <pre>
     * RESOURCE_EXHAUSTED_LEGACY is returned when a query exceeds its quota in some dimension
     * and can't be completed due to that. Queries that return RESOURCE_EXHAUSTED
     * should not be retried, as it could be detrimental to the server's health.
     * Examples of errors that will cause the RESOURCE_EXHAUSTED code:
     * 1. TxPoolFull: this is retried server-side, and is only returned as an error
     *  if the server-side retries failed.
     * 2. Query is killed due to it taking too long.
     * </pre>
     *
     * <code>RESOURCE_EXHAUSTED_LEGACY = 7;</code>
     */
    public static final int RESOURCE_EXHAUSTED_LEGACY_VALUE = 7;
    /**
     * <pre>
     * QUERY_NOT_SERVED_LEGACY means that a query could not be served right now.
     * Client can interpret it as: "the tablet that you sent this query to cannot
     * serve the query right now, try a different tablet or try again later."
     * This could be due to various reasons: QueryService is not serving, should
     * not be serving, wrong shard, wrong tablet type, blacklisted table, etc.
     * Clients that receive this error should usually retry the query, but after taking
     * the appropriate steps to make sure that the query will get sent to the correct
     * tablet.
     * </pre>
     *
     * <code>QUERY_NOT_SERVED_LEGACY = 8;</code>
     */
    public static final int QUERY_NOT_SERVED_LEGACY_VALUE = 8;
    /**
     * <pre>
     * NOT_IN_TX_LEGACY means that we're not currently in a transaction, but we should be.
     * </pre>
     *
     * <code>NOT_IN_TX_LEGACY = 9;</code>
     */
    public static final int NOT_IN_TX_LEGACY_VALUE = 9;
    /**
     * <pre>
     * INTERNAL_ERROR_LEGACY means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     * </pre>
     *
     * <code>INTERNAL_ERROR_LEGACY = 10;</code>
     */
    public static final int INTERNAL_ERROR_LEGACY_VALUE = 10;
    /**
     * <pre>
     * TRANSIENT_ERROR_LEGACY is used for when there is some error that we expect we can
     * recover from automatically - often due to a resource limit temporarily being
     * reached. Retrying this error, with an exponential backoff, should succeed.
     * Clients should be able to successfully retry the query on the same backends.
     * Examples of things that can trigger this error:
     * 1. Query has been throttled
     * 2. VtGate could have request backlog
     * </pre>
     *
     * <code>TRANSIENT_ERROR_LEGACY = 11;</code>
     */
    public static final int TRANSIENT_ERROR_LEGACY_VALUE = 11;
    /**
     * <pre>
     * UNAUTHENTICATED_LEGACY errors are returned when a user requests access to something,
     * and we're unable to verify the user's authentication.
     * </pre>
     *
     * <code>UNAUTHENTICATED_LEGACY = 12;</code>
     */
    public static final int UNAUTHENTICATED_LEGACY_VALUE = 12;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LegacyErrorCode valueOf(int value) {
      return forNumber(value);
    }

    public static LegacyErrorCode forNumber(int value) {
      switch (value) {
        case 0: return SUCCESS_LEGACY;
        case 1: return CANCELLED_LEGACY;
        case 2: return UNKNOWN_ERROR_LEGACY;
        case 3: return BAD_INPUT_LEGACY;
        case 4: return DEADLINE_EXCEEDED_LEGACY;
        case 5: return INTEGRITY_ERROR_LEGACY;
        case 6: return PERMISSION_DENIED_LEGACY;
        case 7: return RESOURCE_EXHAUSTED_LEGACY;
        case 8: return QUERY_NOT_SERVED_LEGACY;
        case 9: return NOT_IN_TX_LEGACY;
        case 10: return INTERNAL_ERROR_LEGACY;
        case 11: return TRANSIENT_ERROR_LEGACY;
        case 12: return UNAUTHENTICATED_LEGACY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LegacyErrorCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        LegacyErrorCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LegacyErrorCode>() {
            public LegacyErrorCode findValueByNumber(int number) {
              return LegacyErrorCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.vitess.proto.Vtrpc.getDescriptor().getEnumTypes().get(1);
    }

    private static final LegacyErrorCode[] VALUES = values();

    public static LegacyErrorCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private LegacyErrorCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:vtrpc.LegacyErrorCode)
  }

  public interface CallerIDOrBuilder extends
      // @@protoc_insertion_point(interface_extends:vtrpc.CallerID)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * principal is the effective user identifier. It is usually filled in
     * with whoever made the request to the appserver, if the request
     * came from an automated job or another system component.
     * If the request comes directly from the Internet, or if the Vitess client
     * takes action on its own accord, it is okay for this field to be absent.
     * </pre>
     *
     * <code>string principal = 1;</code>
     */
    java.lang.String getPrincipal();
    /**
     * <pre>
     * principal is the effective user identifier. It is usually filled in
     * with whoever made the request to the appserver, if the request
     * came from an automated job or another system component.
     * If the request comes directly from the Internet, or if the Vitess client
     * takes action on its own accord, it is okay for this field to be absent.
     * </pre>
     *
     * <code>string principal = 1;</code>
     */
    com.google.protobuf.ByteString
        getPrincipalBytes();

    /**
     * <pre>
     * component describes the running process of the effective caller.
     * It can for instance be the hostname:port of the servlet initiating the
     * database call, or the container engine ID used by the servlet.
     * </pre>
     *
     * <code>string component = 2;</code>
     */
    java.lang.String getComponent();
    /**
     * <pre>
     * component describes the running process of the effective caller.
     * It can for instance be the hostname:port of the servlet initiating the
     * database call, or the container engine ID used by the servlet.
     * </pre>
     *
     * <code>string component = 2;</code>
     */
    com.google.protobuf.ByteString
        getComponentBytes();

    /**
     * <pre>
     * subcomponent describes a component inisde the immediate caller which
     * is responsible for generating is request. Suggested values are a
     * servlet name or an API endpoint name.
     * </pre>
     *
     * <code>string subcomponent = 3;</code>
     */
    java.lang.String getSubcomponent();
    /**
     * <pre>
     * subcomponent describes a component inisde the immediate caller which
     * is responsible for generating is request. Suggested values are a
     * servlet name or an API endpoint name.
     * </pre>
     *
     * <code>string subcomponent = 3;</code>
     */
    com.google.protobuf.ByteString
        getSubcomponentBytes();
  }
  /**
   * <pre>
   * CallerID is passed along RPCs to identify the originating client
   * for a request. It is not meant to be secure, but only
   * informational.  The client can put whatever info they want in these
   * fields, and they will be trusted by the servers. The fields will
   * just be used for logging purposes, and to easily find a client.
   * VtGate propagates it to VtTablet, and VtTablet may use this
   * information for monitoring purposes, to display on dashboards, or
   * for blacklisting purposes.
   * </pre>
   *
   * Protobuf type {@code vtrpc.CallerID}
   */
  public  static final class CallerID extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:vtrpc.CallerID)
      CallerIDOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CallerID.newBuilder() to construct.
    private CallerID(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CallerID() {
      principal_ = "";
      component_ = "";
      subcomponent_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CallerID(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              principal_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              component_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              subcomponent_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Vtrpc.internal_static_vtrpc_CallerID_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Vtrpc.internal_static_vtrpc_CallerID_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Vtrpc.CallerID.class, io.vitess.proto.Vtrpc.CallerID.Builder.class);
    }

    public static final int PRINCIPAL_FIELD_NUMBER = 1;
    private volatile java.lang.Object principal_;
    /**
     * <pre>
     * principal is the effective user identifier. It is usually filled in
     * with whoever made the request to the appserver, if the request
     * came from an automated job or another system component.
     * If the request comes directly from the Internet, or if the Vitess client
     * takes action on its own accord, it is okay for this field to be absent.
     * </pre>
     *
     * <code>string principal = 1;</code>
     */
    public java.lang.String getPrincipal() {
      java.lang.Object ref = principal_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        principal_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * principal is the effective user identifier. It is usually filled in
     * with whoever made the request to the appserver, if the request
     * came from an automated job or another system component.
     * If the request comes directly from the Internet, or if the Vitess client
     * takes action on its own accord, it is okay for this field to be absent.
     * </pre>
     *
     * <code>string principal = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPrincipalBytes() {
      java.lang.Object ref = principal_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        principal_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMPONENT_FIELD_NUMBER = 2;
    private volatile java.lang.Object component_;
    /**
     * <pre>
     * component describes the running process of the effective caller.
     * It can for instance be the hostname:port of the servlet initiating the
     * database call, or the container engine ID used by the servlet.
     * </pre>
     *
     * <code>string component = 2;</code>
     */
    public java.lang.String getComponent() {
      java.lang.Object ref = component_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        component_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * component describes the running process of the effective caller.
     * It can for instance be the hostname:port of the servlet initiating the
     * database call, or the container engine ID used by the servlet.
     * </pre>
     *
     * <code>string component = 2;</code>
     */
    public com.google.protobuf.ByteString
        getComponentBytes() {
      java.lang.Object ref = component_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        component_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SUBCOMPONENT_FIELD_NUMBER = 3;
    private volatile java.lang.Object subcomponent_;
    /**
     * <pre>
     * subcomponent describes a component inisde the immediate caller which
     * is responsible for generating is request. Suggested values are a
     * servlet name or an API endpoint name.
     * </pre>
     *
     * <code>string subcomponent = 3;</code>
     */
    public java.lang.String getSubcomponent() {
      java.lang.Object ref = subcomponent_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        subcomponent_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * subcomponent describes a component inisde the immediate caller which
     * is responsible for generating is request. Suggested values are a
     * servlet name or an API endpoint name.
     * </pre>
     *
     * <code>string subcomponent = 3;</code>
     */
    public com.google.protobuf.ByteString
        getSubcomponentBytes() {
      java.lang.Object ref = subcomponent_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        subcomponent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getPrincipalBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, principal_);
      }
      if (!getComponentBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, component_);
      }
      if (!getSubcomponentBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, subcomponent_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getPrincipalBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, principal_);
      }
      if (!getComponentBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, component_);
      }
      if (!getSubcomponentBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, subcomponent_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Vtrpc.CallerID)) {
        return super.equals(obj);
      }
      io.vitess.proto.Vtrpc.CallerID other = (io.vitess.proto.Vtrpc.CallerID) obj;

      boolean result = true;
      result = result && getPrincipal()
          .equals(other.getPrincipal());
      result = result && getComponent()
          .equals(other.getComponent());
      result = result && getSubcomponent()
          .equals(other.getSubcomponent());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PRINCIPAL_FIELD_NUMBER;
      hash = (53 * hash) + getPrincipal().hashCode();
      hash = (37 * hash) + COMPONENT_FIELD_NUMBER;
      hash = (53 * hash) + getComponent().hashCode();
      hash = (37 * hash) + SUBCOMPONENT_FIELD_NUMBER;
      hash = (53 * hash) + getSubcomponent().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Vtrpc.CallerID parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Vtrpc.CallerID parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Vtrpc.CallerID prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * CallerID is passed along RPCs to identify the originating client
     * for a request. It is not meant to be secure, but only
     * informational.  The client can put whatever info they want in these
     * fields, and they will be trusted by the servers. The fields will
     * just be used for logging purposes, and to easily find a client.
     * VtGate propagates it to VtTablet, and VtTablet may use this
     * information for monitoring purposes, to display on dashboards, or
     * for blacklisting purposes.
     * </pre>
     *
     * Protobuf type {@code vtrpc.CallerID}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:vtrpc.CallerID)
        io.vitess.proto.Vtrpc.CallerIDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Vtrpc.internal_static_vtrpc_CallerID_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Vtrpc.internal_static_vtrpc_CallerID_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Vtrpc.CallerID.class, io.vitess.proto.Vtrpc.CallerID.Builder.class);
      }

      // Construct using io.vitess.proto.Vtrpc.CallerID.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        principal_ = "";

        component_ = "";

        subcomponent_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Vtrpc.internal_static_vtrpc_CallerID_descriptor;
      }

      public io.vitess.proto.Vtrpc.CallerID getDefaultInstanceForType() {
        return io.vitess.proto.Vtrpc.CallerID.getDefaultInstance();
      }

      public io.vitess.proto.Vtrpc.CallerID build() {
        io.vitess.proto.Vtrpc.CallerID result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Vtrpc.CallerID buildPartial() {
        io.vitess.proto.Vtrpc.CallerID result = new io.vitess.proto.Vtrpc.CallerID(this);
        result.principal_ = principal_;
        result.component_ = component_;
        result.subcomponent_ = subcomponent_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Vtrpc.CallerID) {
          return mergeFrom((io.vitess.proto.Vtrpc.CallerID)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Vtrpc.CallerID other) {
        if (other == io.vitess.proto.Vtrpc.CallerID.getDefaultInstance()) return this;
        if (!other.getPrincipal().isEmpty()) {
          principal_ = other.principal_;
          onChanged();
        }
        if (!other.getComponent().isEmpty()) {
          component_ = other.component_;
          onChanged();
        }
        if (!other.getSubcomponent().isEmpty()) {
          subcomponent_ = other.subcomponent_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Vtrpc.CallerID parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Vtrpc.CallerID) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object principal_ = "";
      /**
       * <pre>
       * principal is the effective user identifier. It is usually filled in
       * with whoever made the request to the appserver, if the request
       * came from an automated job or another system component.
       * If the request comes directly from the Internet, or if the Vitess client
       * takes action on its own accord, it is okay for this field to be absent.
       * </pre>
       *
       * <code>string principal = 1;</code>
       */
      public java.lang.String getPrincipal() {
        java.lang.Object ref = principal_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          principal_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * principal is the effective user identifier. It is usually filled in
       * with whoever made the request to the appserver, if the request
       * came from an automated job or another system component.
       * If the request comes directly from the Internet, or if the Vitess client
       * takes action on its own accord, it is okay for this field to be absent.
       * </pre>
       *
       * <code>string principal = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPrincipalBytes() {
        java.lang.Object ref = principal_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          principal_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * principal is the effective user identifier. It is usually filled in
       * with whoever made the request to the appserver, if the request
       * came from an automated job or another system component.
       * If the request comes directly from the Internet, or if the Vitess client
       * takes action on its own accord, it is okay for this field to be absent.
       * </pre>
       *
       * <code>string principal = 1;</code>
       */
      public Builder setPrincipal(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        principal_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * principal is the effective user identifier. It is usually filled in
       * with whoever made the request to the appserver, if the request
       * came from an automated job or another system component.
       * If the request comes directly from the Internet, or if the Vitess client
       * takes action on its own accord, it is okay for this field to be absent.
       * </pre>
       *
       * <code>string principal = 1;</code>
       */
      public Builder clearPrincipal() {
        
        principal_ = getDefaultInstance().getPrincipal();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * principal is the effective user identifier. It is usually filled in
       * with whoever made the request to the appserver, if the request
       * came from an automated job or another system component.
       * If the request comes directly from the Internet, or if the Vitess client
       * takes action on its own accord, it is okay for this field to be absent.
       * </pre>
       *
       * <code>string principal = 1;</code>
       */
      public Builder setPrincipalBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        principal_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object component_ = "";
      /**
       * <pre>
       * component describes the running process of the effective caller.
       * It can for instance be the hostname:port of the servlet initiating the
       * database call, or the container engine ID used by the servlet.
       * </pre>
       *
       * <code>string component = 2;</code>
       */
      public java.lang.String getComponent() {
        java.lang.Object ref = component_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          component_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * component describes the running process of the effective caller.
       * It can for instance be the hostname:port of the servlet initiating the
       * database call, or the container engine ID used by the servlet.
       * </pre>
       *
       * <code>string component = 2;</code>
       */
      public com.google.protobuf.ByteString
          getComponentBytes() {
        java.lang.Object ref = component_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          component_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * component describes the running process of the effective caller.
       * It can for instance be the hostname:port of the servlet initiating the
       * database call, or the container engine ID used by the servlet.
       * </pre>
       *
       * <code>string component = 2;</code>
       */
      public Builder setComponent(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        component_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * component describes the running process of the effective caller.
       * It can for instance be the hostname:port of the servlet initiating the
       * database call, or the container engine ID used by the servlet.
       * </pre>
       *
       * <code>string component = 2;</code>
       */
      public Builder clearComponent() {
        
        component_ = getDefaultInstance().getComponent();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * component describes the running process of the effective caller.
       * It can for instance be the hostname:port of the servlet initiating the
       * database call, or the container engine ID used by the servlet.
       * </pre>
       *
       * <code>string component = 2;</code>
       */
      public Builder setComponentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        component_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object subcomponent_ = "";
      /**
       * <pre>
       * subcomponent describes a component inisde the immediate caller which
       * is responsible for generating is request. Suggested values are a
       * servlet name or an API endpoint name.
       * </pre>
       *
       * <code>string subcomponent = 3;</code>
       */
      public java.lang.String getSubcomponent() {
        java.lang.Object ref = subcomponent_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          subcomponent_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * subcomponent describes a component inisde the immediate caller which
       * is responsible for generating is request. Suggested values are a
       * servlet name or an API endpoint name.
       * </pre>
       *
       * <code>string subcomponent = 3;</code>
       */
      public com.google.protobuf.ByteString
          getSubcomponentBytes() {
        java.lang.Object ref = subcomponent_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          subcomponent_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * subcomponent describes a component inisde the immediate caller which
       * is responsible for generating is request. Suggested values are a
       * servlet name or an API endpoint name.
       * </pre>
       *
       * <code>string subcomponent = 3;</code>
       */
      public Builder setSubcomponent(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        subcomponent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * subcomponent describes a component inisde the immediate caller which
       * is responsible for generating is request. Suggested values are a
       * servlet name or an API endpoint name.
       * </pre>
       *
       * <code>string subcomponent = 3;</code>
       */
      public Builder clearSubcomponent() {
        
        subcomponent_ = getDefaultInstance().getSubcomponent();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * subcomponent describes a component inisde the immediate caller which
       * is responsible for generating is request. Suggested values are a
       * servlet name or an API endpoint name.
       * </pre>
       *
       * <code>string subcomponent = 3;</code>
       */
      public Builder setSubcomponentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        subcomponent_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:vtrpc.CallerID)
    }

    // @@protoc_insertion_point(class_scope:vtrpc.CallerID)
    private static final io.vitess.proto.Vtrpc.CallerID DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Vtrpc.CallerID();
    }

    public static io.vitess.proto.Vtrpc.CallerID getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CallerID>
        PARSER = new com.google.protobuf.AbstractParser<CallerID>() {
      public CallerID parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CallerID(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CallerID> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CallerID> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Vtrpc.CallerID getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RPCErrorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:vtrpc.RPCError)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
     */
    int getLegacyCodeValue();
    /**
     * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
     */
    io.vitess.proto.Vtrpc.LegacyErrorCode getLegacyCode();

    /**
     * <code>string message = 2;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>string message = 2;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();

    /**
     * <code>.vtrpc.Code code = 3;</code>
     */
    int getCodeValue();
    /**
     * <code>.vtrpc.Code code = 3;</code>
     */
    io.vitess.proto.Vtrpc.Code getCode();
  }
  /**
   * <pre>
   * RPCError is an application-level error structure returned by
   * VtTablet (and passed along by VtGate if appropriate).
   * We use this so the clients don't have to parse the error messages,
   * but instead can depend on the value of the code.
   * </pre>
   *
   * Protobuf type {@code vtrpc.RPCError}
   */
  public  static final class RPCError extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:vtrpc.RPCError)
      RPCErrorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RPCError.newBuilder() to construct.
    private RPCError(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RPCError() {
      legacyCode_ = 0;
      message_ = "";
      code_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RPCError(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              legacyCode_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              message_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              code_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.vitess.proto.Vtrpc.internal_static_vtrpc_RPCError_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.vitess.proto.Vtrpc.internal_static_vtrpc_RPCError_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.vitess.proto.Vtrpc.RPCError.class, io.vitess.proto.Vtrpc.RPCError.Builder.class);
    }

    public static final int LEGACY_CODE_FIELD_NUMBER = 1;
    private int legacyCode_;
    /**
     * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
     */
    public int getLegacyCodeValue() {
      return legacyCode_;
    }
    /**
     * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
     */
    public io.vitess.proto.Vtrpc.LegacyErrorCode getLegacyCode() {
      io.vitess.proto.Vtrpc.LegacyErrorCode result = io.vitess.proto.Vtrpc.LegacyErrorCode.valueOf(legacyCode_);
      return result == null ? io.vitess.proto.Vtrpc.LegacyErrorCode.UNRECOGNIZED : result;
    }

    public static final int MESSAGE_FIELD_NUMBER = 2;
    private volatile java.lang.Object message_;
    /**
     * <code>string message = 2;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        message_ = s;
        return s;
      }
    }
    /**
     * <code>string message = 2;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CODE_FIELD_NUMBER = 3;
    private int code_;
    /**
     * <code>.vtrpc.Code code = 3;</code>
     */
    public int getCodeValue() {
      return code_;
    }
    /**
     * <code>.vtrpc.Code code = 3;</code>
     */
    public io.vitess.proto.Vtrpc.Code getCode() {
      io.vitess.proto.Vtrpc.Code result = io.vitess.proto.Vtrpc.Code.valueOf(code_);
      return result == null ? io.vitess.proto.Vtrpc.Code.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (legacyCode_ != io.vitess.proto.Vtrpc.LegacyErrorCode.SUCCESS_LEGACY.getNumber()) {
        output.writeEnum(1, legacyCode_);
      }
      if (!getMessageBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, message_);
      }
      if (code_ != io.vitess.proto.Vtrpc.Code.OK.getNumber()) {
        output.writeEnum(3, code_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (legacyCode_ != io.vitess.proto.Vtrpc.LegacyErrorCode.SUCCESS_LEGACY.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, legacyCode_);
      }
      if (!getMessageBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, message_);
      }
      if (code_ != io.vitess.proto.Vtrpc.Code.OK.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, code_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.vitess.proto.Vtrpc.RPCError)) {
        return super.equals(obj);
      }
      io.vitess.proto.Vtrpc.RPCError other = (io.vitess.proto.Vtrpc.RPCError) obj;

      boolean result = true;
      result = result && legacyCode_ == other.legacyCode_;
      result = result && getMessage()
          .equals(other.getMessage());
      result = result && code_ == other.code_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LEGACY_CODE_FIELD_NUMBER;
      hash = (53 * hash) + legacyCode_;
      hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getMessage().hashCode();
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + code_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.vitess.proto.Vtrpc.RPCError parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.vitess.proto.Vtrpc.RPCError parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.vitess.proto.Vtrpc.RPCError prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * RPCError is an application-level error structure returned by
     * VtTablet (and passed along by VtGate if appropriate).
     * We use this so the clients don't have to parse the error messages,
     * but instead can depend on the value of the code.
     * </pre>
     *
     * Protobuf type {@code vtrpc.RPCError}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:vtrpc.RPCError)
        io.vitess.proto.Vtrpc.RPCErrorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.vitess.proto.Vtrpc.internal_static_vtrpc_RPCError_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.vitess.proto.Vtrpc.internal_static_vtrpc_RPCError_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.vitess.proto.Vtrpc.RPCError.class, io.vitess.proto.Vtrpc.RPCError.Builder.class);
      }

      // Construct using io.vitess.proto.Vtrpc.RPCError.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        legacyCode_ = 0;

        message_ = "";

        code_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.vitess.proto.Vtrpc.internal_static_vtrpc_RPCError_descriptor;
      }

      public io.vitess.proto.Vtrpc.RPCError getDefaultInstanceForType() {
        return io.vitess.proto.Vtrpc.RPCError.getDefaultInstance();
      }

      public io.vitess.proto.Vtrpc.RPCError build() {
        io.vitess.proto.Vtrpc.RPCError result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.vitess.proto.Vtrpc.RPCError buildPartial() {
        io.vitess.proto.Vtrpc.RPCError result = new io.vitess.proto.Vtrpc.RPCError(this);
        result.legacyCode_ = legacyCode_;
        result.message_ = message_;
        result.code_ = code_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.vitess.proto.Vtrpc.RPCError) {
          return mergeFrom((io.vitess.proto.Vtrpc.RPCError)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.vitess.proto.Vtrpc.RPCError other) {
        if (other == io.vitess.proto.Vtrpc.RPCError.getDefaultInstance()) return this;
        if (other.legacyCode_ != 0) {
          setLegacyCodeValue(other.getLegacyCodeValue());
        }
        if (!other.getMessage().isEmpty()) {
          message_ = other.message_;
          onChanged();
        }
        if (other.code_ != 0) {
          setCodeValue(other.getCodeValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.vitess.proto.Vtrpc.RPCError parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.vitess.proto.Vtrpc.RPCError) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int legacyCode_ = 0;
      /**
       * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
       */
      public int getLegacyCodeValue() {
        return legacyCode_;
      }
      /**
       * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
       */
      public Builder setLegacyCodeValue(int value) {
        legacyCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
       */
      public io.vitess.proto.Vtrpc.LegacyErrorCode getLegacyCode() {
        io.vitess.proto.Vtrpc.LegacyErrorCode result = io.vitess.proto.Vtrpc.LegacyErrorCode.valueOf(legacyCode_);
        return result == null ? io.vitess.proto.Vtrpc.LegacyErrorCode.UNRECOGNIZED : result;
      }
      /**
       * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
       */
      public Builder setLegacyCode(io.vitess.proto.Vtrpc.LegacyErrorCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        legacyCode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.vtrpc.LegacyErrorCode legacy_code = 1;</code>
       */
      public Builder clearLegacyCode() {
        
        legacyCode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object message_ = "";
      /**
       * <code>string message = 2;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string message = 2;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string message = 2;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string message = 2;</code>
       */
      public Builder clearMessage() {
        
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <code>string message = 2;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        message_ = value;
        onChanged();
        return this;
      }

      private int code_ = 0;
      /**
       * <code>.vtrpc.Code code = 3;</code>
       */
      public int getCodeValue() {
        return code_;
      }
      /**
       * <code>.vtrpc.Code code = 3;</code>
       */
      public Builder setCodeValue(int value) {
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.vtrpc.Code code = 3;</code>
       */
      public io.vitess.proto.Vtrpc.Code getCode() {
        io.vitess.proto.Vtrpc.Code result = io.vitess.proto.Vtrpc.Code.valueOf(code_);
        return result == null ? io.vitess.proto.Vtrpc.Code.UNRECOGNIZED : result;
      }
      /**
       * <code>.vtrpc.Code code = 3;</code>
       */
      public Builder setCode(io.vitess.proto.Vtrpc.Code value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        code_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.vtrpc.Code code = 3;</code>
       */
      public Builder clearCode() {
        
        code_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:vtrpc.RPCError)
    }

    // @@protoc_insertion_point(class_scope:vtrpc.RPCError)
    private static final io.vitess.proto.Vtrpc.RPCError DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.vitess.proto.Vtrpc.RPCError();
    }

    public static io.vitess.proto.Vtrpc.RPCError getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RPCError>
        PARSER = new com.google.protobuf.AbstractParser<RPCError>() {
      public RPCError parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RPCError(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RPCError> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RPCError> getParserForType() {
      return PARSER;
    }

    public io.vitess.proto.Vtrpc.RPCError getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_vtrpc_CallerID_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_vtrpc_CallerID_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_vtrpc_RPCError_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_vtrpc_RPCError_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013vtrpc.proto\022\005vtrpc\"F\n\010CallerID\022\021\n\tprin" +
      "cipal\030\001 \001(\t\022\021\n\tcomponent\030\002 \001(\t\022\024\n\014subcom" +
      "ponent\030\003 \001(\t\"c\n\010RPCError\022+\n\013legacy_code\030" +
      "\001 \001(\0162\026.vtrpc.LegacyErrorCode\022\017\n\007message" +
      "\030\002 \001(\t\022\031\n\004code\030\003 \001(\0162\013.vtrpc.Code*\266\002\n\004Co" +
      "de\022\006\n\002OK\020\000\022\014\n\010CANCELED\020\001\022\013\n\007UNKNOWN\020\002\022\024\n" +
      "\020INVALID_ARGUMENT\020\003\022\025\n\021DEADLINE_EXCEEDED" +
      "\020\004\022\r\n\tNOT_FOUND\020\005\022\022\n\016ALREADY_EXISTS\020\006\022\025\n" +
      "\021PERMISSION_DENIED\020\007\022\023\n\017UNAUTHENTICATED\020" +
      "\020\022\026\n\022RESOURCE_EXHAUSTED\020\010\022\027\n\023FAILED_PREC" +
      "ONDITION\020\t\022\013\n\007ABORTED\020\n\022\020\n\014OUT_OF_RANGE\020" +
      "\013\022\021\n\rUNIMPLEMENTED\020\014\022\014\n\010INTERNAL\020\r\022\017\n\013UN" +
      "AVAILABLE\020\016\022\r\n\tDATA_LOSS\020\017*\350\002\n\017LegacyErr" +
      "orCode\022\022\n\016SUCCESS_LEGACY\020\000\022\024\n\020CANCELLED_" +
      "LEGACY\020\001\022\030\n\024UNKNOWN_ERROR_LEGACY\020\002\022\024\n\020BA" +
      "D_INPUT_LEGACY\020\003\022\034\n\030DEADLINE_EXCEEDED_LE" +
      "GACY\020\004\022\032\n\026INTEGRITY_ERROR_LEGACY\020\005\022\034\n\030PE" +
      "RMISSION_DENIED_LEGACY\020\006\022\035\n\031RESOURCE_EXH" +
      "AUSTED_LEGACY\020\007\022\033\n\027QUERY_NOT_SERVED_LEGA" +
      "CY\020\010\022\024\n\020NOT_IN_TX_LEGACY\020\t\022\031\n\025INTERNAL_E" +
      "RROR_LEGACY\020\n\022\032\n\026TRANSIENT_ERROR_LEGACY\020" +
      "\013\022\032\n\026UNAUTHENTICATED_LEGACY\020\014B5\n\017io.vite" +
      "ss.protoZ\"vitess.io/vitess/go/vt/proto/v" +
      "trpcb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_vtrpc_CallerID_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_vtrpc_CallerID_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_vtrpc_CallerID_descriptor,
        new java.lang.String[] { "Principal", "Component", "Subcomponent", });
    internal_static_vtrpc_RPCError_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_vtrpc_RPCError_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_vtrpc_RPCError_descriptor,
        new java.lang.String[] { "LegacyCode", "Message", "Code", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
