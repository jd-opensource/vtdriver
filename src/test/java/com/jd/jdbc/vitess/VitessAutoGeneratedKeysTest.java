/*
Copyright 2021 JD Project Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package com.jd.jdbc.vitess;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import org.junit.After;
import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import testsuite.TestSuite;
import testsuite.internal.TestSuiteShardSpec;

import static java.sql.Statement.NO_GENERATED_KEYS;
import static java.sql.Statement.RETURN_GENERATED_KEYS;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/*
CREATE TABLE `auto` (
  `id` bigint(20) NOT NULL,
  `ai` bigint(20) NOT NULL AUTO_INCREMENT,
  `email` varbinary(128) DEFAULT NULL,
  PRIMARY KEY (`ai`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
* */

/*
 * execute() --> CURD
 * executeQuery() --> R
 * executeUpdate() --> CUD
 * executeBatch() --> CUD
 *
 * only auto-increment filed return auto-generated-keys
 * */

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class VitessAutoGeneratedKeysTest extends TestSuite {
    private static final int[] colIndex = new int[] {1};

    private static final String[] colString = new String[] {"no matter what you input, it would be ignored."};

    private static final int[] int1x100Array = new int[100];

    private static final int[] int1x300Array = new int[300];

    static {
        Arrays.fill(int1x100Array, 1);
        Arrays.fill(int1x300Array, 1);
    }

    public String sql1 = "insert into auto (id,ai,email) values(1,1,'x')";

    public String sql100 = "insert into auto (id,ai,email) values(1,100,'x')";

    public String sqlx = "insert into auto (id,ai,email) values(?,?,'x')";

    public String sqld = "insert into auto (id,ai,email) values(%d,%d,'x')";

    public String updateSql = "update auto set email = 'zz' where id = %d";

    public String deleteSql = "delete from auto where id = %d";

    protected Connection conn;

    @Before
    public void testLoadDriver() throws Exception {
        getConn();
    }

    protected void getConn() throws SQLException {
        conn = getConnection(Driver.of(TestSuiteShardSpec.TWO_SHARDS));
    }

    @After
    public void close() throws Exception {
        if (conn != null) {
            conn.close();
        }
    }

    protected void clean() throws SQLException {
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("delete from auto");
        }
    }

    /***********************************************************************************************
     * Statement
     * ***********************************************************************************************/
    @Test
    public void test01StatementExecute() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql1);
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            String exceptionMsg = null;
            try {
                stmt.getGeneratedKeys();
            } catch (SQLException e) {
                exceptionMsg = e.getMessage();
            }
            assertTrue(exceptionMsg.contains("Generated keys not requested"));
        }
    }

    @Test
    public void test02StatementExecute() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql1, NO_GENERATED_KEYS);
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            String exceptionMsg = null;
            try {
                stmt.getGeneratedKeys();
            } catch (SQLException e) {
                exceptionMsg = e.getMessage();
            }
            assertTrue(exceptionMsg.contains("Generated keys not requested"));
        }
    }


    @Test
    public void test03StatementExecute() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql100, RETURN_GENERATED_KEYS);
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test04StatementExecute() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql100, colIndex);
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test05StatementExecute() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            boolean rc = stmt.execute(sql100, colString);
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test06StatementExecuteUpdate() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql1);
            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            String exceptionMsg = null;
            try {
                stmt.getGeneratedKeys();
            } catch (SQLException e) {
                exceptionMsg = e.getMessage();
            }
            assertTrue(exceptionMsg.contains("Generated keys not requested"));
        }
    }

    @Test
    public void test07StatementExecuteUpdate() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql1, NO_GENERATED_KEYS);
            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            String exceptionMsg = null;
            try {
                stmt.getGeneratedKeys();
            } catch (SQLException e) {
                exceptionMsg = e.getMessage();
            }
            assertTrue(exceptionMsg.contains("Generated keys not requested"));
        }
    }

    @Test
    public void test08StatementExecuteUpdate() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql100, RETURN_GENERATED_KEYS);
            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }


    @Test
    public void test09StatementExecuteUpdate() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql100, colIndex);
            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test10StatementExecuteUpdate() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            int updateCount = stmt.executeUpdate(sql100, colString);
            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test11StatementExecuteBatch() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            for (int i = 100; i < 200; i++) {
                stmt.addBatch(String.format(sqld, i, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x100Array, rc);

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(count + 100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(100, count);
        }
    }

    @Test
    public void test12StatementExecuteBatch() throws Exception {
        clean();
        try (Statement stmt = conn.createStatement()) {
            for (int i = 100; i < 200; i++) {
                stmt.addBatch(String.format(sqld, i, i));
                stmt.addBatch(String.format(updateSql, i));
                stmt.addBatch(String.format(deleteSql, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x300Array, rc);

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(count + 100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(100, count);
        }
    }

    /************************************************************************************************
     * PreparedStatement
     * ***********************************************************************************************/
    @Test
    public void test13PreparedStatementExecute() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, 1);
            stmt.setInt(2, 1);

            boolean rc = stmt.execute();
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            String exceptionMsg = null;
            try {
                stmt.getGeneratedKeys();
            } catch (SQLException e) {
                exceptionMsg = e.getMessage();
            }
            assertTrue(exceptionMsg.contains("Generated keys not requested"));
        }
    }

    @Test
    public void test14PreparedStatementExecute() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, NO_GENERATED_KEYS)) {
            stmt.setInt(1, 1);
            stmt.setInt(2, 1);

            boolean rc = stmt.execute();
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            String exceptionMsg = null;
            try {
                stmt.getGeneratedKeys();
            } catch (SQLException e) {
                exceptionMsg = e.getMessage();
            }
            assertTrue(exceptionMsg.contains("Generated keys not requested"));
        }
    }

    @Test
    public void test15PreparedStatementExecute() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            boolean rc = stmt.execute();
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test16PreparedStatementExecute() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, colIndex)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            boolean rc = stmt.execute();
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test17PreparedStatementExecute() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, colString)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            boolean rc = stmt.execute();
            assertFalse(rc);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test18PreparedStatementExecuteUpdate() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, NO_GENERATED_KEYS)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            int updateCount = stmt.executeUpdate();

            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            String exceptionMsg = null;
            try {
                stmt.getGeneratedKeys();
            } catch (SQLException e) {
                exceptionMsg = e.getMessage();
            }
            assertTrue(exceptionMsg.contains("Generated keys not requested"));
        }
    }

    @Test
    public void test19PreparedStatementExecuteUpdate() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 100);

            int updateCount = stmt.executeUpdate();

            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);
        }
    }

    @Test
    public void test20PreparedStatementExecuteBatch() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, NO_GENERATED_KEYS)) {
            for (int i = 100; i < 200; i++) {
                stmt.setInt(1, i);
                stmt.setInt(2, i);
                stmt.addBatch();
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x100Array, rc);

            String exceptionMsg = null;
            try {
                stmt.getGeneratedKeys();
            } catch (SQLException e) {
                exceptionMsg = e.getMessage();
            }
            assertTrue(exceptionMsg.contains("Generated keys not requested"));
        }
    }

    @Test
    public void test21PreparedStatementExecuteBatch() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, RETURN_GENERATED_KEYS)) {
            for (int i = 100; i < 200; i++) {
                stmt.setInt(1, i);
                stmt.setInt(2, i);
                stmt.addBatch();
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x100Array, rc);

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(count + 100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(100, count);
        }
    }

    @Test
    public void test22PreparedStatementExecuteBatch() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, RETURN_GENERATED_KEYS)) {
            for (int i = 100; i < 200; i++) {
                stmt.addBatch(String.format(sqld, i, i));
                stmt.addBatch(String.format(updateSql, i));
                stmt.addBatch(String.format(deleteSql, i));
            }
            int[] rc = stmt.executeBatch();
            assertArrayEquals(int1x300Array, rc);

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(count + 100, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(100, count);
        }
    }

    /***********************************************************************************************
     * Misc
     * ***********************************************************************************************/
    @Test
    public void test23SetNull() throws Exception {
        clean();
        String sql = sqlx;
        try (PreparedStatement stmt = conn.prepareStatement(sql, RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, 100);
            stmt.setInt(2, 1000);

            int updateCount = stmt.executeUpdate();

            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            ResultSet generatedKeys = stmt.getGeneratedKeys();
            int count = 0;
            while (generatedKeys.next()) {
                assertEquals(1000, generatedKeys.getLong(1));
                count++;
            }
            assertEquals(1, count);

            //set null
            stmt.setInt(1, 100);
            stmt.setNull(2, 0);

            updateCount = stmt.executeUpdate();

            assertEquals(1, updateCount);
            assertEquals(1, stmt.getUpdateCount());

            generatedKeys = stmt.getGeneratedKeys();
            count = 0;
            while (generatedKeys.next()) {
                assertTrue(generatedKeys.getLong(1) > 1000);
                count++;
            }
            assertEquals(1, count);
        }
    }
}
