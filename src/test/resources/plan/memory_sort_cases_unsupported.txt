# Reason: multiple keyspace
# Order by for join, on text column in LHS.
"select u.a, u.textcol1, un.col2 from user u join unsharded un order by u.textcol1, un.col2"
{
  "QueryType": "SELECT",
  "Original": "select u.a, u.textcol1, un.col2 from user u join unsharded un order by u.textcol1, un.col2",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "(1|3) ASC, (2|4) ASC",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1,R:0,L:2,R:1",
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a, u.textcol1, weight_string(u.textcol1) from user as u where 1 != 1",
            "Query": "select u.a, u.textcol1, weight_string(u.textcol1) from user as u",
            "Table": "user"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select un.col2, weight_string(un.col2) from unsharded as un where 1 != 1",
            "Query": "select un.col2, weight_string(un.col2) from unsharded as un",
            "Table": "unsharded"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u.a, u.textcol1, un.col2 from user u join unsharded un order by u.textcol1, un.col2",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "(1|3) ASC COLLATE latin1_swedish_ci, (2|4) ASC",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "L:0,L:1,R:0,L:2,R:1",
        "TableName": "`user`_unsharded",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a, u.textcol1, weight_string(u.textcol1) from user as u where 1 != 1",
            "Query": "select u.a, u.textcol1, weight_string(u.textcol1) from user as u",
            "Table": "user"
          },
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select un.col2, weight_string(un.col2) from unsharded as un where 1 != 1",
            "Query": "select un.col2, weight_string(un.col2) from unsharded as un",
            "Table": "unsharded"
          }
        ]
      }
    ]
  }
}

# Reason: multiple keyspace
# Order by for join, on text column in RHS.
"select u.a, u.textcol1, un.col2 from unsharded un join user u order by u.textcol1, un.col2"
{
  "QueryType": "SELECT",
  "Original": "select u.a, u.textcol1, un.col2 from unsharded un join user u order by u.textcol1, un.col2",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "(1|3) ASC, (2|4) ASC",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0,R:1,L:0,R:2,L:1",
        "TableName": "unsharded_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select un.col2, weight_string(un.col2) from unsharded as un where 1 != 1",
            "Query": "select un.col2, weight_string(un.col2) from unsharded as un",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a, u.textcol1, weight_string(u.textcol1) from user as u where 1 != 1",
            "Query": "select u.a, u.textcol1, weight_string(u.textcol1) from user as u",
            "Table": "user"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select u.a, u.textcol1, un.col2 from unsharded un join user u order by u.textcol1, un.col2",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "(1|3) ASC COLLATE latin1_swedish_ci, (2|4) ASC",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Join",
        "Variant": "Join",
        "JoinColumnIndexes": "R:0,R:1,L:0,R:2,L:1",
        "TableName": "unsharded_`user`",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "Unsharded",
            "Keyspace": {
              "Name": "main",
              "Sharded": false
            },
            "FieldQuery": "select un.col2, weight_string(un.col2) from unsharded as un where 1 != 1",
            "Query": "select un.col2, weight_string(un.col2) from unsharded as un",
            "Table": "unsharded"
          },
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select u.a, u.textcol1, weight_string(u.textcol1) from user as u where 1 != 1",
            "Query": "select u.a, u.textcol1, weight_string(u.textcol1) from user as u",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Reason: Only support binaryhash
# order by for vindex func
"select id, keyspace_id, range_start, range_end from user_index where id = :id order by range_start"
{
  "QueryType": "SELECT",
  "Original": "select id, keyspace_id, range_start, range_end from user_index where id = :id order by range_start",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "2 ASC",
    "Inputs": [
      {
        "OperatorType": "VindexFunc",
        "Variant": "VindexMap",
        "Columns": [
          0,
          1,
          2,
          3
        ],
        "Fields": {
          "id": "VARBINARY",
          "keyspace_id": "VARBINARY",
          "range_end": "VARBINARY",
          "range_start": "VARBINARY"
        },
        "Value": ":id",
        "Vindex": "user_index"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id, keyspace_id, range_start, range_end from user_index where id = :id order by range_start",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "2 ASC",
    "Inputs": [
      {
        "OperatorType": "VindexFunc",
        "Variant": "VindexMap",
        "Columns": [
          0,
          1,
          2,
          3
        ],
        "Fields": {
          "id": "VARBINARY",
          "keyspace_id": "VARBINARY",
          "range_end": "VARBINARY",
          "range_start": "VARBINARY"
        },
        "Value": ":id",
        "Vindex": "user_index"
      }
    ]
  }
}

# order by on a cross-shard derived table
"select id from (select user.id, user.col from user join user_extra) as t order by id"
{
  "QueryType": "SELECT",
  "Original": "select id from (select user.id, user.col from user join user_extra) as t order by id",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC",
    "Inputs": [
      {
        "OperatorType": "Subquery",
        "Columns": [
          0
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes":[-1,-2],
            "TableName": "user_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select user.id, user.col from user where 1 != 1",
                "Query": "select user.id, user.col from user",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id from (select user.id, user.col from user join user_extra) as t order by id",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "(0|1) ASC",
    "ResultColumns": 1,
    "Inputs": [
      {
        "OperatorType": "SimpleProjection",
        "Columns": [
          0,
          2
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,L:2",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, `user`.col, weight_string(`user`.id) from user where 1 != 1",
                "Query": "select `user`.id, `user`.col, weight_string(`user`.id) from user",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# unary expression
# gen3未实现对应的toString,报错unsupported: in scatter query: complex order by expression:com.jd.jdbc.sqlparser.ast.expr.sqlunaryexpr@62886aeb
"select a from user order by binary a desc"
Gen3 skip
{
  "QueryType": "SELECT",
  "Original": "select a from user order by binary a desc",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select a, convert(a, binary), weight_string(convert(a, binary)) from user where 1 != 1",
    "OrderBy": "(1|2) DESC",
    "Query": "select a, convert(a, binary), weight_string(convert(a, binary)) from user order by convert(a, binary) desc",
    "ResultColumns": 1,
    "Table": "user"
  }
}