# Test cases in this file follow the code in ordered_aggregate.go.
#
# Aggregate on unsharded
"select count(*), col from unsharded"
{
  "QueryType": "SELECT",
  "Original": "select count(*), col from unsharded",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectUnsharded",
    "Keyspace": {
      "Name": "main",
      "Sharded": false
    },
    "FieldQuery": "select count(*), col from unsharded where 1 != 1",
    "Query": "select count(*), col from unsharded",
    "Table": "unsharded"
  }
}
Gen4 plan same as above

# Aggregate on unique sharded
"select count(*), col from user where name = 1"
{
  "QueryType": "SELECT",
  "Original": "select count(*), col from user where name = 1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select count(*), col from user where 1 != 1",
    "Query": "select count(*), col from user where name = 1",
    "Table": "user",
    "Values": [
      "INT64(1)"
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Aggregate detection (non-aggregate function)
"select fun(1), col from user"
{
  "QueryType": "SELECT",
  "Original": "select fun(1), col from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select fun(1), col from user where 1 != 1",
    "Query": "select fun(1), col from user",
    "Table": "user"
  }
}
Gen4 plan same as above

# select distinct with unique vindex for scatter route.
"select distinct col1, name from user"
{
  "QueryType": "SELECT",
  "Original": "select distinct col1, name from user",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col1, name from user where 1 != 1",
    "Query": "select distinct col1, name from user",
    "Table": "user"
  }
}
Gen4 plan same as above

# distinct and group by together for single route.
"select distinct col1, name from user group by col1"
{
  "QueryType": "SELECT",
  "Original": "select distinct col1, name from user group by col1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col1, name from user where 1 != 1 group by col1",
    "Query": "select distinct col1, name from user group by col1",
    "Table": "user"
  }
}
Gen4 plan same as above

# scatter group by a text column
"select count(*), a, textcol1, b from user group by a, textcol1, b"
{
  "QueryType": "SELECT",
  "Original": "select count(*), a, textcol1, b from user group by a, textcol1, b",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Distinct": "false",
    "GroupBy": "1, 4, 3",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*), a, textcol1, b, weight_string(textcol1) from user where 1 != 1 group by a, textcol1, b",
        "Query": "select count(*), a, textcol1, b, weight_string(textcol1) from user group by a, textcol1, b order by a asc, textcol1 asc, b asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select count(*), a, textcol1, b from user group by a, textcol1, b",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "GroupBy": "(1|4), 2, (3|5)",
    "ResultColumns": 4,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*), a, textcol1, b, weight_string(a), weight_string(b) from user where 1 != 1 group by a, weight_string(a), textcol1, b, weight_string(b)",
        "OrderBy": "(1|4) ASC, 2 ASC, (3|5) ASC",
        "Query": "select count(*), a, textcol1, b, weight_string(a), weight_string(b) from user group by a, weight_string(a), textcol1, b, weight_string(b) order by a asc, textcol1 asc, b asc",
        "Table": "user"
      }
    ]
  }
}

# scatter group by a text column, reuse existing weight_string
"select count(*) k, a, textcol1, b from user group by a, textcol1, b order by k, textcol1"
{
  "QueryType": "SELECT",
  "Original": "select count(*) k, a, textcol1, b from user group by a, textcol1, b order by k, textcol1",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC, 4 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "Distinct": "false",
        "GroupBy": "1, 4, 3",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as k, a, textcol1, b, weight_string(textcol1) from user where 1 != 1 group by a, textcol1, b",
            "Query": "select count(*) as k, a, textcol1, b, weight_string(textcol1) from user group by a, textcol1, b order by textcol1 asc, a asc, b asc",
            "Table": "user"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select count(*) k, a, textcol1, b from user group by a, textcol1, b order by k, textcol1",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "0 ASC, 2 ASC",
    "ResultColumns": 4,
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(0) AS k",
        "GroupBy": "(1|4), 2, (3|5)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as k, a, textcol1, b, weight_string(a), weight_string(b) from user where 1 != 1 group by a, weight_string(a), textcol1, b, weight_string(b)",
            "OrderBy": "(1|4) ASC, 2 ASC, (3|5) ASC",
            "Query": "select count(*) as k, a, textcol1, b, weight_string(a), weight_string(b) from user group by a, weight_string(a), textcol1, b, weight_string(b) order by a asc, textcol1 asc, b asc",
            "Table": "user"
          }
        ]
      }
    ]
  }
}


# count aggregate
"select count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select count(*) from user",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select count(*) from user",
        "Table": "user"
      }
    ]
  }
}

# sum aggregate
"select sum(col) from user"
{
  "QueryType": "SELECT",
  "Original": "select sum(col) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum(0)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select sum(col) from user where 1 != 1",
        "Query": "select sum(col) from user",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select sum(col) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "sum(0) AS sum(col)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select sum(col) from user where 1 != 1",
        "Query": "select sum(col) from user",
        "Table": "user"
      }
    ]
  }
}


# min aggregate
"select min(col) from user"
{
  "QueryType": "SELECT",
  "Original": "select min(col) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "min(0)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select min(col) from user where 1 != 1",
        "Query": "select min(col) from user",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select min(col) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "min(0) AS min(col)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select min(col) from user where 1 != 1",
        "Query": "select min(col) from user",
        "Table": "user"
      }
    ]
  }
}

# max aggregate
"select max(col) from user"
{
  "QueryType": "SELECT",
  "Original": "select max(col) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "max(0)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select max(col) from user where 1 != 1",
        "Query": "select max(col) from user",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select max(col) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "max(0) AS max(col)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select max(col) from user where 1 != 1",
        "Query": "select max(col) from user",
        "Table": "user"
      }
    ]
  }
}


# distinct and group by together for scatter route
"select distinct col1, col2 from user group by col1"
{
  "QueryType": "SELECT",
  "Original": "select distinct col1, col2 from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Distinct": "false",
    "GroupBy": "0, 1, 0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from user where 1 != 1 group by col1",
        "Query": "select distinct col1, col2 from user group by col1 order by col1 asc, col2 asc, col1 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select distinct col1, col2 from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "(0|2), (1|3)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from user where 1 != 1 group by col1",
        "OrderBy": "(0|2) ASC, (1|3) ASC",
        "Query": "select distinct col1, col2, weight_string(col1), weight_string(col2) from user group by col1 order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}

# group by a unique vindex should use a simple route
"select name, count(*) from user group by name"
{
  "QueryType": "SELECT",
  "Original": "select name, count(*) from user group by name",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name, count(*) from user where 1 != 1 group by name",
    "Query": "select name, count(*) from user group by name",
    "Table": "user"
  }
}
Gen4 plan same as above

# group by a unique vindex and other column should use a simple route
"select name, col, count(*) from user group by name, col"
{
  "QueryType": "SELECT",
  "Original": "select name, col, count(*) from user group by name, col",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name, col, count(*) from user where 1 != 1 group by name, col",
    "Query": "select name, col, count(*) from user group by name, col",
    "Table": "user"
  }
}
Gen4 plan same as above

# group by a non-vindex column should use an OrderdAggregate primitive
"select col, count(*) from user group by col"
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) from user group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct": "false",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, count(*) from user where 1 != 1 group by col",
        "Query": "select col, count(*) from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) from user group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, count(*) from user where 1 != 1 group by col",
        "OrderBy": "0 ASC",
        "Query": "select col, count(*) from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}

# group by a non-unique vindex column should use an OrderdAggregate primitive
"select id, count(*) from user group by id"
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user group by id",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct": "false",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*) from user where 1 != 1 group by id",
        "Query": "select id, count(*) from user group by id order by id asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user group by id",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*), weight_string(id) from user where 1 != 1 group by id, weight_string(id)",
        "OrderBy": "(0|2) ASC",
        "Query": "select id, count(*), weight_string(id) from user group by id, weight_string(id) order by id asc",
        "Table": "user"
      }
    ]
  }
}

# group by a unique vindex should use a simple route, even if aggr is complex
"select name, 1+count(*) from user group by name"
{
  "QueryType": "SELECT",
  "Original": "select name, 1+count(*) from user group by name",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name, 1 + count(*) from user where 1 != 1 group by name",
    "Query": "select name, 1 + count(*) from user group by name",
    "Table": "user"
  }
}
Gen4 plan same as above

# group by a unique vindex where alias from select list is used
"select name as val, 1+count(*) from user group by val"
{
  "QueryType": "SELECT",
  "Original": "select name as val, 1+count(*) from user group by val",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name as val, 1 + count(*) from user where 1 != 1 group by val",
    "Query": "select name as val, 1 + count(*) from user group by val",
    "Table": "user"
  }
}
Gen4 plan same as above

# group by a unique vindex where expression is qualified (alias should be ignored)
"select val as name, 1+count(*) from user group by user.name"
{
  "QueryType": "SELECT",
  "Original": "select val as name, 1+count(*) from user group by user.name",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select val as name, 1 + count(*) from user where 1 != 1 group by user.name",
    "Query": "select val as name, 1 + count(*) from user group by user.name",
    "Table": "user"
  }
}
Gen4 plan same as above

# group by a unique vindex where it should skip non-aliased expressions.
"select *, name, 1+count(*) from user group by name"
{
  "QueryType": "SELECT",
  "Original": "select *, name, 1+count(*) from user group by name",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select *, name, 1 + count(*) from user where 1 != 1 group by name",
    "Query": "select *, name, 1 + count(*) from user group by name",
    "Table": "user"
  }
}
Gen4 error: unsupported: '*' expression in cross-shard query

# group by a unique vindex should revert to simple route, and having clause should find the correct symbols.
"select name, count(*) c from user group by name having name=1 and c=10"
{
  "QueryType": "SELECT",
  "Original": "select name, count(*) c from user group by name having name=1 and c=10",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name, count(*) as c from user where 1 != 1 group by name",
    "Query": "select name, count(*) as c from user group by name having name = 1 and c = 10",
    "Table": "user",
    "Values": [
      "INT64(1)"
    ],
    "Vindex": "user_index"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select name, count(*) c from user group by name having name=1 and c=10",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name, count(*) as c from user where 1 != 1 group by name",
    "Query": "select name, count(*) as c from user where name = 1 group by name having c = 10",
    "Table": "user",
    "Values": [
      "INT64(1)"
    ],
    "Vindex": "user_index"
  }
}

# scatter aggregate with non-aggregate expressions.
"select id, count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*) from user where 1 != 1",
        "Query": "select id, count(*) from user",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "random(0) AS id, sum_count_star(1) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*) from user where 1 != 1",
        "Query": "select id, count(*) from user",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate using distinct
"select distinct col from user"
{
  "QueryType": "SELECT",
  "Original": "select distinct col from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Distinct": "false",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select distinct col from user order by col asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select distinct col from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "OrderBy": "0 ASC",
        "Query": "select distinct col from user order by col asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate group by select col
"select col from user group by col"
{
  "QueryType": "SELECT",
  "Original": "select col from user group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Distinct": "false",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1 group by col",
        "Query": "select col from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col from user group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1 group by col",
        "OrderBy": "0 ASC",
        "Query": "select col from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}

# count with distinct group by unique vindex
"select name, count(distinct col) from user group by name"
{
  "QueryType": "SELECT",
  "Original": "select name, count(distinct col) from user group by name",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name, count(DISTINCT col) from user where 1 != 1 group by name",
    "Query": "select name, count(DISTINCT col) from user group by name",
    "Table": "user"
  }
}
Gen4 plan same as above

# count with distinct unique vindex
"select col, count(distinct name) from user group by col"
{
  "QueryType": "SELECT",
  "Original": "select col, count(distinct name) from user group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct": "false",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, count(DISTINCT name) from user where 1 != 1 group by col",
        "Query": "select col, count(DISTINCT name) from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col, count(distinct name) from user group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_distinct(1) AS count(distinct name)",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, count(DISTINCT name) from user where 1 != 1 group by col",
        "OrderBy": "0 ASC",
        "Query": "select col, count(DISTINCT name) from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}

# count with distinct no unique vindex
"select col1, count(distinct col2) from user group by col1"
{
  "QueryType": "SELECT",
  "Original": "select col1, count(distinct col2) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1) AS count(distinct col2)",
    "Distinct": "true",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from user where 1 != 1 group by col1, col2",
        "Query": "select col1, col2 from user group by col1, col2 order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col1, count(distinct col2) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1|3) AS count(distinct col2)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from user where 1 != 1 group by col1, weight_string(col1), col2, weight_string(col2)",
        "OrderBy": "(0|2) ASC, (1|3) ASC",
        "Query": "select col1, col2, weight_string(col1), weight_string(col2) from user group by col1, weight_string(col1), col2, weight_string(col2) order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}

# count with distinct no unique vindex and no group by
"select count(distinct col2) from user"
{
  "QueryType": "SELECT",
  "Original": "select count(distinct col2) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(0) AS count(distinct col2)",
    "Distinct": "true",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col2 from user where 1 != 1 group by col2",
        "Query": "select col2 from user group by col2 order by col2 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select count(distinct col2) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "count_distinct(0|1) AS count(distinct col2)",
    "ResultColumns": 1,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col2, weight_string(col2) from user where 1 != 1 group by col2, weight_string(col2)",
        "OrderBy": "(0|1) ASC",
        "Query": "select col2, weight_string(col2) from user group by col2, weight_string(col2) order by col2 asc",
        "Table": "user"
      }
    ]
  }
}

# count with distinct no unique vindex, count expression aliased
"select col1, count(distinct col2) c2 from user group by col1"
{
  "QueryType": "SELECT",
  "Original": "select col1, count(distinct col2) c2 from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1) AS c2",
    "Distinct": "true",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from user where 1 != 1 group by col1, col2",
        "Query": "select col1, col2 from user group by col1, col2 order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col1, count(distinct col2) c2 from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1|3) AS c2",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from user where 1 != 1 group by col1, weight_string(col1), col2, weight_string(col2)",
        "OrderBy": "(0|2) ASC, (1|3) ASC",
        "Query": "select col1, col2, weight_string(col1), weight_string(col2) from user group by col1, weight_string(col1), col2, weight_string(col2) order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}

# sum with distinct no unique vindex
"select col1, sum(distinct col2) from user group by col1"
{
  "QueryType": "SELECT",
  "Original": "select col1, sum(distinct col2) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_distinct(1) AS sum(distinct col2)",
    "Distinct": "true",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from user where 1 != 1 group by col1, col2",
        "Query": "select col1, col2 from user group by col1, col2 order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col1, sum(distinct col2) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_distinct(1|3) AS sum(distinct col2)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from user where 1 != 1 group by col1, weight_string(col1), col2, weight_string(col2)",
        "OrderBy": "(0|2) ASC, (1|3) ASC",
        "Query": "select col1, col2, weight_string(col1), weight_string(col2) from user group by col1, weight_string(col1), col2, weight_string(col2) order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}

# min with distinct no unique vindex. distinct is ignored.
"select col1, min(distinct col2) from user group by col1"
{
  "QueryType": "SELECT",
  "Original": "select col1, min(distinct col2) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "min(1)",
    "Distinct": "false",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, min(DISTINCT col2) from user where 1 != 1 group by col1",
        "Query": "select col1, min(DISTINCT col2) from user group by col1 order by col1 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col1, min(distinct col2) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "min(1|3) AS min(distinct col2)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from user where 1 != 1 group by col1, weight_string(col1), col2, weight_string(col2)",
        "OrderBy": "(0|2) ASC, (1|3) ASC",
        "Query": "select col1, col2, weight_string(col1), weight_string(col2) from user group by col1, weight_string(col1), col2, weight_string(col2) order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}

# order by count distinct
"select col1, count(distinct col2) k from user group by col1 order by k"
{
  "QueryType": "SELECT",
  "Original": "select col1, count(distinct col2) k from user group by col1 order by k",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "1 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1) AS k",
        "Distinct": "true",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2 from user where 1 != 1 group by col1, col2",
            "Query": "select col1, col2 from user group by col1, col2 order by col1 asc, col2 asc",
            "Table": "user"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col1, count(distinct col2) k from user group by col1 order by k",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "1 ASC",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count_distinct(1|3) AS k",
        "GroupBy": "(0|2)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from user where 1 != 1 group by col1, weight_string(col1), col2, weight_string(col2)",
            "OrderBy": "(0|2) ASC, (1|3) ASC",
            "Query": "select col1, col2, weight_string(col1), weight_string(col2) from user group by col1, weight_string(col1), col2, weight_string(col2) order by col1 asc, col2 asc",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# scatter aggregate group by aggregate function
" select count(*) b from user group by b"
"group by expression cannot reference an aggregate function: b"
Gen4 error: Can't group on 'count(*)'

# scatter aggregate multiple group by (columns)
"select a, b, count(*) from user group by b, a"
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) from user group by b, a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(2)",
    "Distinct": "false",
    "GroupBy": "1, 0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, count(*) from user where 1 != 1 group by b, a",
        "Query": "select a, b, count(*) from user group by b, a order by b asc, a asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) from user group by b, a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(2) AS count(*)",
    "GroupBy": "(0|3), (1|4)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, count(*), weight_string(a), weight_string(b) from user where 1 != 1 group by a, weight_string(a), b, weight_string(b)",
        "OrderBy": "(0|3) ASC, (1|4) ASC",
        "Query": "select a, b, count(*), weight_string(a), weight_string(b) from user group by a, weight_string(a), b, weight_string(b) order by a asc, b asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate multiple group by (numbers)
"select a, b, count(*) from user group by 2, 1"
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) from user group by 2, 1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(2)",
    "Distinct": "false",
    "GroupBy": "1, 0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, count(*) from user where 1 != 1 group by 2, 1",
        "Query": "select a, b, count(*) from user group by 2, 1 order by b asc, a asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) from user group by 2, 1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(2) AS count(*)",
    "GroupBy": "(0|3), (1|4)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, count(*), weight_string(a), weight_string(b) from user where 1 != 1 group by a, weight_string(a), b, weight_string(b)",
        "OrderBy": "(0|3) ASC, (1|4) ASC",
        "Query": "select a, b, count(*), weight_string(a), weight_string(b) from user group by a, weight_string(a), b, weight_string(b) order by a asc, b asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate group by column number
"select col from user group by 1"
{
  "QueryType": "SELECT",
  "Original": "select col from user group by 1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Distinct": "false",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1 group by 1",
        "Query": "select col from user group by 1 order by col asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col from user group by 1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1 group by col",
        "OrderBy": "0 ASC",
        "Query": "select col from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate group by invalid column number
"select col from user group by 2"
"column number out of range: 2"
Gen4 error: Unknown column '2' in 'group statement'

# scatter aggregate order by null
"select count(*) from user order by null"
{
  "QueryType": "SELECT",
  "Original": "select count(*) from user order by null",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select count(*) from user",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select count(*) from user order by null",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select count(*) from user",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate with complex select list (can't build order by)
"select distinct a+1 from user"
"generating order by clause: cannot reference a complex expression"
Gen4 error: unsupported: in scatter query: complex order by expression: a + 1

# scatter aggregate with numbered order by columns
"select a, b, c, d, count(*) from user group by 1, 2, 3 order by 1, 2, 3"
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by 1, 2, 3",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(4)",
    "Distinct": "false",
    "GroupBy": "0, 1, 2",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, d, count(*) from user where 1 != 1 group by 1, 2, 3",
        "Query": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by 1 asc, 2 asc, 3 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by 1, 2, 3",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "random(3) AS d, sum_count_star(4) AS count(*)",
    "GroupBy": "(0|5), (1|6), (2|7)",
    "ResultColumns": 5,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from user where 1 != 1 group by a, weight_string(a), b, weight_string(b), c, weight_string(c)",
        "OrderBy": "(0|5) ASC, (1|6) ASC, (2|7) ASC",
        "Query": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from user group by a, weight_string(a), b, weight_string(b), c, weight_string(c) order by a asc, b asc, c asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate with named order by columns
"select a, b, c, d, count(*) from user group by 1, 2, 3 order by a, b, c"
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by a, b, c",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(4)",
    "Distinct": "false",
    "GroupBy": "0, 1, 2",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, d, count(*) from user where 1 != 1 group by 1, 2, 3",
        "Query": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by a asc, b asc, c asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3 order by a, b, c",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "random(3) AS d, sum_count_star(4) AS count(*)",
    "GroupBy": "(0|5), (1|6), (2|7)",
    "ResultColumns": 5,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from user where 1 != 1 group by a, weight_string(a), b, weight_string(b), c, weight_string(c)",
        "OrderBy": "(0|5) ASC, (1|6) ASC, (2|7) ASC",
        "Query": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c) from user group by a, weight_string(a), b, weight_string(b), c, weight_string(c) order by a asc, b asc, c asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate with jumbled order by columns
"select a, b, c, d, count(*) from user group by 1, 2, 3, 4 order by d, b, a, c"
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3, 4 order by d, b, a, c",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(4)",
    "Distinct": "false",
    "GroupBy": "0, 1, 2, 3",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, d, count(*) from user where 1 != 1 group by 1, 2, 3, 4",
        "Query": "select a, b, c, d, count(*) from user group by 1, 2, 3, 4 order by d asc, b asc, a asc, c asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, d, count(*) from user group by 1, 2, 3, 4 order by d, b, a, c",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(4) AS count(*)",
    "GroupBy": "(3|8), (1|6), (0|5), (2|7)",
    "ResultColumns": 5,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c), weight_string(d) from user where 1 != 1 group by a, weight_string(a), b, weight_string(b), c, weight_string(c), d, weight_string(d)",
        "OrderBy": "(3|8) ASC, (1|6) ASC, (0|5) ASC, (2|7) ASC",
        "Query": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c), weight_string(d) from user group by a, weight_string(a), b, weight_string(b), c, weight_string(c), d, weight_string(d) order by d asc, b asc, a asc, c asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate with jumbled group by and order by columns
"select a, b, c, d, count(*) from user group by 3, 2, 1, 4 order by d, b, a, c"
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, d, count(*) from user group by 3, 2, 1, 4 order by d, b, a, c",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(4)",
    "Distinct": "false",
    "GroupBy": "2, 1, 0, 3",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, d, count(*) from user where 1 != 1 group by 3, 2, 1, 4",
        "Query": "select a, b, c, d, count(*) from user group by 3, 2, 1, 4 order by d asc, b asc, a asc, c asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, d, count(*) from user group by 3, 2, 1, 4 order by d, b, a, c",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(4) AS count(*)",
    "GroupBy": "(3|8), (1|6), (0|5), (2|7)",
    "ResultColumns": 5,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c), weight_string(d) from user where 1 != 1 group by a, weight_string(a), b, weight_string(b), c, weight_string(c), d, weight_string(d)",
        "OrderBy": "(3|8) ASC, (1|6) ASC, (0|5) ASC, (2|7) ASC",
        "Query": "select a, b, c, d, count(*), weight_string(a), weight_string(b), weight_string(c), weight_string(d) from user group by a, weight_string(a), b, weight_string(b), c, weight_string(c), d, weight_string(d) order by d asc, b asc, a asc, c asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate with some descending order by cols
"select a, b, c, count(*) from user group by 3, 2, 1 order by 1 desc, 3 desc, b"
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, count(*) from user group by 3, 2, 1 order by 1 desc, 3 desc, b",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(3)",
    "Distinct": "false",
    "GroupBy": "2, 1, 0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, count(*) from user where 1 != 1 group by 3, 2, 1",
        "Query": "select a, b, c, count(*) from user group by 3, 2, 1 order by 1 desc, 3 desc, b asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, b, c, count(*) from user group by 3, 2, 1 order by 1 desc, 3 desc, b",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(3) AS count(*)",
    "GroupBy": "(0|4), (2|6), (1|5)",
    "ResultColumns": 4,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, c, count(*), weight_string(a), weight_string(b), weight_string(c) from user where 1 != 1 group by a, weight_string(a), b, weight_string(b), c, weight_string(c)",
        "OrderBy": "(0|4) DESC, (2|6) DESC, (1|5) ASC",
        "Query": "select a, b, c, count(*), weight_string(a), weight_string(b), weight_string(c) from user group by a, weight_string(a), b, weight_string(b), c, weight_string(c) order by a desc, c desc, b asc",
        "Table": "user"
      }
    ]
  }
}

# aggregate with limit
"select col, count(*) from user group by col limit 10"
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) from user group by col limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": 10,
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(1)",
        "Distinct": "false",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) from user where 1 != 1 group by col",
            "Query": "select col, count(*) from user group by col order by col asc limit :__upper_limit",
            "Table": "user"
          }
        ]
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) from user group by col limit 10",
  "Instructions": {
    "OperatorType": "Limit",
    "Count": "10",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) from user where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(*) from user group by col order by col asc limit :__upper_limit",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# invalid order by column numner for scatter
"select col, count(*) from user group by col order by 5 limit 10"
"column number out of range: 5"
Gen4 error: Unknown column '5' in 'order clause'

# Group by with collate operator
"select user.col1 as a from user where user.name = 5 group by a collate utf8_general_ci"
{
  "QueryType": "SELECT",
  "Original": "select user.col1 as a from user where user.name = 5 group by a collate utf8_general_ci",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectEqualUnique",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select user.col1 as a from user where 1 != 1 group by a collate utf8_general_ci",
    "Query": "select user.col1 as a from user where user.name = 5 group by a collate utf8_general_ci",
    "Table": "user",
    "Values": [
      "INT64(5)"
    ],
    "Vindex": "user_index"
  }
}
Gen4 plan same as above

# Group by invalid column number (code is duplicated from symab).
"select id from user group by 1.1"
"column number is not an int"
{
  "QueryType": "SELECT",
  "Original": "select id from user group by 1.1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "random(0) AS id",
    "GroupBy": "1",
    "ResultColumns": 1,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, 1.1 from user where 1 != 1 group by 1.1",
        "OrderBy": "1 ASC",
        "Query": "select id, 1.1 from user group by 1.1 order by 1.1 asc",
        "Table": "user"
      }
    ]
  }
}

# Group by out of range column number (code is duplicated from symab).
"select id from user group by 2"
"column number out of range: 2"
Gen4 error: Unknown column '2' in 'group statement'

# syntax error detected by planbuilder
"select count(distinct *) from user"
"syntax error: count(distinct *)"
Gen4 error: unsupported: in scatter query: complex order by expression: *

# scatter aggregate in a subquery
"select a from (select count(*) as a from user) t"
{
  "QueryType": "SELECT",
  "Original": "select a from (select count(*) as a from user) t",
  "Instructions": {
    "OperatorType": "Subquery",
    "Columns": [
      0
    ],
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "count(0)",
        "Distinct": "false",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# scatter avg
"select avg(costly) from user"
{
  "QueryType": "SELECT",
  "Original": "select avg(costly) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "avg_sum(0) AS avg(costly);avg_count(1)",
    "Distinct": "false",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select sum(costly), count(costly) from user where 1 != 1",
        "Query": "select sum(costly), count(costly) from user",
        "Table": "user"
      }
    ]
  }
}

# scatter avg group by non-vindex column
"select id, avg(costly) from user group by id"
{
  "QueryType": "SELECT",
  "Original": "select id, avg(costly) from user group by id",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "avg_sum(1) AS avg(costly);avg_count(2)",
    "Distinct": "false",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, sum(costly), count(costly) from user where 1 != 1 group by id",
        "Query": "select id, sum(costly), count(costly) from user group by id order by id asc",
        "Table": "user"
      }
    ]
  }
}

# scatter avg group by non-vindex column order by avg_cost
"select id, avg(costly) as avg_cost from user group by id order by avg_cost"
{
  "QueryType": "SELECT",
  "Original": "select id, avg(costly) as avg_cost from user group by id order by avg_cost",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "1 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "avg_sum(1) AS avg_cost;avg_count(2)",
        "Distinct": "false",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select id, sum(costly), count(costly) from user where 1 != 1 group by id",
            "Query": "select id, sum(costly), count(costly) from user group by id order by id asc",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# scatter avg group by vindex column
"select name, avg(costly) from user group by name"
{
  "QueryType": "SELECT",
  "Original": "select name, avg(costly) from user group by name",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name, avg(costly) from user where 1 != 1 group by name",
    "Query": "select name, avg(costly) from user group by name",
    "Table": "user"
  }
}

# Aggregate on join
"select user.a, count(*) from user join user_extra group by user.a"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select user.a, count(*) from user join user_extra group by user.a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as a",
          "[COLUMN 2] * [COLUMN 3] as count(*)",
          "[COLUMN 1]"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:1,L:2,L:0,R:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*), `user`.a, weight_string(`user`.a) from user where 1 != 1 group by `user`.a, weight_string(`user`.a)",
                "OrderBy": "(1|2) ASC",
                "Query": "select count(*), `user`.a, weight_string(`user`.a) from user group by `user`.a, weight_string(`user`.a) order by `user`.a asc",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(*) from user_extra where 1 != 1 group by 1",
                "Query": "select 1, count(*) from user_extra group by 1",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# Aggregate on other table in join
"select user.a, count(user_extra.a) from user join user_extra group by user.a"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select user.a, count(user_extra.a) from user join user_extra group by user.a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count(1) AS count(user_extra.a)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as a",
          "[COLUMN 2] * [COLUMN 3] as count(user_extra.a)",
          "[COLUMN 1]"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:1,L:2,L:0,R:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*), `user`.a, weight_string(`user`.a) from user where 1 != 1 group by `user`.a, weight_string(`user`.a)",
                "OrderBy": "(1|2) ASC",
                "Query": "select count(*), `user`.a, weight_string(`user`.a) from user group by `user`.a, weight_string(`user`.a) order by `user`.a asc",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(user_extra.a) from user_extra where 1 != 1 group by 1",
                "Query": "select 1, count(user_extra.a) from user_extra group by 1",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# Aggregates and joins
"select count(*) from user join user_extra"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) from user join user_extra",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] * [COLUMN 1] as count(*)"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,R:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) from user where 1 != 1",
                "Query": "select count(*) from user",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(*) from user_extra where 1 != 1 group by 1",
                "Query": "select 1, count(*) from user_extra group by 1",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# Grouping on join
"select user.a from user join user_extra group by user.a"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select user.a from user join user_extra group by user.a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "(0|1)",
    "ResultColumns": 1,
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as a",
          "[COLUMN 1]"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.a, weight_string(`user`.a) from user where 1 != 1 group by `user`.a, weight_string(`user`.a)",
                "OrderBy": "(0|1) ASC",
                "Query": "select `user`.a, weight_string(`user`.a) from user group by `user`.a, weight_string(`user`.a) order by `user`.a asc",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# aggregate query with order by NULL
"select col, count(*) k from user group by col order by null"
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) k from user group by col order by null",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct":false,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, count(*) as k from user where 1 != 1 group by col",
        "Query": "select col, count(*) as k from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) k from user group by col order by null",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS k",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, count(*) as k from user where 1 != 1 group by col",
        "OrderBy": "0 ASC",
        "Query": "select col, count(*) as k from user group by col order by col asc",
        "Table": "user"
      }
    ]
  }
}

# aggregate query with order by aggregate column along with NULL
"select col, count(*) k from user group by col order by null, k"
"column number is not an int"
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) k from user group by col order by null, k",
  "Instructions": {
    "OperatorType": "Sort",
    "Variant": "Memory",
    "OrderBy": "1 ASC",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS k",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) as k from user where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(*) as k from user group by col order by col asc",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# aggregation on top of semijoin
"select count(*) from user where exists (select 0 from user_extra where user.apa = user_extra.bar)"
"unsupported: cross-shard correlated subquery"
{
  "QueryType": "SELECT",
  "Original": "select count(*) from user where exists (select 0 from user_extra where user.apa = user_extra.bar)",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 1] as count(*)"
        ],
        "Inputs": [
          {
            "OperatorType": "SemiJoin",
            "JoinVars": {
              "user_apa": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.apa, count(*), weight_string(`user`.apa) from user where 1 != 1 group by `user`.apa, weight_string(`user`.apa)",
                "Query": "select `user`.apa, count(*), weight_string(`user`.apa) from user group by `user`.apa, weight_string(`user`.apa)",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from user_extra where 1 != 1",
                "Query": "select 1 from user_extra where user_extra.bar = :user_apa",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# aggregation spread out across three routes
"select count(u.textcol1), count(ue.foo), us.bar from user u join user_extra ue on u.foo = ue.bar join unsharded us on ue.bar = us.baz group by us.bar"
Gen3 skip
{
  "QueryType": "SELECT",
  "Original": "select count(u.textcol1), count(ue.foo), us.bar from user u join user_extra ue on u.foo = ue.bar join unsharded us on ue.bar = us.baz group by us.bar",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count(0) AS count(u.textcol1), sum_count(1) AS count(ue.foo)",
    "GroupBy": "(2|3)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "([COLUMN 2] * [COLUMN 3]) * [COLUMN 4] as count(u.textcol1)",
          "([COLUMN 5] * [COLUMN 6]) * [COLUMN 7] as count(ue.foo)",
          "[COLUMN 0] as bar",
          "[COLUMN 1]"
        ],
        "Inputs": [
          {
            "OperatorType": "Sort",
            "Variant": "Memory",
            "OrderBy": "(0|1) ASC",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "R:0,R:1,L:1,R:2,R:3,L:2,R:4,R:5",
                "JoinVars": {
                  "u_foo": 0
                },
                "TableName": "`user`_user_extra_unsharded",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "SelectScatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u.foo, count(u.textcol1), count(*), weight_string(u.foo) from user as u where 1 != 1 group by u.foo, weight_string(u.foo)",
                    "Query": "select u.foo, count(u.textcol1), count(*), weight_string(u.foo) from user as u group by u.foo, weight_string(u.foo)",
                    "Table": "user"
                  },
                  {
                    "OperatorType": "Join",
                    "Variant": "Join",
                    "JoinColumnIndexes": "R:1,R:2,L:1,R:0,L:2,R:0",
                    "JoinVars": {
                      "ue_bar": 0
                    },
                    "TableName": "user_extra_unsharded",
                    "Inputs": [
                      {
                        "OperatorType": "Route",
                        "Variant": "SelectScatter",
                        "Keyspace": {
                          "Name": "user",
                          "Sharded": true
                        },
                        "FieldQuery": "select ue.bar, count(*), count(ue.foo), weight_string(ue.bar) from user_extra as ue where 1 != 1 group by ue.bar, weight_string(ue.bar)",
                        "Query": "select ue.bar, count(*), count(ue.foo), weight_string(ue.bar) from user_extra as ue where ue.bar = :u_foo group by ue.bar, weight_string(ue.bar)",
                        "Table": "user_extra"
                      },
                      {
                        "OperatorType": "Route",
                        "Variant": "Unsharded",
                        "Keyspace": {
                          "Name": "main",
                          "Sharded": false
                        },
                        "FieldQuery": "select count(*), us.bar, weight_string(us.bar) from unsharded as us where 1 != 1 group by us.bar, weight_string(us.bar)",
                        "Query": "select count(*), us.bar, weight_string(us.bar) from unsharded as us where us.baz = :ue_bar group by us.bar, weight_string(us.bar)",
                        "Table": "unsharded"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}

# correlated subquery in exists clause with an ordering
"select col, id from user where exists(select user_id from user_extra where user_id = 3 and user_id < user.id) order by id"
"unsupported: cross-shard correlated subquery"
{
  "QueryType": "SELECT",
  "Original": "select col, id from user where exists(select user_id from user_extra where user_id = 3 and user_id \u003c user.id) order by id",
  "Instructions": {
    "OperatorType": "SemiJoin",
    "JoinVars": {
      "user_id": 0
    },
    "ProjectedIndexes": "-2,-1",
    "TableName": "`user`_user_extra",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select `user`.id, col, weight_string(id) from user where 1 != 1",
        "OrderBy": "(0|2) ASC",
        "Query": "select `user`.id, col, weight_string(id) from user order by id asc",
        "Table": "user"
      },
      {
        "OperatorType": "Route",
        "Variant": "EqualUnique",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select 1 from user_extra where 1 != 1",
        "Query": "select 1 from user_extra where user_id = 3 and user_id \u003c :user_id",
        "Table": "user_extra",
        "Values": [
          "INT64(3)"
        ],
        "Vindex": "user_index"
      }
    ]
  }
}

# correlated subquery on sharding key with group by a unique vindex with having clause.
"select count(*) from user where exists (select 1 from user_extra where user_id = user.id group by user_id having max(col) > 10)"
Gen3 skip
{
  "QueryType": "SELECT",
  "Original": "select count(*) from user where exists (select 1 from user_extra where user_id = user.id group by user_id having max(col) \u003e 10)",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select count(*) from user where exists (select 1 from user_extra where user_id = `user`.id group by user_id having max(col) \u003e 10 limit 1)",
        "Table": "user"
      }
    ]
  }
}

# count non-null columns incoming from outer joins should work well
"select count(col) from (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) as x"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(col) from (select user_extra.col as col from user left join user_extra on user.id = user_extra.id limit 10) as x",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "count(0) AS count(col)",
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as count(col)"
        ],
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": "INT64(10)",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "LeftJoin",
                "JoinColumnIndexes": "R:0",
                "JoinVars": {
                  "user_id": 0
                },
                "TableName": "`user`_user_extra",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "SelectScatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select `user`.id from user where 1 != 1",
                    "Query": "select `user`.id from user",
                    "Table": "user"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "SelectScatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select user_extra.col as col from user_extra where 1 != 1",
                    "Query": "select user_extra.col as col from user_extra where user_extra.id = :user_id",
                    "Table": "user_extra"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}

# count on column from LIMIT
"select count(city) from (select phone, id, city from user where id > 12 limit 10) as x"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(city) from (select phone, id, city from user where id \u003e 12 limit 10) as x",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "count(0) AS count(city)",
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 2] as count(city)"
        ],
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": "INT64(10)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select phone, id, city from user where 1 != 1",
                "Query": "select phone, id, city from user where id \u003e 12 limit :__upper_limit",
                "Table": "user"
              }
            ]
          }
        ]
      }
    ]
  }
}

# count(*) on column from LIMIT
"select count(*) from (select phone, id, city from user where id > 12 limit 10) as x"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) from (select phone, id, city from user where id \u003e 12 limit 10) as x",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "count_star(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as count(*)"
        ],
        "Inputs": [
          {
            "OperatorType": "Limit",
            "Count": "INT64(10)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select phone, id, city from user where 1 != 1",
                "Query": "select phone, id, city from user where id \u003e 12 limit :__upper_limit",
                "Table": "user"
              }
            ]
          }
        ]
      }
    ]
  }
}

# distinct aggregation will 3 table join query
"select u.textcol1, count(distinct u.val2) from user u join user u2 on u.val2 = u2.id join music m on u2.val2 = m.id group by u.textcol1"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select u.textcol1, count(distinct u.val2) from user u join user u2 on u.val2 = u2.id join music m on u2.val2 = m.id group by u.textcol1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1|2) AS count(distinct u.val2)",
    "GroupBy": "0 COLLATE latin1_swedish_ci",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as textcol1",
          "[COLUMN 1] as val2",
          "[COLUMN 2]"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:2,L:3,L:5",
            "JoinVars": {
              "u2_val2": 0
            },
            "TableName": "`user`_`user`_music",
            "Inputs": [
              {
                "OperatorType": "Join",
                "Variant": "Join",
                "JoinColumnIndexes": "R:0,R:0,L:2,L:0,R:1,L:1",
                "JoinVars": {
                  "u_val2": 0
                },
                "TableName": "`user`_`user`",
                "Inputs": [
                  {
                    "OperatorType": "Route",
                    "Variant": "SelectScatter",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u.val2, weight_string(u.val2), u.textcol1 from user as u where 1 != 1 group by u.val2, weight_string(u.val2), u.textcol1",
                    "OrderBy": "2 ASC COLLATE latin1_swedish_ci, (0|1) ASC",
                    "Query": "select u.val2, weight_string(u.val2), u.textcol1 from user as u group by u.val2, weight_string(u.val2), u.textcol1 order by u.textcol1 asc, u.val2 asc",
                    "Table": "user"
                  },
                  {
                    "OperatorType": "Route",
                    "Variant": "EqualUnique",
                    "Keyspace": {
                      "Name": "user",
                      "Sharded": true
                    },
                    "FieldQuery": "select u2.val2, weight_string(u2.val2) from user as u2 where 1 != 1 group by u2.val2, weight_string(u2.val2)",
                    "Query": "select u2.val2, weight_string(u2.val2) from user as u2 where u2.id = :u_val2 group by u2.val2, weight_string(u2.val2)",
                    "Table": "user",
                    "Values": [
                      ":u_val2"
                    ],
                    "Vindex": "user_index"
                  }
                ]
              },
              {
                "OperatorType": "Route",
                "Variant": "EqualUnique",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1 from music as m where 1 != 1",
                "Query": "select 1 from music as m where m.id = :u2_val2",
                "Table": "music",
                "Values": [
                  ":u2_val2"
                ],
                "Vindex": "music_user_map"
              }
            ]
          }
        ]
      }
    ]
  }
}

# distinct on text column with collation
"select col, count(distinct textcol1) from user group by col"
{
  "QueryType": "SELECT",
  "Original": "select col, count(distinct textcol1) from user group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1) AS count(distinct textcol1)",
    "Distinct":true,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, textcol1, weight_string(textcol1) from user where 1 != 1 group by col, textcol1",
        "Query": "select col, textcol1, weight_string(textcol1) from user group by col, textcol1 order by col asc, textcol1 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col, count(distinct textcol1) from user group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1) AS count(distinct textcol1)",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, textcol1 from user where 1 != 1 group by col, textcol1",
        "OrderBy": "0 ASC, 1 ASC",
        "Query": "select col, textcol1 from user group by col, textcol1 order by col asc, textcol1 asc",
        "Table": "user"
      }
    ]
  }
}

# do not use distinct when using only aggregates and no group by
"select distinct count(*) from user"
"unsupported: distinct cannot be combined with aggregate functions"
{
  "QueryType": "SELECT",
  "Original": "select distinct count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from user where 1 != 1",
        "Query": "select count(*) from user",
        "Table": "user"
      }
    ]
  }
}

# group by a unique vindex should revert to simple route, and having clause should find the correct symbols.
"select name, count(*) c from user group by name having max(col) > 10"
{
  "QueryType": "SELECT",
  "Original": "select name, count(*) c from user group by name having max(col) \u003e 10",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name, count(*) as c from user where 1 != 1 group by name",
    "Query": "select name, count(*) as c from user group by name having max(col) \u003e 10",
    "Table": "user"
  }
}
Gen4 plan same as above

# group by and ',' joins
"select user.id from user, user_extra group by id"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select user.id from user, user_extra group by id",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "random(0) AS id",
    "GroupBy": "(2|1)",
    "ResultColumns": 1,
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 2] * [COLUMN 3] as id",
          "[COLUMN 1]",
          "[COLUMN 0] as id"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,L:0,R:1",
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.id, weight_string(id) from user where 1 != 1 group by id, weight_string(id)",
                "OrderBy": "(0|1) ASC",
                "Query": "select `user`.id, weight_string(id) from user group by id, weight_string(id) order by id asc",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(*) from user_extra where 1 != 1 group by 1",
                "Query": "select 1, count(*) from user_extra group by 1",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# group by and ',' joins with condition
"select user.col from user join user_extra on user_extra.col = user.col group by user.id"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select user.col from user join user_extra on user_extra.col = user.col group by user.id",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "random(0) AS col",
    "GroupBy": "(2|1)",
    "ResultColumns": 1,
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 2] * [COLUMN 3] as col",
          "[COLUMN 1]",
          "[COLUMN 0] as id"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:1,L:2,L:0,R:1",
            "JoinVars": {
              "user_col": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col, `user`.id, weight_string(`user`.id) from user where 1 != 1 group by `user`.col, `user`.id, weight_string(`user`.id)",
                "OrderBy": "(1|2) ASC",
                "Query": "select `user`.col, `user`.id, weight_string(`user`.id) from user group by `user`.col, `user`.id, weight_string(`user`.id) order by `user`.id asc",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(*) from user_extra where 1 != 1 group by 1",
                "Query": "select 1, count(*) from user_extra where user_extra.col = :user_col group by 1",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# group by column alias
"select ascii(val1) as a, count(*) from user group by a"
{
  "QueryType": "SELECT",
  "Original": "select ascii(val1) as a, count(*) from user group by a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct":false,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ascii(val1) as a, count(*) from user where 1 != 1 group by a",
        "Query": "select ascii(val1) as a, count(*) from user group by a order by a asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select ascii(val1) as a, count(*) from user group by a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select ascii(val1) as a, count(*), weight_string(ascii(val1)) from user where 1 != 1 group by a, weight_string(ascii(val1))",
        "OrderBy": "(0|2) ASC",
        "Query": "select ascii(val1) as a, count(*), weight_string(ascii(val1)) from user group by a, weight_string(ascii(val1)) order by a asc",
        "Table": "user"
      }
    ]
  }
}

# group by must only reference expressions in the select list
"select col, count(*) from user group by col, baz"
Gen3 skip
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) from user group by col, baz",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "0, (2|3)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, count(*), baz, weight_string(baz) from user where 1 != 1 group by col, baz, weight_string(baz)",
        "OrderBy": "0 ASC, (2|3) ASC",
        "Query": "select col, count(*), baz, weight_string(baz) from user group by col, baz, weight_string(baz) order by col asc, baz asc",
        "Table": "user"
      }
    ]
  }
}

# here it is safe to remove the order by on the derived table since it will not influence the output of the count(*)
"select count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*) from (select `user`.col, user_extra.extra, weight_string(user_extra.extra) from user, user_extra where 1 != 1) as a where 1 != 1",
        "OrderBy": "(1|2) ASC",
        "Query": "select count(*) from (select `user`.col, user_extra.extra, weight_string(user_extra.extra) from user, user_extra where `user`.id = user_extra.user_id order by user_extra.extra asc) as a",
        "Table": "`user`, user_extra"
      }
    ]
  }
}

# here we keep the order since the column is visible on the outside, and used by the orderedAggregate
"select col, count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a group by col"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) from (select user.col, user_extra.extra from user join user_extra on user.id = user_extra.user_id order by user_extra.extra) a group by col",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col, count(*) from (select `user`.col, user_extra.extra, weight_string(user_extra.extra) from user, user_extra where 1 != 1) as a where 1 != 1 group by col",
        "OrderBy": "(1|2) ASC, 0 ASC",
        "Query": "select col, count(*) from (select `user`.col, user_extra.extra, weight_string(user_extra.extra) from user, user_extra where `user`.id = user_extra.user_id order by user_extra.extra asc) as a group by col order by col asc",
        "Table": "`user`, user_extra"
      }
    ]
  }
}

# interleaving grouping, aggregation and join
"select user.col, min(user_extra.foo), user.bar, max(user_extra.bar) from user join user_extra on user.col = user_extra.bar group by user.col, user.bar"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select user.col, min(user_extra.foo), user.bar, max(user_extra.bar) from user join user_extra on user.col = user_extra.bar group by user.col, user.bar",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "min(1) AS min(user_extra.foo), max(3) AS max(user_extra.bar)",
    "GroupBy": "0, (2|4)",
    "ResultColumns": 4,
    "Inputs": [
      {
        "OperatorType": "Projection",
        "Expressions": [
          "[COLUMN 0] as col",
          "[COLUMN 3] as min(user_extra.foo)",
          "[COLUMN 1] as bar",
          "[COLUMN 4] as max(user_extra.bar)",
          "[COLUMN 2]"
        ],
        "Inputs": [
          {
            "OperatorType": "Join",
            "Variant": "Join",
            "JoinColumnIndexes": "L:0,L:1,L:2,R:1,R:2",
            "JoinVars": {
              "user_col": 0
            },
            "TableName": "`user`_user_extra",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select `user`.col, `user`.bar, weight_string(`user`.bar) from user where 1 != 1 group by `user`.col, `user`.bar, weight_string(`user`.bar)",
                "OrderBy": "0 ASC, (1|2) ASC",
                "Query": "select `user`.col, `user`.bar, weight_string(`user`.bar) from user group by `user`.col, `user`.bar, weight_string(`user`.bar) order by `user`.col asc, `user`.bar asc",
                "Table": "user"
              },
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, min(user_extra.foo), max(user_extra.bar) from user_extra where 1 != 1 group by 1",
                "Query": "select 1, min(user_extra.foo), max(user_extra.bar) from user_extra where user_extra.bar = :user_col group by 1",
                "Table": "user_extra"
              }
            ]
          }
        ]
      }
    ]
  }
}

# join query on sharding key with group by a unique vindex with having clause.
"select user.id, count(*) c from user, user_extra where user.id = user_extra.user_id group by user.id having max(user.col) > 10"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select user.id, count(*) c from user, user_extra where user.id = user_extra.user_id group by user.id having max(user.col) \u003e 10",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select `user`.id, count(*) as c from user, user_extra where 1 != 1 group by `user`.id",
    "Query": "select `user`.id, count(*) as c from user, user_extra where `user`.id = user_extra.user_id group by `user`.id having max(`user`.col) \u003e 10",
    "Table": "`user`, user_extra"
  }
}

# only extract the aggregation once, even if used twice
"select u.id from user u join user_extra ue on ue.id = u.id group by u.id having count(*) < 3 and count(*) > 5"
"unsupported: cross-shard query with aggregates"
{
  "QueryType": "SELECT",
  "Original": "select u.id from user u join user_extra ue on ue.id = u.id group by u.id having count(*) \u003c 3 and count(*) \u003e 5",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0
    ],
    "Inputs": [
      {
        "OperatorType": "Filter",
        "Predicate": "OFFSET(1, 'count(*)') \u003c 3 and OFFSET(1, 'count(*)') \u003e 5",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Projection",
                "Expressions": [
                  "[COLUMN 0] as id",
                  "[COLUMN 2] * [COLUMN 3] as count(*)",
                  "[COLUMN 1]"
                ],
                "Inputs": [
                  {
                    "OperatorType": "Sort",
                    "Variant": "Memory",
                    "OrderBy": "(0|1) ASC",
                    "Inputs": [
                      {
                        "OperatorType": "Join",
                        "Variant": "Join",
                        "JoinColumnIndexes": "R:1,R:2,L:1,R:0",
                        "JoinVars": {
                          "ue_id": 0
                        },
                        "TableName": "user_extra_`user`",
                        "Inputs": [
                          {
                            "OperatorType": "Route",
                            "Variant": "SelectScatter",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select ue.id, count(*), weight_string(ue.id) from user_extra as ue where 1 != 1 group by ue.id, weight_string(ue.id)",
                            "Query": "select ue.id, count(*), weight_string(ue.id) from user_extra as ue group by ue.id, weight_string(ue.id)",
                            "Table": "user_extra"
                          },
                          {
                            "OperatorType": "Route",
                            "Variant": "EqualUnique",
                            "Keyspace": {
                              "Name": "user",
                              "Sharded": true
                            },
                            "FieldQuery": "select count(*), u.id, weight_string(u.id) from user as u where 1 != 1 group by u.id, weight_string(u.id)",
                            "Query": "select count(*), u.id, weight_string(u.id) from user as u where u.id = :ue_id group by u.id, weight_string(u.id)",
                            "Table": "user",
                            "Values": [
                              ":ue_id"
                            ],
                            "Vindex": "user_index"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}

# optimize group by when using distinct with no aggregation
"select distinct col1, col2 from user group by col1, col2"
{
  "QueryType": "SELECT",
  "Original": "select distinct col1, col2 from user group by col1, col2",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Distinct":false,
    "GroupBy": "0, 1, 0, 1",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2 from user where 1 != 1 group by col1, col2",
        "Query": "select distinct col1, col2 from user group by col1, col2 order by col1 asc, col2 asc, col1 asc, col2 asc",
        "ResultColumns": 2,
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select distinct col1, col2 from user group by col1, col2",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "(0|2), (1|3)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2, weight_string(col1), weight_string(col2) from user where 1 != 1 group by col1, col2",
        "OrderBy": "(0|2) ASC, (1|3) ASC",
        "Query": "select distinct col1, col2, weight_string(col1), weight_string(col2) from user group by col1, col2 order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate multiple group by columns inverse order
"select a, b, count(*) from user group by b, a"
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) from user group by b, a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(2)",
    "Distinct":false,
    "GroupBy": "1, 0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, count(*) from user where 1 != 1 group by b, a",
        "Query": "select a, b, count(*) from user group by b, a order by b asc, a asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select a, b, count(*) from user group by b, a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(2) AS count(*)",
    "GroupBy": "(0|3), (1|4)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select a, b, count(*), weight_string(a), weight_string(b) from user where 1 != 1 group by a, weight_string(a), b, weight_string(b)",
        "OrderBy": "(0|3) ASC, (1|4) ASC",
        "Query": "select a, b, count(*), weight_string(a), weight_string(b) from user group by a, weight_string(a), b, weight_string(b) order by a asc, b asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate using distinctdistinct
"select distinct col from user"
{
  "QueryType": "SELECT",
  "Original": "select distinct col from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Distinct":false,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "Query": "select distinct col from user order by col asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select distinct col from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col from user where 1 != 1",
        "OrderBy": "0 ASC",
        "Query": "select distinct col from user order by col asc",
        "Table": "user"
      }
    ]
  }
}

# we have to track the order of distinct aggregation expressions
"select val2, count(distinct val1), count(*) from user group by val2"
{
  "QueryType": "SELECT",
  "Original": "select val2, count(distinct val1), count(*) from user group by val2",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(2)",
    "Distinct":true,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select val2, val1, count(*) from user where 1 != 1 group by val2, val1",
        "Query": "select val2, val1, count(*) from user group by val2, val1 order by val2 asc, val1 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select val2, count(distinct val1), count(*) from user group by val2",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1|4) AS count(distinct val1), sum_count_star(2) AS count(*)",
    "GroupBy": "(0|3)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select val2, val1, count(*), weight_string(val2), weight_string(val1) from user where 1 != 1 group by val2, weight_string(val2), val1, weight_string(val1)",
        "OrderBy": "(0|3) ASC, (1|4) ASC",
        "Query": "select val2, val1, count(*), weight_string(val2), weight_string(val1) from user group by val2, weight_string(val2), val1, weight_string(val1) order by val2 asc, val1 asc",
        "Table": "user"
      }
    ]
  }
}

# weight_string addition to group by
"select lower(textcol1) as v, count(*) from user group by v"
{
  "QueryType": "SELECT",
  "Original": "select lower(textcol1) as v, count(*) from user group by v",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct":false,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select lower(textcol1) as v, count(*) from user where 1 != 1 group by v",
        "Query": "select lower(textcol1) as v, count(*) from user group by v order by v asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select lower(textcol1) as v, count(*) from user group by v",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select lower(textcol1) as v, count(*), weight_string(lower(textcol1)) from user where 1 != 1 group by v, weight_string(lower(textcol1))",
        "OrderBy": "(0|2) ASC",
        "Query": "select lower(textcol1) as v, count(*), weight_string(lower(textcol1)) from user group by v, weight_string(lower(textcol1)) order by v asc",
        "Table": "user"
      }
    ]
  }
}

# weight_string addition to group by when also there in order by
"select char_length(texcol1) as a, count(*) from user group by a order by a"
{
  "QueryType": "SELECT",
  "Original": "select char_length(texcol1) as a, count(*) from user group by a order by a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct":false,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select char_length(texcol1) as a, count(*) from user where 1 != 1 group by a",
        "Query": "select char_length(texcol1) as a, count(*) from user group by a order by a asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select char_length(texcol1) as a, count(*) from user group by a order by a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select char_length(texcol1) as a, count(*), weight_string(char_length(texcol1)) from user where 1 != 1 group by a, weight_string(char_length(texcol1))",
        "OrderBy": "(0|2) ASC",
        "Query": "select char_length(texcol1) as a, count(*), weight_string(char_length(texcol1)) from user group by a, weight_string(char_length(texcol1)) order by a asc",
        "Table": "user"
      }
    ]
  }
}

# scatter aggregate symtab lookup error
"select id, b as id, count(*) from user order by id"
"ambiguous symbol reference: id"
{
  "QueryType": "SELECT",
  "Original": "select id, b as id, count(*) from user order by id",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "random(0) AS id, random(1) AS b AS id, sum_count_star(2) AS count(*)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, b as id, count(*), weight_string(b) from user where 1 != 1",
        "OrderBy": "(1|3) ASC",
        "Query": "select id, b as id, count(*), weight_string(b) from user order by id asc",
        "Table": "user"
      }
    ]
  }
}

# scatter group by a integer column. Do not add weight strings for this.
"select count(*), intcol from user group by intcol"
{
  "QueryType": "SELECT",
  "Original": "select count(*), intcol from user group by intcol",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(0)",
    "Distinct":false,
    "GroupBy": "1",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*), intcol from user where 1 != 1 group by intcol",
        "Query": "select count(*), intcol from user group by intcol order by intcol asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select count(*), intcol from user group by intcol",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(0) AS count(*)",
    "GroupBy": "1",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select count(*), intcol from user where 1 != 1 group by intcol",
        "OrderBy": "1 ASC",
        "Query": "select count(*), intcol from user group by intcol order by intcol asc",
        "Table": "user"
      }
    ]
  }
}

# group by a non-unique vindex column should use an OrderedAggregate primitive
"select id, count(*) from user group by id"
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user group by id",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct":false,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*) from user where 1 != 1 group by id",
        "Query": "select id, count(*) from user group by id order by id asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user group by id",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_count_star(1) AS count(*)",
    "GroupBy": "(0|2)",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*), weight_string(id) from user where 1 != 1 group by id, weight_string(id)",
        "OrderBy": "(0|2) ASC",
        "Query": "select id, count(*), weight_string(id) from user group by id, weight_string(id) order by id asc",
        "Table": "user"
      }
    ]
  }
}

# Cannot have more than one aggr(distinct...
"select count(distinct a), count(distinct b) from user"
"unsupported: only one distinct aggregation allowed in a select: count(distinct b)"
Gen4 plan same as above

# multiple distinct aggregations on the same column in different positions
"select count(distinct tcol2), tcol1, count(*), sum(distinct tcol2) from user group by tcol1"
"unsupported: only one distinct aggregation allowed in a select: sum(distinct tcol2)"
{
  "QueryType": "SELECT",
  "Original": "select count(distinct tcol2), tcol1, count(*), sum(distinct tcol2) from user group by tcol1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(0|4) AS count(distinct tcol2), sum_count_star(2) AS count(*), sum_distinct(3|4) AS sum(distinct tcol2)",
    "GroupBy": "(1|5)",
    "ResultColumns": 4,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select tcol2, tcol1, count(*), tcol2, weight_string(tcol2), weight_string(tcol1) from user where 1 != 1 group by tcol2, weight_string(tcol2), tcol1, weight_string(tcol1)",
        "OrderBy": "(1|5) ASC, (0|4) ASC",
        "Query": "select tcol2, tcol1, count(*), tcol2, weight_string(tcol2), weight_string(tcol1) from user group by tcol2, weight_string(tcol2), tcol1, weight_string(tcol1) order by tcol1 asc, tcol2 asc",
        "Table": "user"
      }
    ]
  }
}

# multiple distinct aggregations on the same column is allowed
"select tcol1, count(distinct tcol2), sum(distinct tcol2) from user group by tcol1"
"unsupported: only one distinct aggregation allowed in a select: sum(distinct tcol2)"
{
  "QueryType": "SELECT",
  "Original": "select tcol1, count(distinct tcol2), sum(distinct tcol2) from user group by tcol1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1|4) AS count(distinct tcol2), sum_distinct(2|4) AS sum(distinct tcol2)",
    "GroupBy": "(0|3)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select tcol1, tcol2, tcol2, weight_string(tcol1), weight_string(tcol2) from user where 1 != 1 group by tcol1, weight_string(tcol1), tcol2, weight_string(tcol2)",
        "OrderBy": "(0|3) ASC, (1|4) ASC",
        "Query": "select tcol1, tcol2, tcol2, weight_string(tcol1), weight_string(tcol2) from user group by tcol1, weight_string(tcol1), tcol2, weight_string(tcol2) order by tcol1 asc, tcol2 asc",
        "Table": "user"
      }
    ]
  }
}

# multiple distinct functions with grouping.
"select col1, count(distinct col2), sum(distinct col2) from user group by col1"
"unsupported: only one distinct aggregation allowed in a select: sum(distinct col2)"
{
  "QueryType": "SELECT",
  "Original": "select col1, count(distinct col2), sum(distinct col2) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count_distinct(1|4) AS count(distinct col2), sum_distinct(2|4) AS sum(distinct col2)",
    "GroupBy": "(0|3)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, col2, col2, weight_string(col1), weight_string(col2) from user where 1 != 1 group by col1, weight_string(col1), col2, weight_string(col2)",
        "OrderBy": "(0|3) ASC, (1|4) ASC",
        "Query": "select col1, col2, col2, weight_string(col1), weight_string(col2) from user group by col1, weight_string(col1), col2, weight_string(col2) order by col1 asc, col2 asc",
        "Table": "user"
      }
    ]
  }
}

# Column and Literal not equal filter on scatter aggregates
"select count(*) a from user having a != 10"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) a from user having a != 10",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a != 10",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Column and Literal equality filter on scatter aggregates
"select count(*) a from user having a = 10"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) a from user having a = 10",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a = 10",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Equality filtering with column and string literal on scatter aggregates
"select count(*) a from user having a = '1'"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) a from user having a = '1'",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a = '1'",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Greater Equal filter on scatter aggregates
"select count(*) a from user having a >= 10"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) a from user having a \u003e= 10",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a \u003e= 10",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Greater than filter on scatter aggregates
"select count(*) a from user having a > 10"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) a from user having a \u003e 10",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a \u003e 10",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Less Equal filter on scatter aggregates
"select count(*) a from user having a <= 10"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) a from user having a \u003c= 10",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a \u003c= 10",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Less Equal filter on scatter with grouping
"select col, count(*) a from user group by col having a <= 10"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select col, count(*) a from user group by col having a \u003c= 10",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a \u003c= 10",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS a",
        "GroupBy": "0",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select col, count(*) as a from user where 1 != 1 group by col",
            "OrderBy": "0 ASC",
            "Query": "select col, count(*) as a from user group by col order by col asc",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Less than filter on scatter aggregates
"select count(*) a from user having a < 10"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) a from user having a \u003c 10",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a \u003c 10",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# Not equal filter with column and string literal on scatter aggregates
"select count(*) a from user having a != '1'"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) a from user having a != '1'",
  "Instructions": {
    "OperatorType": "Filter",
    "Predicate": "a != '1'",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "sum_count_star(0) AS a",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select count(*) as a from user where 1 != 1",
            "Query": "select count(*) as a from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# We should be able to find grouping keys on ordered aggregates
"select count(*) as a, val1 from user group by val1 having a = 1.00"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select count(*) as a, val1 from user group by val1 having a = 1.00",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0,
      1
    ],
    "Inputs": [
      {
        "OperatorType": "Filter",
        "Predicate": "a = 1.00",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(0) AS a",
            "GroupBy": "(1|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select count(*) as a, val1, weight_string(val1) from user where 1 != 1 group by val1, weight_string(val1)",
                "OrderBy": "(1|2) ASC",
                "Query": "select count(*) as a, val1, weight_string(val1) from user group by val1, weight_string(val1) order by val1 asc",
                "Table": "user"
              }
            ]
          }
        ]
      }
    ]
  }
}

# aggr and non-aggr without group by (with query does not give useful result out)
"select id, count(*) from user"
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "count(1)",
    "Distinct":false,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*) from user where 1 != 1",
        "Query": "select id, count(*) from user",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select id, count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Scalar",
    "Aggregates": "random(0) AS id, sum_count_star(1) AS count(*)",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select id, count(*) from user where 1 != 1",
        "Query": "select id, count(*) from user",
        "Table": "user"
      }
    ]
  }
}

# aggregation filtering by having on a route
"select name from user group by name having count(name) = 10"
{
  "QueryType": "SELECT",
  "Original": "select name from user group by name having count(name) = 10",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select name from user where 1 != 1 group by name",
    "Query": "select name from user group by name having count(name) = 10",
    "Table": "user"
  }
}
Gen4 plan same as above

# aggregation filtering by having on a route with no group by
"select 1 from user having count(name) = 10"
{
  "QueryType": "SELECT",
  "Original": "select 1 from user having count(name) = 10",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select 1 from user where 1 != 1",
    "Query": "select 1 from user having count(name) = 10",
    "Table": "user"
  }
}
{
  "QueryType": "SELECT",
  "Original": "select 1 from user having count(name) = 10",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0
    ],
    "Inputs": [
      {
        "OperatorType": "Filter",
        "Predicate": "OFFSET(1, 'COUNT(name)') = 10",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Scalar",
            "Aggregates": "random(0) AS 1, sum_count(1) AS count(name)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select 1, count(name) from user where 1 != 1",
                "Query": "select 1, count(name) from user",
                "Table": "user"
              }
            ]
          }
        ]
      }
    ]
  }
}

# group_concat on single shards
# vitess gen3报错，VtDriver gen4竟然可以执行，并且和gen4生成的一样
"select group_concat(user_id order by name), name from user group by name"
{
  "QueryType": "SELECT",
  "Original": "select group_concat(user_id order by name), name from user group by name",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select group_concat(user_id order by name), name from user where 1 != 1 group by name",
    "Query": "select group_concat(user_id order by name), name from user group by name",
    "Table": "user"
  }
}
Gen4 plan same as above

# having should be able to add new aggregation expressions in having
"select foo from user group by foo having count(*) = 3"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select foo from user group by foo having count(*) = 3",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0
    ],
    "Inputs": [
      {
        "OperatorType": "Filter",
        "Predicate": "OFFSET(1, 'COUNT(*)') = 3",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, count(*), weight_string(foo) from user where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, count(*), weight_string(foo) from user group by foo, weight_string(foo) order by foo asc",
                "Table": "user"
              }
            ]
          }
        ]
      }
    ]
  }
}

# find aggregation expression and use column offset in filter
"select foo, count(*) from user group by foo having count(*) = 3"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select foo, count(*) from user group by foo having count(*) = 3",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0,
      1
    ],
    "Inputs": [
      {
        "OperatorType": "Filter",
        "Predicate": "OFFSET(1, 'COUNT(*)') = 3",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum_count_star(1) AS count(*)",
            "GroupBy": "(0|2)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, count(*), weight_string(foo) from user where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|2) ASC",
                "Query": "select foo, count(*), weight_string(foo) from user group by foo, weight_string(foo) order by foo asc",
                "Table": "user"
              }
            ]
          }
        ]
      }
    ]
  }
}

# find aggregation expression and use column offset in filter times two
"select foo, sum(foo), sum(bar) from user group by foo having sum(foo)+sum(bar) = 42"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select foo, sum(foo), sum(bar) from user group by foo having sum(foo)+sum(bar) = 42",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0,
      1,
      2
    ],
    "Inputs": [
      {
        "OperatorType": "Filter",
        "Predicate": "OFFSET(1, 'SUM(foo)') + OFFSET(2, 'SUM(bar)') = 42",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum(1) AS sum(foo), sum(2) AS sum(bar)",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, sum(foo), sum(bar), weight_string(foo) from user where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|3) ASC",
                "Query": "select foo, sum(foo), sum(bar), weight_string(foo) from user group by foo, weight_string(foo) order by foo asc",
                "Table": "user"
              }
            ]
          }
        ]
      }
    ]
  }
}

# find aggregation expression and use column offset in filter times three
"select foo, sum(foo) as fooSum, sum(bar) as barSum from user group by foo having fooSum+sum(bar) = 42"
"unsupported: filtering on results of aggregates"
{
  "QueryType": "SELECT",
  "Original": "select foo, sum(foo) as fooSum, sum(bar) as barSum from user group by foo having fooSum+sum(bar) = 42",
  "Instructions": {
    "OperatorType": "SimpleProjection",
    "Columns": [
      0,
      1,
      2
    ],
    "Inputs": [
      {
        "OperatorType": "Filter",
        "Predicate": "fooSum + OFFSET(2, 'SUM(bar)') = 42",
        "Inputs": [
          {
            "OperatorType": "Aggregate",
            "Variant": "Ordered",
            "Aggregates": "sum(1) AS foosum, sum(2) AS barsum",
            "GroupBy": "(0|3)",
            "Inputs": [
              {
                "OperatorType": "Route",
                "Variant": "SelectScatter",
                "Keyspace": {
                  "Name": "user",
                  "Sharded": true
                },
                "FieldQuery": "select foo, sum(foo) as fooSum, sum(bar) as barSum, weight_string(foo) from user where 1 != 1 group by foo, weight_string(foo)",
                "OrderBy": "(0|3) ASC",
                "Query": "select foo, sum(foo) as fooSum, sum(bar) as barSum, weight_string(foo) from user group by foo, weight_string(foo) order by foo asc",
                "Table": "user"
              }
            ]
          }
        ]
      }
    ]
  }
}

# distinct and aggregate functions
"select distinct a, count(*) from user group by a"
"unsupported: distinct cannot be combined with aggregate functions"
{
  "QueryType": "SELECT",
  "Original": "select distinct a, count(*) from user group by a",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "(0|2), 1",
    "ResultColumns": 2,
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Ordered",
        "Aggregates": "sum_count_star(1) AS count(*)",
        "GroupBy": "(0|2)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, count(*), weight_string(a) from user where 1 != 1 group by a, weight_string(a)",
            "OrderBy": "(0|2) ASC",
            "Query": "select a, count(*), weight_string(a) from user group by a, weight_string(a) order by a asc",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# distinct and aggregate functions missing group by
"select distinct a, count(*) from user"
"unsupported: distinct cannot be combined with aggregate functions"
{
  "QueryType": "SELECT",
  "Original": "select distinct a, count(*) from user",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "GroupBy": "0, 1",
    "Inputs": [
      {
        "OperatorType": "Aggregate",
        "Variant": "Scalar",
        "Aggregates": "random(0) AS a, sum_count_star(1) AS count(*)",
        "Inputs": [
          {
            "OperatorType": "Route",
            "Variant": "SelectScatter",
            "Keyspace": {
              "Name": "user",
              "Sharded": true
            },
            "FieldQuery": "select a, count(*) from user where 1 != 1",
            "Query": "select a, count(*) from user",
            "Table": "user"
          }
        ]
      }
    ]
  }
}

# using two distinct columns - min with distinct vindex, sum with distinct without vindex
"select col1, min(distinct name), sum(distinct col3) from user group by col1"
{
  "QueryType": "SELECT",
  "Original": "select col1, min(distinct name), sum(distinct col3) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "sum_distinct(2) AS sum(distinct col3)",
    "Distinct":true,
    "GroupBy": "0",
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, min(DISTINCT name), col3 from user where 1 != 1 group by col1, col3",
        "Query": "select col1, min(DISTINCT name), col3 from user group by col1, col3 order by col1 asc, col3 asc",
        "Table": "user"
      }
    ]
  }
}
{
  "QueryType": "SELECT",
  "Original": "select col1, min(distinct name), sum(distinct col3) from user group by col1",
  "Instructions": {
    "OperatorType": "Aggregate",
    "Variant": "Ordered",
    "Aggregates": "min(1) AS min(distinct name), sum_distinct(2|4) AS sum(distinct col3)",
    "GroupBy": "(0|3)",
    "ResultColumns": 3,
    "Inputs": [
      {
        "OperatorType": "Route",
        "Variant": "SelectScatter",
        "Keyspace": {
          "Name": "user",
          "Sharded": true
        },
        "FieldQuery": "select col1, min(DISTINCT name), col3, weight_string(col1), weight_string(col3) from user where 1 != 1 group by col1, weight_string(col1), col3, weight_string(col3)",
        "OrderBy": "(0|3) ASC, (2|4) ASC",
        "Query": "select col1, min(DISTINCT name), col3, weight_string(col1), weight_string(col3) from user group by col1, weight_string(col1), col3, weight_string(col3) order by col1 asc, col3 asc",
        "Table": "user"
      }
    ]
  }
}

# distinct and group by together for single route - group by is redundant
"select distinct col1, name from user group by col1"
{
  "QueryType": "SELECT",
  "Original": "select distinct col1, name from user group by col1",
  "Instructions": {
    "OperatorType": "Route",
    "Variant": "SelectScatter",
    "Keyspace": {
      "Name": "user",
      "Sharded": true
    },
    "FieldQuery": "select col1, name from user where 1 != 1 group by col1",
    "Query": "select distinct col1, name from user group by col1",
    "Table": "user"
  }
}
Gen4 plan same as above